# leetcode

题目描述（困难）
============

给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

你的目标是使用最少的跳跃次数到达数组的最后一个位置。

示例:

输入: [2,3,1,1,4]
输出: 2
解释: 跳到最后一个位置的最小跳跃数是 2。
     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。

解法一：反向查找出发位置
====================

从后往前查找能够满足i+nums[i]>=position的步数，这个方法时间复杂度太高

```java
public int jump(int[] nums) {
    int position = nums.length - 1;
    int steps = 0;
    while (position > 0) {
        for (int i = 0; i < position; i++) {
            if (i + nums[i] >= position) {
                position = i;
                steps++;
                break;}}}
    return steps;}
```

解法二：正向查找可以到达的最大位置
============================

```java
public int jump(int[] nums) {
    int length = nums.length;
    int end = 0;
    int maxPosition = 0; 
    int steps = 0;
    for (int i = 0; i < length - 1; i++) {
        maxPosition = Math.max(maxPosition, i + nums[i]); 
        if (i == end) {
            end = maxPosition;
            steps++;}}
    return steps;}
```

总结：
====

看起来代码简单，逻辑上确实挺复杂的，解法二中的一个跳跃的思想，也就是end的使用非常好，思路值得学习。
