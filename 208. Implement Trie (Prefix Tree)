# leetcode

题目描述（中等）
============

实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。
示例：Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // 返回 true
trie.search("app");     // 返回 false
trie.startsWith("app"); // 返回 true
trie.insert("app");   
trie.search("app");     // 返回 true

前缀树：
======

```java
class TrieNode {
  TrieNode[] children;
  boolean flag;
  public TrieNode() {
    children = new TrieNode[26];
    flag = false;
    for (int i = 0; i < 26; i++) {
      children[i] = null;}}}
  TrieNode root;
  public Trie() {
    root = new TrieNode();}
  public void insert(String word) {
    char[] array = word.toCharArray();
    TrieNode cur = root;
    for (int i = 0; i < array.length; i++) {
      if (cur.children[array[i] - 'a'] == null) {
        cur.children[array[i] - 'a'] = new TrieNode();}
    cur = cur.children[array[i] - 'a'];}
    //当前节点代表结束
    cur.flag = true;}
  public boolean search(String word) {
    char[] array = word.toCharArray();
    TrieNode cur = root;
    for (int i = 0; i < array.length; i++) {
      //不含有当前节点
      if (cur.children[array[i] - 'a'] == null) {
        return false;}
      cur = cur.children[array[i] - 'a'];}
      //当前节点是否为是某个单词的结束
      return cur.flag;}
  public boolean startsWith(String prefix) {
    char[] array = prefix.toCharArray();
    TrieNode cur = root;
    for (int i = 0; i < array.length; i++) {
      if (cur.children[array[i] - 'a'] == null) {
        return false;}
      cur = cur.children[array[i] - 'a'];}
    return true;}
 ```
 
 总结：
 ====
 
 这题就是直接使用字典树，需要掌握其常用用法。
 前缀树适用于两个场景。
1、统计每个单词出现的次数，代码的话只需要将上边的 flag 改成 int 类型，然后每次插入的时候计数即可。
当然，我们用 HashMap 也可以做到，key 是单词，value 存这个单词出现的次数即可。
但缺点是，当单词很多很多的时候，受到 Hash 函数的影响，hash 值会经常出现冲突，算法可能退化为 O(n)，n 是 key 的总数。
而对于前缀树，我们查找一个单词出现的次数，始终是 O(m)，m 为单词的长度。
2、查找某个前缀的单词，最常见的比如搜索引擎的提示、拼写检查、ip 路由等
