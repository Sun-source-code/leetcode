# leetcode

题目描述（中等）
============

哦，不！你不小心把一个长篇文章中的空格、标点都删掉了，并且大写也弄成了小写。
像句子"I reset the computer. It still didn’t boot!"已经变成了"iresetthecomputeritstilldidntboot"。
在处理标点符号和大小写之前，你得先把它断成词语。当然了，你有一本厚厚的词典dictionary，
不过，有些词没在词典里。假设文章用sentence表示，设计一个算法，把文章断开，要求未识别的字符最少，返回未识别的字符数。
注意：本题相对原题稍作改动，只需返回未识别的字符数。

示例：输入：
dictionary = ["looked","just","like","her","brother"]
sentence = "jesslookedjustliketimherbrother"
输出： 7
解释： 断句后为"jess looked just like tim her brother"，共7个未识别字符。

解法一：暴力使用Set
================

使用一个数组来代表每个位置上的未识别字符数，首先默认未识别字符逐次加一，当查找到识别的字符时，更新其数值。

```java
public int respace(String [] dictionary,String sentence){
  Set<String> set = new HashSet<>();
  for(String str : dictionary) set.add(str);
  int n = sentence.length();
  int [] dp = new int[n+1];
  for(int i = 1;i <= n;i++){
    dp[i] = dp[i-1] + 1;
    for(int j = 0;j < 0;j++){
      if(set.contains(sentence.substring(j,i))){
        dp[i] = Math.min(dp[i],dp[j]);}}}
  return dp[n];}
```

解法二：Trie+动态规划
==================

状态转移方程为dp[i] = dp[i-1] + 1

```java
class Trie{
  public Trie [] next;
  public boolean isEnd;
  public Trie(){
    next = new Trie[26];
    isEnd = false;}
  public void insert(String s){
    Trie curPos = this;
    for(int i = s.length()-1;i >= 0;i--){
      int t = s.charAt(i) - 'a';
      if(curPos.next[t] == null){
        curPos.next[t] = new Trie();}
      curPos = curPos.next[t];}
    curPos.isEnd = true;}}
  
public int replace(String [] dictionary,String sentence){
  int n = sentence.length();
  Trie root = new Trie();
  for(String str : dictionary){
    root.insert(str);}
  int [] dp = new int[n+1];
  Arrays.fill(dp,Integer.MAX_VALUE);
  for(int i = 1;i <= n;i++){
    dp[i] = dp[i-1] + 1;
    Trie curPos = root;
    for(int j = i;j >= 0;j--){
      int t = sentence.charAt(j-1)-'a';
      if(curPos.next[t] == null){
        break;}
      else if(curPos.next[t].isEnd){
        dp[i] = Math.min(dp[j-1],dp[i]);}
      if(dp[i] == 0){
        break;}
      curPos = curPos.next[t];}}
  return dp[n];}
```
  
总结：
====

这题思路还是简单的，不过字典树的建立却不容易，我还是对字典树不太熟。
