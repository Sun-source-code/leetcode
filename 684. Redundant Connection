# leetcode

题目描述（中等）
=============

在本问题中, 树指的是一个连通且无环的无向图。

输入一个图，该图由一个有着N个节点 (节点值不重复1, 2, ..., N) 的树及一条附加的边构成。
附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。

结果图是一个以边组成的二维数组。每一个边的元素是一对[u, v] ，满足 u < v，表示连接顶点u 和v的无向图的边。

返回一条可以删去的边，使得结果图是一个有着N个节点的树。
如果有多个答案，则返回二维数组中最后出现的边。答案边 [u, v] 应满足相同的格式 u < v。

示例 1：

输入: [[1,2], [1,3], [2,3]]
输出: [2,3]
解释: 给定的无向图为:
  1
 / \
2 - 3

解法一：并查集
============

```java
public int[] findRedundantConnection(int[][] edges) {
    int nodesCount = edges.length;
    int [] parent = new int[nodesCount+1];
    for(int i = 1;i <= nodesCount;i++){
        parent[i] = i;}
    for(int i = 0;i < nodesCount;i++){
        int [] edge = edge[i];
        int node1 = edge[0],ndoe2 = edge[1];
        if(find(parent,node1) != find(parent,node2)){
            union(parent,node1,node2);}
        else{
            return edge;}}
    return new int[0];}
public void union(int [] parent,int node1,int node2){
    parent[find(parent,node1)] = find(parent,node2);}
public int find(int [] parent,int node){
    if(parent[node] != node){
        parent[node] = find(parent,parent[node]);}
    return parent[node];}
```

总结：
====

并查集的做法，找出能够使得有向图不构成环的一条边。

n
