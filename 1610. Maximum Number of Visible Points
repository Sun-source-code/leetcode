# leetcode

题目描述（困难）
============

给你一个点数组 points 和一个表示角度的整数 angle ，你的位置是 location ，
其中 location = [posx, posy] 且 points[i] = [xi, yi] 都表示 X-Y 平面上的整数坐标。

最开始，你面向东方进行观测。你 不能 进行移动改变位置，但可以通过 自转 调整观测角度。
换句话说，posx 和 posy 不能改变。你的视野范围的角度用 angle 表示， 这决定了你观测任意方向时可以多宽。
设 d 为逆时针旋转的度数，那么你的视野就是角度范围 [d - angle/2, d + angle/2] 所指示的那片区域。
对于每个点，如果由该点、你的位置以及从你的位置直接向东的方向形成的角度 位于你的视野中 ，那么你就可以看到它。

同一个坐标上可以有多个点。你所在的位置也可能存在一些点，但不管你的怎么旋转，总是可以看到这些点。
同时，点不会阻碍你看到其他点。返回你能看到的点的最大数目。

示例 ：

输入：points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]
输出：3
解释：阴影区域代表你的视野。在你的视野中，所有的点都清晰可见，尽管 [2,2] 和 [3,3]在同一条直线上，你仍然可以看到 [3,3] 。

解法一：滑动窗口
=============

```java
public int visiblePoints(List<List<Integer>> points, int angle, List<Integer> location) {
    List<Double> angles = new ArrayList<>();
    int inPos= 0;//记录与站位点相同的观察点
    //计算所有点与站位点的角度
    for(List<Integer> point:points){
        if(point.get(1)==location.get(1)){
            if(point.get(0)==location.get(0)){
                inPos++; continue;}
            angles.add(point.get(0)>location.get(0) ? 0D : 180D);}
        else if(point.get(0)==location.get(0))
            angles.add(point.get(1)>location.get(1) ? 90D : 270D);
        else {
            double tan = (point.get(1)-location.get(1))/(double)(point.get(0)-location.get(0));
            double ang = Math.toDegrees(Math.atan(tan));
            if(point.get(0)>location.get(0) && point.get(1)>location.get(1))
                angles.add(ang);
            else if(point.get(0)>location.get(0) && point.get(1)<location.get(1))
                angles.add(ang+360D);
            else angles.add(ang+180D);}}
    //排序
    angles.sort(Comparator.naturalOrder());
    int L=0, wsize=0, max=0, S=angles.size();
    //窗口大小wsize, 窗口范围 [L, i]
    OUTER: for(int i=0; i< S; i=(i+1)%S){
        //当窗口右边界来到i时，删除左边已经观察不到的点
        while ((angles.get(i)-angles.get(L)+360D)%360D > angle){
            L++;
            if(L==S) break OUTER;
            wsize--;}
        wsize++;
        if(wsize>=S) return wsize+inPos;
        max=Math.max(max, wsize);}
    return max+inPos;}
```

总结：
====

大致思路就是，把每一个点到location位置所成的直线与x轴的角度存入一个链表中，滑动窗口找到最多的点的个数，注意这些点和location
在同一个位置的情况，还要注意%360D
