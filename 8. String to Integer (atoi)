# leetcode

题目描述（中等）
=============

请你来实现一个 atoi 函数，使其能将字符串转换成整数。
首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：

1、如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。
2、假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。
3、该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。
注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，
则你的函数不需要进行转换，即无法进行有效转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0 。

提示：本题中的空白字符只包括空格字符 ' ' 。
假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。
如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。

示例：输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。

解法一：正常遍历
=============

public int myAtoi(String str) {
  int i=0,n=str.length();
  while(i<n&&str.charAt(i)==' ')i++;
  if(i==n)return 0;
  int flag=1;
  if(str.charAt(i)=='+'||str.charAt(i)=='-'){
    if(str.charAt(i)=='-')flag=-1;
    i++;}
  int ans=0;
    while(i<n&&Character.isDigit(str.charAt(i))) {
      int temp=str.charAt(i)-'0';
      if (flag == 1 && (ans > Integer.MAX_VALUE / 10 || (ans == Integer.MAX_VALUE / 10 && temp > 7)))
        return Integer.MAX_VALUE ;
      if (flag == -1 && (ans > -(Integer.MIN_VALUE / 10) || (ans == -(Integer.MIN_VALUE / 10) && temp > 8)))
        return Integer.MIN_VALUE;
      ans=ans*10+temp;
      i++;}
  return ans*flag;}
```

解法二：有限状态机
===============

列出四种状态，start代表’‘，signed代表正负号，in_number代表数字，other代表其他字符
            ''    +/-       number    other
start     start   signed  in_number   end
signed    end     end     in_number   end
in_number end     end     in_number   end
end       end     end     end         end

```java
class Automate{
  private int state = 0;
  private int [][] table = {{0,1,2,3},{3,3,2,3},{3,3,2,3},{3,3,3,3}};
  long ans = 0;
  int sign = 1;
  public int gets(char c){
    if(c==' ')return 0;
    if(c=='+' || c=='-') return 1;
    if(Character.isDigit(c)) return 2;
    return 3;}
  public int get(char c){
    state=table[state][gets(c)];
    if(state==2){
      ans=ans*10+(c-'0');
      ans= sign==1 ? Math.min(ans,Integer.MAX_VALUE):Math.min(ans,-(long)Integer.MIN_VALUE);}
    if(state==1&&c=='-')sign=-1;}
class solution{
  public int myAtoi(String str){
    Automate auto = new Automate();
    char[] temp = str.toCharArry();
    for(char c : temp){
      auto.get(c);}
    return auto.sign * (int) auto.ans;}}
```

解法三：正则表达式
===============

```java
public int myAtoi(String str) {
  String pattern = "^\\s*([+-]?\\d+)";
  Pattern r = Pattern.compile(pattern);
  Matcher m = r.matcher(str);
  if (!m.find( ))  return 0;
  BigInteger ans = new BigInteger(m.group(1));
  if(ans.compareTo(new BigInteger(String.valueOf(Integer.MIN_VALUE)))<0){
    return Integer.MIN_VALUE;}
  if(ans.compareTo(new BigInteger(String.valueOf(Integer.MAX_VALUE)))>0){
    return Integer.MAX_VALUE;}
  return ans.intValue();}
```

总结：
====

我只能想到第一种方法，第一种方法还是需要注意最大值和最小值的处理，参考第七题的溢出检查，第二种方法和第三种
方法真的是很巧妙了，状态机只要列出了状态，其他也就不难了，正则表达式还是要多熟悉一下。
