# leetcode

题目描述（困难）
============

厨房里总共有 n 个橘子，你决定每一天选择如下方式之一吃这些橘子：

吃掉一个橘子。
如果剩余橘子数 n 能被 2 整除，那么你可以吃掉 n/2 个橘子。
如果剩余橘子数 n 能被 3 整除，那么你可以吃掉 2*(n/3) 个橘子。
每天你只能从以上 3 种方案中选择一种方案。

请你返回吃掉所有 n 个橘子的最少天数。

示例：输入：n = 10
输出：4
解释：你总共有 10 个橘子。
第 1 天：吃 1 个橘子，剩余橘子数 10 - 1 = 9。
第 2 天：吃 6 个橘子，剩余橘子数 9 - 2*(9/3) = 9 - 6 = 3。（9 可以被 3 整除）
第 3 天：吃 2 个橘子，剩余橘子数 3 - 2*(3/3) = 3 - 2 = 1。
第 4 天：吃掉最后 1 个橘子，剩余橘子数 1 - 1 = 0。
你需要至少 4 天吃掉 10 个橘子。

解法一：哈希表
============

```
Map<Integer, Integer> map = new HashMap();
public int minDays(int n) {
    if(n == 0) return 0;
    if(!map.containsKey(n)){
        int ans = n;
        int half = n / 2;
        int third = n / 3;
        ans = Math.min(ans, minDays(half) + 1 + n - half * 2);
        ans = Math.min(ans, minDays(third) + 1 + n - third * 3);
        map.put(n, ans);}
    return map.get(n);}
```

总结：
====

最先想到的是贪心算法，也就是每次吃尽量多的橘子，后来发现不可行，然后就是递归，但是也超出时间限制，
最后才加上记忆化的哈希表。
    
总结：
