# leetcode

题目描述（简单）
============

从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。

例如:
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [9,20],
  [15,7]
]

解法一：深度优先遍历
=================

```java
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        if(root != null) queue.add(root);
        while(!queue.isEmpty()){
            List<Integer> tmp = new ArrayList<>();
            for(int i = queue.size();i > 0;i--){
                TreeNode node = queue.poll();
                tmp.add(node.val);
                if(node.left != null) queue.add(node.left);
                if(node.right != null) queue.add(node.right);}
            ans.add(tmp);}
        return ans;}}
```

解法二：广度优先遍历
=================

```java
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        levelHelper(ans,root,0);
        return ans;}
    public void levelHelper(List<List<Integer>> ans,TreeNode root,int height){
        if(root == null) return;
        if(height >= ans.size()){
            ans.add(new ArrayList<>());}
        ans.get(height).add(root.val);
        levelHelper(ans,root.left,height+1);
        levelHelper(ans,root.right,height+1);}}
```

总结：
====

和上一题一样的操作。
