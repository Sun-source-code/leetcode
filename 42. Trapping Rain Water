# leetcode

题目描述（困难）
============

给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。
上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。

示例：输入: [0,1,0,2,1,0,1,3,2,1,2,1]
输出: 6

解法一：按行求
============

对于每一行，如果某一列高度大于当前行数，开始更新temp，如果后面某一列高度下雨当前行数，sum=sum+temp，并使temp=0
这个方法思路很好，不过结果超过时间限制

```java
public int trap(int[] height) {
    int max = getMax(height);
    int sum = 0;
    for(int i = 1;i <= max;i++){
        boolean isStart = false;
        int temp = 0;
        for(int j = 0;j < height.length;j++){
            if(isStart && height[j] < i){
                temp++;}
            if(height[j] >= i){
                sum += temp;
                temp = 0;
                isStart = true;}}}
    return sum;}
private int getMax(int [] height){
    int max = 0;
    for(int i = 0;i < height.length;i++){
        if(height[i] > max){
            max = height[i];}}
    return max;}
```

解法二：按列求
============

找出相对当前列，左边最高的高度和右边最高高度，取两个高度的最小值，如果这个最小值大于当前列的高度，则更新

```java
public int trap(int[] height) {
    int sum = 0;
    for(int i = 1;i < height.length-1;i++){
        int max_left = 0;
        for(int j = i-1;j >= 0;j--){
            if(height[j] > max_left){
                max_left = height[j];}}
        int max_right = 0;
        for(int j = i+1;j < height.length;j++){
            if(height[j] > max_right){
                max_right = height[j];}}
        int min = Math.min(max_right,max_left);
        if(min > height[i]){
            sum += min - height[i];}}
    return sum;}
```

解法三：动态规划
=============

基于解法二，左边最高的墙的高度max_left[i] = max(max_left[i-1],height[i-1])
右边最高的墙的高度max_right[i] = max(max_right[i+1],height[i+1]

public int trap(int[] height) {
    int sum = 0;
    int [] max_left = new int[height.length];
    int [] max_right = new int[height.length];
    for(int i = 1;i < height.length - 1;i++){
        max_left[i] = Math.max(max_left[i-1],height[i-1]);}
    for (int i = height.length - 2; i >= 0; i--) {
        max_right[i] = Math.max(max_right[i + 1], height[i + 1]);}
    for(int i = 1;i < height.length-1;i++){
        int min = Math.min(max_left[i],max_right[i]);
        if(min > height[i]){
            sum += min - height[i];}}
    return sum;}
```

解法四：双指针
============

```java
public int trap(int[] height) {
    int sum = 0;
    int max_left = 0;
    int max_right = 0;
    int left = 1;
    int right = height.length-2;
    for(int i = 1;i < height.length-1;i++){
        if(height[left - 1] < height[right + 1]){
            max_left = Math.max(max_left,height[left - 1]);
            if(max_left > height[left]){
                sum += max_left - height[left];}
            left++;}
        else{
            max_right = Math.max(max_right,height[right+1]);
            if(max_right > height[right]){
                sum += max_right - height[right];}
            right--;}}
    return sum;}
```

解法五：栈
========

1、当前元素小于栈顶元素，入栈，指针后移
2、当前元素大于栈顶元素，出栈，计算出当前墙和栈顶元素的墙之间水的关系，然后计算当前的高度和新栈的高度的关系，
重复第 2 步。直到当前墙的高度不大于栈顶高度或者栈空，然后把当前墙入栈，指针后移

```java
public int trap(int[] height) {
    int sum = 0;
    Stack<Integer> stack = new Stack<>();
    int cur = 0;
    while(cur < height.length){
        while(!stack.empty() && height[cur] > height[stack.peek()]){
            int h = height[stack.peek()];
            stack.pop();
            if(stack.empty()) break;
            int distance = curr - stack.peek() - 1;
            int min = Math.min(height[stack.peek()], height[cur]);
            sum = sum + distance * (min - h);}
        stack.push(cur);
        cur++;}
    return sum;}
```

总结：
====

我能想到的方法只有解法二和解法三，仔细看会发现，前面几种方法都属于一个优化的思想，优化强度最棒的是解法三到解法四，
max_left[]和max_right[]的元素只使用一次，所以可以使用一个变量来表示，注意这里是从左到右和从右到左的思路，这题
是一个经典题目。
