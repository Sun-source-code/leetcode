# leetcode

题目描述（简单）
============

给定一个二叉树，找出其最小深度。
最小深度是从根节点到最近叶子节点的最短路径上的节点数量。
说明: 叶子节点是指没有子节点的节点。

示例:

给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回它的最小深度  2.

解法一：深度优先遍历
=================

```java
public int minDepth(TreeNode root) {
    if(root == null) return 0;
    if(root.left == null && root.right == null){
        return 1;}
    int ans = Integer.MAX_VALUE;
    if(root.left != null){
        ans = Math.min(ans,minDepth(root.left));}
    if(root.right != null){
        ans = Math.min(ans,minDepth(root.right));}
    return ans + 1;}
```

解法二：广度优先遍历
=================

新建一个类描述每一个节点以及它的高度，使用队列更新高度。

```java
class QueueNode{
    TreeNode node;
    int depth;
    public QueueNode(TreeNode node,int depth){
        this.node = node;
        this.depth = depth;}}

public int minDepth(TreeNode root) {
    if(root == null) return 0;
    Queue<QueueNode> queue = new LinkedList<>();
    queue.offer(new QueueNode(root,1));
    while(!queue.isEmpty()){
        QueueNode nodeDepth = queue.poll();
        TreeNode node = nodeDepth.node;
        int depth = nodeDepth.depth;
        if(node.left == null && node.right == null){
            return depth;}
        if(node.left != null){
            queue.offer(new QueueNode(node.left,depth+1));}
        if(node.right != null){
            queue.offer(new QueueNode(node.right,depth+1));}}
    return 0;}
```

总结：
====

二叉树遍历的经典深度优先和广度优先遍历。
