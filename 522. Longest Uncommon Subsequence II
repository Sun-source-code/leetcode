# leetcode

题目描述（中等）
============

给定字符串列表，你需要从它们中找出最长的特殊序列。最长特殊序列定义如下：该序列为某字符串独有的最长子序列（即不能是其他字符串的子序列）。

子序列可以通过删去字符串中的某些字符实现，但不能改变剩余字符的相对顺序。空序列为所有字符串的子序列，任何字符串为其自身的子序列。

输入将是一个字符串列表，输出是最长特殊序列的长度。如果最长特殊序列不存在，返回 -1 。


示例：
输入: "aba", "cdc", "eae"
输出: 3

解法一：暴力
==========

```java
public int findLUSlength(String[] strs) {
    HashMap < String, Integer > map = new HashMap < > ();
    for (String s: strs) {
        for (int i = 0; i < (1 << s.length()); i++) {
            String t = "";
            for (int j = 0; j < s.length(); j++) {
                if (((i >> j) & 1) != 0)
                    t += s.charAt(j);}
            if (map.containsKey(t))
                map.put(t, map.get(t) + 1);
            else
                map.put(t, 1);}}
    int res = -1;
    for (String s: map.keySet()) {
        if (map.get(s) == 1)
             res = Math.max(res, s.length());}
    return res;}
```

解法二：检查每个字符串
==================

```java
public boolean isSubsequence(String x, String y) {
    int j = 0;
    for (int i = 0; i < y.length() && j < x.length(); i++)
        if (x.charAt(j) == y.charAt(i))
            j++;
    return j == x.length();}
public int findLUSlength(String[] strs) {
    int res = -1;
    for (int i = 0,j; i < strs.length; i++) {
        for (j = 0; j < strs.length; j++) {
            if (j == i)
                continue;
            if (isSubsequence(strs[i], strs[j]))
                break;}
        if (j == strs.length)
            res = Math.max(res, strs[i].length());}
    return res;}
```

解法三：排序+检查每个字符串
======================

与解法二不同的是现根据每个字符串长度进行排序，如果相邻两个已经相同，那么后面也就不需要再计算了

```java
public boolean isSubsequence(String x, String y) {
    int j = 0;
    for (int i = 0; i < y.length() && j < x.length(); i++)
        if (x.charAt(j) == y.charAt(i))
            j++;
    return j == x.length();}
public int findLUSlength(String[] strs) {
    Arrays.sort(strs, new Comparator < String > () {
        public int compare(String s1, String s2) {
            return s2.length() - s1.length();}
    });
    for (int i = 0, j; i < strs.length; i++) {
        boolean flag = true;
        for (j = 0; j < strs.length; j++) {
            if (i == j) continue;
            if (isSubsequence(strs[i], strs[j])) {
                flag = false;
                break;}}
            if (flag) return strs[i].length();}
    return -1;}
```

总结：
====

常规的解法是解法一，但时间复杂度过高，其实后面的方法也好理解，只是判断字符是否相等，相等则break，这里先排序的思路
值得学习，可以大大减少计算量
