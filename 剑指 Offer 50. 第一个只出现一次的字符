# leetcode

题目描述（简单）
============

在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。

示例:
s = "abaccdeff"
返回 "b"

s = "" 
返回 " "

解法一：哈希表存储频数
===================

```java
class Solution {
    public char firstUniqChar(String s) {
        Map<Character,Integer> map = new HashMap<>();
        for(int i = 0;i < s.length();i++){
            map.put(s.charAt(i),map.getOrDefault(s.charAt(i),0));}
        for(int i = 0;i < s.length();i++){
            if(map.get(s.charAt(i)) == 1){
                return s.charAt(i);}}
        return ' ';}}
```

解法二：哈希表存储索引
==================

```java
class Solution {
    public char firstUniqChar(String s) {
        Map<Character,Integer> map = new HashMap<>();
        int n = s.length();
        for(int i = 0;i < n;i++){
            if(map.containsKey(s.charAt(i)){
                map.put(s.charAt(i),-1);}
            else{
                map.put(s.charAt(i),i);}}
        int first = n;
        for(Map.Entry<Character,Integer> entry : map.entrySet()){
            int pos = entry.getValue();
            if(pos != -1 && pos < first){
                first = pos);}}
        return first == n ? ' ' : s.charAt(first);}}
```

解法三：队列
==========

```java
class Solution {
    public char firstUniqChar(String s) {
        Map<Character, Integer> position = new HashMap<Character, Integer>();
        Queue<Pair> queue = new LinkedList<Pair>();
        int n = s.length();
        for (int i = 0; i < n; ++i) {
            char ch = s.charAt(i);
            if (!position.containsKey(ch)) {
                position.put(ch, i);
                queue.offer(new Pair(ch, i));
            } else {
                position.put(ch, -1);
                while (!queue.isEmpty() && position.get(queue.peek().ch) == -1) {
                    queue.poll();}}}
        return queue.isEmpty() ? ' ' : queue.poll().ch;}
    class Pair {
        char ch;
        int pos;
        Pair(char ch, int pos) {
            this.ch = ch;
            this.pos = pos;}}}
```

解法四：数组
==========

```java
class Solution {
    public char firstUniqChar(String s) {
        int [] count = new int[256];
        for(char c : s.toCharArray()){
            count[c]++;}
        for(char c : s.toCharArray()){
            if(count[c] == 1){
                return c;}}
        return ' ';}}
```

总结：
====

最容易想到的方法是哈希表存储词频，但他并不是最好的方法，效率最高的反而是方法二，使用数组一般都比使用字符串或者哈希表快。
