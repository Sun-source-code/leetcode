# leetcode

题目描述（简单）
=============

输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。

序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。

示例 1：

输入：target = 9
输出：[[2,3,4],[4,5]]

解法一：枚举+暴力
===============

```java
class Solution {
    public int[][] findContinuousSequence(int target) {
        List<int []> ans = new ArrayList<>();
        int sum = 0, limit = (target - 1) / 2; 
        for(int i = 1;i <= limit;i++){
            for(int j = i;;j++){
                if(sum > target){
                    sum = 0;
                    break;}
                else if(sum == target){
                    int [] tmp = new int[j-i+1];
                    for(int k = i;k <= j;k++){
                        res[k-i] = k;}}
                ans.add(tmp);
                sum = 0;
                break;}}
        return ans.toArray(new int[ans.size()][]);}}
```

解法二：枚举+数学优化
==================

```java
class Solution {
    public int[][] findContinuousSequence(int target) {
        List<int []> ans = new ArrayList<>();
        int sum = 0, limit = (target - 1) / 2; 
        for(int i = 1;i <= limit;i++){
            long delta = 1 - 4 * (x - (long)x * x - 2 * target);
            if(delta < 0)  continue;
            int delta_sqrt = (int) Math.sqrt(delta + 0.5);
            if((long) delta_sqrt * delta_sqrt == delta && (delta_sqrt - 1) % 2 == 0){
                int y = (-1 + delta_sqrt) / 2;
                if(x < y){
                    int [] tmp = new int[y-x+1];
                    for(int j = x;j <= y;j++){
                        tmp[j - x] = j;}
                    ans.add(tmp);}}}
        return ans.toArray(new int[ans.size()][]);}}
```

解法三：双指针
============

```java
class Solution {
    public int[][] findContinuousSequence(int target) {
        List<int[]> vec = new ArrayList<int[]>();
        for (int l = 1, r = 2; l < r;) {
            int sum = (l + r) * (r - l + 1) / 2;
            if (sum == target) {
                int[] res = new int[r - l + 1];
                for (int i = l; i <= r; ++i) {
                    res[i - l] = i;}
                vec.add(res);
                l++;
            } else if (sum < target) {
                r++;
            } else {
                l++;}}
        return vec.toArray(new int[vec.size()][]);}}
```

总结：
====

原本我写的是方法二，但是这里需要做很多的判断，而如果通过数组长度来求a1，那么整个结果无法按照a1来排序，最终还是放弃
了这种做法，这三种方法中最好的应该就是双指针了，思路很好。
