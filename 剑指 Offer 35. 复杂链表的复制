# leetcode

题目描述（中等）
============

请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，
还有一个 random 指针指向链表中的任意节点或者 null。

示例 1：
输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]

解法一：哈希表
============

```java
class Solution {
    public Node copyRandomList(Node head) {
        if(head == null) return null;
        Node cur = head;
        Map<Node,Node> map = new HashMap<>();
        while(cur != null){
            map.put(cur,new Node(cur.val);
            cur = cur.next;}
        cur = head;
        while(cur != null){
            map.get(cur).next = map.get(cur.next);
            map.get(random).next = map.get(cur.random);
            cur = cur.next;}
        return map.get(head);}}
```

解法二：拼接+拆分
==============

```java
class Solution {
    public Node copyRandomList(Node head) {
        if(head == null) return null;
        Node cur = head;
        while(cur != null){
            Node tmp = new Node(cur.val);
            tmp.next = cur.next;
            cur.next = tmp;
            cur = tmp.next;}
        cur = head;
        while(cur != null){
            if(cur.random != null){
                cur.next.random = cur.random.next;}
            cur = cur.next.next;}
        cur = head.next;
        Node pre = head,res = head.next;
        while(cur.next != null){
            pre.next = pre.next.next;
            cur.next = cur.next.next;
            pre = pre.next;
            cur = cur.next;}
        pre.next = null;
        return res;}}
```

总结：
====

第二种方法还是不太理解，大概知道是将next节点和random节点拼接，但是为什么还是不理解，下次更新吧。
