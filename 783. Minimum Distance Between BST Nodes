# leetcode

题目描述（简单）
=============

给定一个二叉搜索树的根节点 root，返回树中任意两节点的差的最小值。
示例：输入: root = [4,2,6,1,3,null,null]
输出: 1
解释:
注意，root是树节点对象(TreeNode object)，而不是数组。
给定的树 [4,2,6,1,3,null,null] 可表示为下图:

          4
        /   \
      2      6
     / \    
    1   3  
最小的差值是 1, 它是节点1和节点2的差值, 也是节点3和节点2的差值。

解法一：排序
==========

```java
List<Integer> vals;
public int minDiffInBST(TreeNode root){
  vals = new ArrayList<>();
  dfs(root);
  Collections.sort(vals);
  int ans = Integer.MAX_VALUE;
  for(int i = 0;i < vals.size()-1;i++){
    ans = Math.min(ans,vals.get(i+1)-vals.get(i);}
  return ans;}
public void dfs(TreeNode node){
  if(node == null) return;
  vals.add(node.val);
  dfs(node.left);
  dfs(node.right);}
```

解法二：中序遍历
=============

```java
Integer prev,ans;
public int minDiffInBST(TreeNode root){
  prev = null;
  ans = Integer.MAX_VALUE;
  dfs(root);
  return ans;}
public void dfs(TreeNode node){
  if(node == null) return;
  dfs(node.left);
  if(prev != null){
    ans = Math.min(ans,node.val-prev);}
  prev = node.val;
  dfs(node.right);}
```

总结：
====

其实两种方法都是中序遍历，不同的是解法一直接遍历出结果，再更新最小距离，解法二遍历的同时更新最小距离，后面直接输出。
