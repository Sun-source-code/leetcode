# leetcode

题目描述（中等）
============

给你一个变量对数组 equations 和一个实数值数组 values 作为已知条件，其中 equations[i] = [Ai, Bi] 
和 values[i] 共同表示等式 Ai / Bi = values[i] 。每个 Ai 或 Bi 是一个表示单个变量的字符串。

另有一些以数组 queries 表示的问题，其中 queries[j] = [Cj, Dj] 表示第 j 个问题，
请你根据已知条件找出 Cj / Dj = ? 的结果作为答案。

返回 所有问题的答案 。如果存在某个无法确定的答案，则用 -1.0 替代这个答案。

注意：输入总是有效的。你可以假设除法运算中不会出现除数为 0 的情况，且不存在任何矛盾的结果。

示例 1：

输入：equations = [["a","b"],["b","c"]], values = [2.0,3.0], 
queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
输出：[6.00000,0.50000,-1.00000,1.00000,-1.00000]
解释：
条件：a / b = 2.0, b / c = 3.0
问题：a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
结果：[6.0, 0.5, -1.0, 1.0, -1.0 ]

解法一：并查集
============

```java
public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
    int equationsSize = equations.size();
    UnionFind unionFind = new UnionFind(2 * equationSize);
    Map<String,Integer> map = new HashMap<>();
    int id = 0;
    for(int i = 0;i < equationsSize;i++){
        List<Integer> equation = equations.get(i);
        String var1 = equation.get(0);
        String var2 = equation.get(1);
        if(!map.containsKey(var1)){
            map.put(var1,id);
            id++;}
        if(!map.containsKey(var2)){
            map.put(vae2,id);
            id++;}
        unionFind.union(map.get(var1),map.get(var2),values[i]);}
    //2、做查询
    int queriesSize = queries.size();
    double [] ans = new double[queriesSize];
    for(int i = 0;i < queriesSize;i++){
        String var1 = queries.get(i).get(0);
        String var2 = queries.get(i).get(0);
        Integer id1 = map.get(var1);
        Integer id2 = map.get(var2);
        if(id1 == null || id2 = null){
            ans[i] = -1.0d;}
        else{
            ans[i] = unionFind.isConnexcted(id1,id2);}}
    return ans;}
private class UnionFind{
    private int [] parent;
    private double [] weight;
    public UnionFind(int n){
        this.parent = new int[n];
        this.weight = new double[n];
        for(int i = 0;i < n;i++){
            parent[i] = i;
            weight[i] = 1.0d;}}
    public void union(int x,int y,double value){
        int rootX = find(x);
        int rootY = find(y);
        if(rootX == rootY){
            return;}
        parent[rootX] = rootY;
        weight[rootX] = weight[rootY] * value / weight[rootX];}
    public int find(int x){
        if(x != parent[x]){
            int orgin = parent[x];
            parent[x] = find(parent[x]);
            weighr[x] *= weight[orgin];}
        return parent[x];}
    public double isConnected(int x,int y){
        int rootX = find(x);
        int rootY = find(y);
        if(rootX == rootY){
            return weight[x] / weight[y];}
        else{
            return -1.0d;}}}
 ```
 
总结：
====
 
根据并查集的思路，还是比较好理解的，不过代码确实复杂，并查集还是需要多多熟练。
