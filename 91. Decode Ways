# leetcode

题目描述（中等）
=============

一条包含字母 A-Z 的消息通过以下方式进行了编码：
'A' -> 1
'B' -> 2
...
'Z' -> 26
给定一个只包含数字的非空字符串，请计算解码方法的总数。

示例：
输入: "12"
输出: 2
解释: 它可以解码为 "AB"（1 2）或者 "L"（12）。

解法一：递归+记忆化
================

```java
public int numDecodings(String s) {
    HashMap<Integer,Integer> memo = new HashMap<>();
    return getAns(s,0,memo);}
public int getAns(String s,int start,HashMap<Integer,Integer> memo){
    if(start == s.length()) return 1;
    if(s.charAt(0) == '0') return 0;
    int m = memo.getOrDefault(start,-1);
    if(m != -1) return m;
    int ans1 = getAns(s,start+1,memo);
    int ans2 = 0;
    if(start < s.length()){
        int ten = (s.charAt(start)-'0') * 10;
        int one = s.charAt(start+1) - '0';
        if(ten + one <= 26){
            ans2 = getAns(s,start+2,memo);}}
    memo.put(start,ans1+ans2);
    return ans1+ans2;}
```

解法二：动态规划
=============

如果s[i]和s[i+1]组成的数字小于等于26，那么dp[i] = dp[i+1] + dp[i+2]

```java
public int numDecodings(String s) {
    int len = s.length();
    int [] dp = new int[len+1];
    dp[len] = 1;
    if(s.charAt(len-1) != '0'){
        dp[n-1] = 1;}
    for(int i = len-2;i >= 0;i--){
        if(s.charAt(i) == '0') continue;
        int ans1 = dp[i+1];
        int ans2 = 0;
        int ten = (s.charAt(i) - '0') * 10;
        int one = s.charAt(i+1) - '0';
        if(ten + one <= 26){
            ans2 = dp[n+2];}
        dp[i] = dp[i+1] + dp[i+2];}}
```

总结：
====

这题和93题的思路一样，还比93题简单，对字符串进行划分，划分的长度是一位数或两位数。
