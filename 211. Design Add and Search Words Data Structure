# leetcode

题目描述（中等）
=============

请你设计一个数据结构，支持 添加新单词 和 查找字符串是否与任何先前添加的字符串匹配 。

实现词典类 WordDictionary ：

WordDictionary() 初始化词典对象
void addWord(word) 将 word 添加到数据结构中，之后可以对它进行匹配
bool search(word) 如果数据结构中存在字符串与 word 匹配，则返回 true ；
否则，返回  false 。word 中可能包含一些 '.' ，每个 . 都可以表示任何一个字母。

示例：
输入：
["WordDictionary","addWord","addWord","addWord","search","search","search","search"]
[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]
输出：
[null,null,null,null,false,true,true,true]

解释：
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord("bad");
wordDictionary.addWord("dad");
wordDictionary.addWord("mad");
wordDictionary.search("pad"); // return False
wordDictionary.search("bad"); // return True
wordDictionary.search(".ad"); // return True
wordDictionary.search("b.."); // return True

解法一：前缀树
============

```java
class WordDictionary {
    class TrieNode{
        TrieNode [] children;
        boolean flag;
        public TrieNode(){
            children = new TrieNode[26];
            flag = false;
            for(int i = 0;i < 26;i++){
                children[i] = null;}}
    TrieNode root;
    public wordDictionary(){
        root = new TrieNode();}
    public void addWord(String word){
        char [] array = woed.toCharArray();
        TrieNode cur = root;
        for(int i = 0;i < array.length;i++){
            if(cur.children[array[i] - 'a'] == null){
                cur.children[array[i] - 'a'] = new TrieNode();}
            cur = cur.children[array[i] - 'a'];}
        cur.flag = true;}
    public boolean search(String word){
        return searchWord(word,root);}
    public boolean searchWord(String word,TrieNode root){
        char [] array = word.toCharArray();
        TrieNode cur = root;
        for(int i = 0;i < array.length;i++){
            if(array[i] == '.'){
                if(cur.children[j] != null){
                    if(searchWord(word.substring(i+1),cur.children[j]){
                        return true;}}}
            return false;}
            if(cur.children[arrayi] - 'a'] == null){
                return false;}
            cur = cur.children[array[i] - 'a'];}
        return cur.flag;}}
```

总结：
====

其他倒还好，只是最后的查询中有一个'.'的符号可以视为任何字符，需要特别注意，而其中判断是否到达结尾的方式就是flag的值。
