# leetcode

题目描述（简单）
============

你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素
就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例：输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。

解法一：动态规划
==============

对于第k间房屋，存在两种情况：
1、如果抢劫该房屋，那么获得的最高金额为前k-2个房屋和第k个房屋金额之和
2、如果不抢劫该房屋，那么获得的最高金额为前k-1个房屋金额
状态转移方程为：
dp[i] = Math.max(dp[i-2]+nums[i],dp[i-1]);
注意特殊情况：
1、只有一间房屋，dp[i] = nums[0]
2、有两间房屋，dp[i] = Math.max(nums[0],nums[1]);

```java
public int rob(int [] nums){
  if(nums == null || nums.length == 0) return 0;
  int len = nums.length;
  int [] dp = new int[len];
  dp[0] = nums[0];
  dp[1] = Math.max(nums[0],nums[1]);
  for(int i = 2;i < len;i++){
    dp[i] = Math.max(dp[i-2]+nums[i],dp[i-1]);}
  return dp[len-1];}
```

空间优化
=======

```java
public int rob(int [] nums){
  if(nums == null || nums.length == 0) return 0;
  int len = nums.length;
  first = nums[0];
  second = Math.max(nums[0],nums[1]);
  for(int i = 2;i < len;i++){
    int temp = second;
    second = Math.max(first+nums[i],second);
    first = temp;}
  return second;}
```

总结：
====

这里就是动态规划的简单运用，注意方法二中更新first的值。

    
·
··

d
=ui

