# leetcode

题目描述（简单）
=============

给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。

百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，
满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]
        8
    5       1
 6    2   0   8
    7   4

示例 :
输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出: 3
解释: 节点 5 和节点 1 的最近公共祖先是节点 3。

解法一：递归
==========

满足两个条件，flson && frson表示p和q分别在当前节点的左子树和右子树上，或者当前节点为p或q，而另外一个节点在它的左子树或右子树上。

```java
class Solution {
    TreeNode ans = null;
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        dfs(root,p,q);
        return ans;}
    public boolean dfs(TreeNode root,TreeNode p,TreeNode q){
        if(root == null) return false;
        boolean flson = dfs(root.left,p,q);
        boolean frson = dfs(root.right,p,q);
        if((flson && frson) || (flson || frson) && (root.val == p.val || root.val == q.val)){
            ans = root;}
        return flson || frson || root.val == p.val || root.val == q.val;}}
```

解法二：存储父节点
================

使用哈希表存储父节点，让pq不断向其祖先移动，直到遇到公共祖先。

```java
class Solution {
    Map<Integer, TreeNode> parent = new HashMap<Integer, TreeNode>();
    Set<Integer> visited = new HashSet<Integer>();
    public void dfs(TreeNode root) {
        if (root.left != null) {
            parent.put(root.left.val, root);
            dfs(root.left);}
        if (root.right != null) {
            parent.put(root.right.val, root);
            dfs(root.right);}}
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        dfs(root);
        while (p != null) {
            visited.add(p.val);
            p = parent.get(p.val);}
        while (q != null) {
            if (visited.contains(q.val)) {
                return q;}
            q = parent.get(q.val);}
        return null;}}
```

总结：
====

与上一题不同的是，上一题固定为二叉搜索树，可以使用左子树与右子树的关系进行判断，这题是普通二叉树，需要逐个遍历。
