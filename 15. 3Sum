# leetcode

题目描述（中等）
============

给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。
注意：答案中不可以包含重复的三元组。

示例：给定数组 nums = [-1, 0, 1, 2, -1, -4]，
满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]

解法一：排序+双指针
===============

首先题目要求给出不重复的三元组，不重复则确定我们不能直接使用暴力的三层循环来做
<br>
‘不重复’的本质是什么
* 第二重循环枚举到的元素不小于当前第一重循环枚举到的元素
* 第三重循环枚举到的元素不小于当前第二重循环枚举到的元素
也就是说，在三元组（a,b,c）中，我们只有(a,b,c)这个顺便可以遍历到，而(b,c,a)和(c,a,b)这些顺序不会，那么我们必须先对数组进行排序
由此我们得到第一种方法：

```java
public List<List<Integer>> threeSum(int [] nums){
  Arrays.sort(nums);
  List<List<Integer>> ans = new ArrayList<>();
  for(int first = 0;first < nums.length;first++){
    for(int second = first + 1;second < nums.length;second++){
      for(int third = second + 1;third < nums.length;third++){
        if(nums[first] + nums[second] + nums[third] == 0){
          List<Integer> list = new ArrayList<>();
          list.add(nums[first]);
          list.add(nums[second]);
          list.add(nums[third]);
          if(isInList(ans,list)){
            continue;}
          ans.add(list);}}}}
  return ans;}
public boolean isInList(List<List<Integer>> res,List<Integer> l){
  for(int i = 0;i < res.size();i++){
    if(isSame(res.get(i),l)){
      return true;}}
  return false;}
public boolean isSame(List<Integer> a,List<Integer> b){
  Collections.sort(a);
  Collections.sort(b);
  for(int i = 0;i < a.size();i++){
    if(a.get(i) != b.get(i)){
      return false;}}
  return true;}
```

这种方法的时间复杂度为 O(n^3)，且'超出时间限制'，因为我们依旧是使用的三重for循环，但是我们可以对其进行优化
可以发现，我们确定了a和b以后，就有唯一确定c与之对应，我们往后遍历b的过程中，c的值对应减小，也就是说，第二重循环和第一重循环实际上是并列的
这个方法也就是双指针，当我们枚举数组中的两个元素时，随着一个元素的递增，另一个元素递减，代码如下
```java
public List<List<Integer> threeSum(int [] nums){
  Arrays.sort(nums);
  List<List<Integer>> ans = new ArrayList<>();
  for(int first = 0;first < nums.length;first++){
    if(first > 0 && nums[first] == nums[first-1]){
      continue;}
    int third = nums.length - 1;
    int target = -nums[first];
    for(int second = first + 1;second < nums.length;second++){
      if(second > first + 1 && nums[second] == nums[second-1]){
        continue;}
      while(second < third && nums[second] + nums[third] > target){
        third--;}
      if(second == third) break;
      if(nums[second] + nums[third] == target){
        List<Integer> l = new ArrayList<>();
        l.add(nums[first]);
        l.add(nums[second]);
        l.add(nums[third]);
        ans.add(l);}}}
  return ans;}

时间复杂度为 O(n^2)

总结：
====

这里复杂的一点就是不重复，暴力法涉及多个方法来保证不重复，容易出现错误，方法二利用双指针来降低时间复杂度，解答中还有使用夹逼法，
二分查找法，其实思路是一样的，都是使用两个指针所指元素的大小进行移动，找到最合适的三元组。
