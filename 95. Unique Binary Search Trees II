# leetcode

给定一个整数 n，生成所有由 1 ... n 为节点所组成的 二叉搜索树 。
示例：输入：3
输出：
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释：
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

解法一：递归
==========

```java
public List<TreeNode> generateTrees(int n){
  List<TreeNode> ans = new ArrayList<>();
  if(n == 0) return ans;
  return getAns(1,n);}
public List<TreeNode> getAns(int start,int end){
  List<TreeNode> ans = new ArrayList<>();
  if(start > end){
    ans.add(null);
    return ans;}
  if(start == end){
    TreeNode node = new TreeNode(start);
    ans.add(node);
    return ans;}
  for(int i = start;i <= end;i++){
    List<TreeNode> left = getAns(start,i-1);
    List<TreeNode> right = getAns(i+1,end);
    for(TreeNode l : left){
      for(TreeNode r : right){
        TreeNode root = new TreeNode(i);
        root.left = l;
        root.right = r;
        ans.add(root);}}}
    return ans;}
```

解法二：动态规划（一）
=================

```java
public List<TreeNode> generateTrees(int n){
  List<TreeNode> pre = new ArrayList<TreeNode>();
  if (n == 0) {
    return pre;}
  pre.add(null);
    //每次增加一个数字
  for (int i = 1; i <= n; i++) {
  List<TreeNode> cur = new ArrayList<TreeNode>();
    //遍历之前的所有解
  for (TreeNode root : pre) {
    //插入到根节点
    TreeNode insert = new TreeNode(i);
    insert.left = root;
    cur.add(insert);
      //插入到右孩子，右孩子的右孩子...最多找 n 次孩子
    for (int j = 0; j <= n; j++) {
      TreeNode root_copy = treeCopy(root); //复制当前的树
      TreeNode right = root_copy; //找到要插入右孩子的位置
      int k = 0;
        //遍历 j 次找右孩子
      for (; k < j; k++) {
      if (right == null)
        break;
      right = right.right;}
        //到达 null 提前结束
      if (right == null)
        break;
        //保存当前右孩子的位置的子树作为插入节点的左孩子
      TreeNode rightTree = right.right;
      insert = new TreeNode(i);
      right.right = insert; //右孩子是插入的节点
      insert.left = rightTree; //插入节点的左孩子更新为插入位置之前的子树
        //加入结果中
      cur.add(root_copy);}}
    pre = cur;}
  return pre;}
private TreeNode treeCopy(TreeNode root) {
    if (root == null) {
        return root;
    }
    TreeNode newRoot = new TreeNode(root.val);
    newRoot.left = treeCopy(root.left);
    newRoot.right = treeCopy(root.right);
    return newRoot;}
```

解法二：动态规划（二）
=================

```java
public List<TreeNode> generateTrees(int n) {
  List<TreeNode> pre = new ArrayList<TreeNode>();
  if (n == 0) {
    return pre;}
  pre.add(null);
    //每次增加一个数字
  for (int i = 1; i <= n; i++) {
    List<TreeNode> cur = new ArrayList<TreeNode>();
      //遍历之前的所有解
    for (TreeNode root : pre) {
      //插入到根节点
    TreeNode insert = new TreeNode(i);
    insert.left = root;
    cur.add(insert);
      //插入到右孩子，右孩子的右孩子...最多找 n 次孩子
    for (int j = 0; j <= n; j++) {
      TreeNode root_copy = treeCopy(root); //复制当前的树
      TreeNode right = root_copy; //找到要插入右孩子的位置
      int k = 0;
        //遍历 j 次找右孩子
      for (; k < j; k++) {
        if (right == null)
          break;
        right = right.right;}
            //到达 null 提前结束
        if (right == null)
          break;
          //保存当前右孩子的位置的子树作为插入节点的左孩子
        TreeNode rightTree = right.right;
        insert = new TreeNode(i);
        right.right = insert; //右孩子是插入的节点
        insert.left = rightTree; //插入节点的左孩子更新为插入位置之前的子树
          //加入结果中
        cur.add(root_copy);}}
    pre = cur;}
  return pre;}
private TreeNode treeCopy(TreeNode root) {
  if (root == null) {
    return root;}
  TreeNode newRoot = new TreeNode(root.val);
  newRoot.left = treeCopy(root.left);
  newRoot.right = treeCopy(root.right);
  return newRoot;}

总结：
====

递归是常规操作，动态规划实在是巧妙，不管是使用树的复制加偏差，还是利用插入数字是最大的这一规律，都很棒。
