# leetcode

题目描述（简单）
=============

给你一棵所有节点为非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。
示例：输入：

   1
    \
     3
    /
   2

输出：1
解释：
最小绝对差为 1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。

解法一：排序
==========

```java
List<Integer> vals;
public int getMinimumDifference(TreeNode root) {
  vals = new ArrayList<>();
  dfs(root);
  Collections.sort(vals);
  int ans = Integer.MAX_VALUE;
  for(int i = 0;i < vals.size()-1;i++){
    ans = Math.min(ans,vals.get(i+1) - vals.get(i));}
  return ans;}
public void dfs(TreeNode node){
  if(node == null) return;
  vals.add(node.val);
  dfs(node.left);
  dfs(node.right);}
```

解法二：中序遍历
=============

```java
int min = Integer.MAX_VALUE;
TreeNode cur = null;
public int getMinimumDifference(TreeNode root){
  dfs(root);
  return min;}
public void dfs(TreeNode node){
  if(node == null) return;
  dfs(node.left);
  if(cur != null){
    min = Math.min(min,node.val - cur.val);}
  cur = node;
  dfs(node.right);}
```

总结：
====

思路和过程与第783题一模一样，二叉搜索树的问题应该都是这样的思路。
