# leetcode

题目描述（中等）
============

给你无向 连通 图中一个节点的引用，请你返回该图的 深拷贝（克隆）。
图中的每个节点都包含它的值 val（int） 和其邻居的列表（list[Node]）。

class Node {
    public int val;
    public List<Node> neighbors;}

测试用例格式：

简单起见，每个节点的值都和它的索引相同。例如，第一个节点值为 1（val = 1），第二个节点值为 2（val = 2），以此类推。该图在测试用例中使用邻接列表表示。
邻接列表 是用于表示有限图的无序列表的集合。每个列表都描述了图中节点的邻居集。
给定节点将始终是图中的第一个节点（值为 1）。你必须将 给定节点的拷贝 作为对克隆图的引用返回。

示例：输入：adjList = [[2,4],[1,3],[2,4],[1,3]]
输出：[[2,4],[1,3],[2,4],[1,3]]
解释：
图中有 4 个节点。
节点 1 的值是 1，它有两个邻居：节点 2 和 4 。
节点 2 的值是 2，它有两个邻居：节点 1 和 3 。
节点 3 的值是 3，它有两个邻居：节点 2 和 4 。
节点 4 的值是 4，它有两个邻居：节点 1 和 3 。

解法一：深度优先遍历
=================

简单的说就是一个节点有n个邻居，根据邻居将节点逐个加入到哈希表中即可，注意不能重复

```java
HashMap<Node,Node> visited = ne HashMap<>();
public Node cloneGraph(Node node) {
    if(node == null) return node;
    if(visited.containsKey(node)){
        return visited.get(node);}
    Node cloneNode = new Node(node.val,new ArrayList());
    visited.put(node,cloneNode);
    for(Node neighbor : neighbors){
        cloneNode.neighbors.add(cloneGraph(neighbor));}
    return cloneNode;}
```

解法二：广度优先遍历
================

与深度优先遍历不同的是，使用队列来存储节点，并依次将邻居放入队列

```java
HashMap<Node,Node> visited = ne HashMap<>();
public Node cloneGraph(Node node) {
    if(node == null) return node;
    Queue<Node> queue = new LinkedList<>();
    queue.add(node);
    visited.put(node,new Node(node.val,new ArrayList()));
    while(!queue.isEmpty()){
        Node n = queue.remove();
        for(Node neighbor : neighbors){
            if(!visited.containsKey(neighbor)){
                visited.put(neighbor,new Node(neighbor.val,new ArrayList()));
                queue.add(neighbor);}
            visited.get(n).neighbors.add(visited.get(neighbor));}}
    return visited.get(node);}
```

总结：
====

图的拷贝，只要考虑到使用map去重就好。
