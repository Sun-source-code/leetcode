# leetcode

题目描述（中等）
============

给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。

注意:

每个数组中的元素不会超过 100
数组的大小不会超过 200
示例 1:

输入: [1, 5, 11, 5]

输出: true

解释: 数组可以分割成 [1, 5, 5] 和 [11].

解法一：动态规划
=============

首先判断特例：数组长度小于2，返回false，计算出数组总和，不是2的倍数，返回false，最大值超过总和的一半，返回false
建立一个boolean型二维数组，长度分别为n和总和之和的一半加一
特判：不取任何整数，dp[i][0] = true，i=0时，只能取dp[0][nums[0]]=true
后面一层循环得到每一个元素的值，二层循环j>=nums[i]，那么对于nums[i]，可以选也可以不选
选的情况：dp[i][j] = dp[i-1][j-nums[i]]，不选的情况：dp[i][j] = dp[i-1][j]
如果 j < nums[i]，那么选取nums[i]也无用，dp[i][j] = dp[i-1][j]

```java
public boolean canPartition(int[] nums) {
    int n = nums.length;
    if(n < 2) return false;
    int sum = 0,maxSum = 0;
    for(int num : nums){
        sum += num;
        maxSum = Math.max(maxSum,num);}
    if(sum % 2 != 0) return false;
    int target = sum / 2;
    if(maxSum > target) return false;
    boolean [][] dp = new boolean[n][target+1];
    for(int i = 0;i < n;i++){
        dp[i][0] = true;}
    dp[0][nums[0]] = true;
    for(int i = 1;i < n;i++){
        int num = nums[i];
        for(int j = 1;j < target+1;j++){
            if(j >= num){
                dp[i][j] = dp[i-1][j] || dp[i-1][j-nums[i]];}
            else{
                dp[i][j] = dp[i-1][j];}}}
    return dp[n-1][target];}
```

将二维数组优化为一维数组
====================

```java
public boolean canPartition(int[] nums) {
    int n = nums.length;
    if(n < 2) return false;
    int sum = 0,maxSum = 0;
    for(int num : nums){
        sum += num;
        maxSum = Math.max(maxSum,num);}
    if(sum % 2 != 0) return false;
    int target = sum / 2;
    if(maxSum > target) return false;
    boolean [] dp = new boolean[target+1];
    dp[0] = true;
    for(int i = 0;i < n;i++){
        int num = nums[i];
        for(int j = target;j >= num;j--){
            dp[j] |= dp[j-num];}}
    return dp[target];}
```

总结：
====

刚开始以为是连续的两个子数组，后来发现顺序是可以调换的，也就是说有2^(nums.length)种不同的组合方式，结果是使用
动态规划根据得到的总数，判断是否取当前数字。
