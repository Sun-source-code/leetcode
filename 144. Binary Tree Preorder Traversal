# leetcode

题目描述（中等）
============

给定一个二叉树，返回它的 前序 遍历。

示例:
输入: [1,null,2,3]  
   1
    \
     2
    /
   3 

输出: [1,2,3]

解法一：前序遍历
=============

```java
public List<Integer> preorderTraversal(TreeNode root) {
    LinkedList<TreeNode> stack = new LinkedList<>();
    LinkedList<Integer> output = new LinkedList<>();
    if (root == null) {
        return output;}
    stack.add(root);
    while (!stack.isEmpty()) {
        TreeNode node = stack.pollLast();
        output.add(node.val);
        if (node.right != null) {
            stack.add(node.right);}
        if (node.left != null) {
            stack.add(node.left);}}
    return output;}
```

解法二：莫里斯遍历
===============

```
public List<Integer> preorderTraversal(TreeNode root) {
    List<Integer> ans = new ArrayList<>();
    TreeNode node = root;
    while(node != null){
        if(node.left == null){
            ans.add(node.val);
            node = node.right;}
        else{
            TreeNode pre = node.left;
            while(pre.right != null && pre.right != node){
                pre = pre.right;}
            if(pre.right == null){
                ans.add(node.val);
                pre.right = node;
                node = node.right;}
            else{
                pre.right = null;
                node = node.right;}}}
    return ans;}
```

总结：
====

前序遍历很好理解，莫里斯遍历方式需要多理解。
