# leetcode

题目描述（简单）
=============

给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。
注意：1、num1 和num2的长度都小于 5100.
2、num1 和num2 都只包含数字0-9.
3、num1 和num2 都不包含任何前导零。
4、你不能使用任何內建 BigInteger 库，也不能直接将输入的字符串转换为整数形式。

解法一：双指针：从尾部插入
=====================

设置i和j两个指针分别指向字符串尾部，进行加法计算，分以下几种情况：
1、计算进位，carry/10确定是否进位
2、添加当前位，（carry+n1+n2）% 10，添加到res头部
3、索引溢出处理，i和j走过字符串头部时，将其赋值为0

```java
public String addStrings(String num1,String num2){
  StringBuilder res = new StringBuilder("");
  int carry = 0;
  for(int i = num1.length()-1,j = num2.length()-1;i>=0||j>=0;i--,j--){
    int n1 = i>=0? num1.charAt(i)-'0':0;
    int n2 = j>=0? num2.charAt(j)-'0':0;
    int temp = n1 + n2 + carry;
    carry = temp / 10;
    res.append(temp%10);}
  if(carry > 0) res.append(1);
  return res.reverse().toString();}
```

解法二：从头部插入
===============

前面的步骤是一样的，只是方法一使用append直接插入，这里使用insert从前面插入，不需要反转

```java
public String addStrings(String num1,String num2){
  StringBuilder s = new StringBuilder();
    int carry = 0, i = num1.length() - 1, j = num2.length() - 1;
    while (i >= 0 || j >= 0 || carry != 0) {
        int x = i < 0 ? 0 : num1.charAt(i--) - '0';
        int y = j < 0 ? 0 : num2.charAt(j--) - '0';
        int sum = x + y + carry;
        s.insert(0, sum % 10);
        carry = sum / 10;}
    return s.toString();}
```

解法三：利用栈
============

思路还是一样的，只是使用栈来存储的值，在需要的时候出栈

```java
public String addString(String num1,String num2){
  Stack<Integer> stack = new Stack<>();
  StringBuilder s = new StringBuilder();
  int i = num1.length()-1,j = num2.length()-1,carry = 0;
  while (i >= 0 || j >= 0 || carry != 0) {
    carry += i >= 0 ? num1.charAt(i--) - '0' : 0;
    carry += j >= 0 ? num2.charAt(j--) - '0' : 0;
    stack.push(carry % 10);
    carry /= 10;}
  while(!stack.isEmpty()){
    s.append(stack.pop());}
  return s.toString();}
```

总结：
====

这题和字符串相乘那题一样的思路，这里相加反而更简单，就是根据每一个位之和进行进位操作，这里有三种方法，其实思路是一样的，
但是这是三种不同的解法，思考的方向不同。
