# leetcode

题目描述（中等）
============

给定一个二维网格和一个单词，找出该单词是否存在于网格中。

单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

示例:
board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

给定 word = "ABCCED", 返回 true
给定 word = "SEE", 返回 true
给定 word = "ABCB", 返回 false

解法一：深度优先遍历
=================

```java
public boolean exist(char[][] board, String word) {
    int m = board.length,n = board[0].length;
    boolean [][] visited = new boolean[m][n];
    for(int i = 0;i < m;i++){
        for(int j = 0;j < n;j++){[i]
            if(check(board,visited,i,j,word,0){
                return true;}}}
    return false;}
private boolean check(char [][] board,boolean [][] visited,int i,int j,String s,int k){
    if(board[i][j] != s.charAt(k)){
        return false;}
    else if(k == s.length()-1){
        return true;}
    visited[i][j] = true;
    int [][] direction = {{0,1},{0,-1},{1,0},{-1,0}};
    boolean result = false;
    for(int [] dir : directions){
        int newi = i + dir[0],newj = j + dir[1];
        if(newi >= 0 && newi < board.length && newj >= 0 && newj < board[0].length){
            if(!board[newi][newj]){
                if(check(board,visited,newi,newj,s,k+1){
                    result = true;
                    break;}}}}
    visited[i][j] = false;
    return result;}
```

总结：
====

经典回溯问题，也是经典的上下左右的问题。
