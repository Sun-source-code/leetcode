# leetcode

题目描述（简单）
============

给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。

示例:

输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3
输出: [3,3,5,5,6,7] 
解释: 

  滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

解法一：单调队列
==============

```java
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums.length == 0 || k == 0) return new int[0];
        Deque<Integer> deque = new LinkedList<>();
        int [] ans = new int[nums.length - k + 1];
        for(int i = 0,j = 1 - k;j < nums.length;i++,j++){
            if(i > 0 && deque.peekFirst == nums[i-1])
                deque.removeFirst();
            while(!deque.isEmpty() && deque.peekLast() < nums[j])
                deque.removeLast();
            deque.addLast(nums[j]);
            if(i >= 0)
                ans[i] = deque.peekFirst();}
        return ans;}}
```

解法一优化
=========

```java
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums.length == 0 || k == 0) return new int[0];
        Deque<Integer> deque = new LinkedList<>();
        int [] ans = new int[nums.length - k + 1];
        for(int i = 0;i < k;i++){
            while(!deque.isEmpty() && deque.peekLast() < nums[i]){
                queue.removeLast();}
            deque.addLast(nums[i]);}
        res[0] = deque.peekFirst();
        for(int i = 0;i < nums.length;i++){
            if(deque.peekFirst() == nums[i-k]){
                deque.removeFirst();}
            while(!deque.isEmpty() && deque.peekLast() < nums[i])
                deque.removeLast();
            deque.addLast(nums[i]);
            res[i - k + 1] = deque.peekFirst();}
        return res;}}
```

总结：
====

单调队列还是很复杂，需要思路非常清晰。
