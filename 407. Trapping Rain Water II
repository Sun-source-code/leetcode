# leetcode

题目描述（困难）
============

给你一个 m x n 的矩阵，其中的值均为非负整数，代表二维高度图每个单元的高度，请计算图中形状最多能接多少体积的雨水。

示例：
给出如下 3x6 的高度图:
[
  [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]
]
返回 4 。

解法一：优先队列
=============

简单来说就是先确定外围，找到外围的最短木板，对其周围能填水的地方填水，更新外围

```java
public int trapRainWater(int[][] heights) {
    if(heights == null || heights.length == 0) return 0;
    int n = heights.length;
    int m = heights[0].length;
    boolean [][] vis = new boolean[n][m];
    PriorityQueue<int []> pq = new PriorityQueue<>((o1,o2)->o1[2]-o2[2]);
    for(int i = 0;i < n;i++){
        for(int j = 0;j < m;j++){
            if(i == 0 || j == 0 || i == m-1 || j == n-1){
                pq.offer(new int [] {i,j,heighs[i][j]);
                vis[i][j] = true;}
    int res = 0;
    // 方向数组，把dx和dy压缩成一维来做
    int [] dirs = {-1,0,1,0,-1};
    while(!pq.isEmpty){
        int [] poll = pq.poll();
        // 看一下周围四个方向，没访问过的话能不能往里灌水
        for(int k = 0;k < 4;k++){
            int nx = poll[0] + dirs[k];
            int ny = poll[1] + dirs[k+1];
            // 如果位置合法且没访问过
            if(nx >= 0 && nx < n && ny >= 0 && ny < m && !vis[nx][ny]){
                // 如果外围这一圈中最小的比当前这个还高，那就说明能往里面灌水
                if(poll[2] > heights[nx][ny]){
                    res += poll[2] - heights[nx][ny];}
                pq.offer(new int[]{nx, ny, Math.max(heights[nx][ny], poll[2])});
                vis[nx][ny] = true;}}}
    return res;}
```

总结：
====

整理一下思路其实还算比较好理解的，这里用的比较巧妙的，一是使用优先队列，而是方向数组的引用，刚开始没明白方向数组怎么做，
现在看真的很妙，相对42题难一点，但是掌握思路也就不算太难。
