# leetcode

题目描述（中等）
=============

找到给定字符串（由小写字符组成）中的最长子串 T，要求 T 中的每一字符出现次数都不少于 k 。输出 T 的长度。
示例：输入:s = "aaabb", k = 3
输出:3
最长子串为 "aaa" ，其中 'a' 重复了 3 次。

解法一：递归
==========

```java
public int longestSubstring(String s, int k){
  int len = s.length();
  if(len == 0 || k > len){
    return 0;}
  if(k < 2) return len;
  return count(s.toCharArray(),k,0,len-1);}
public int count(char [] chars,int k,int p1,int p2){
  if(p2-p1+1 < k) return 0;
  int [] times = new int[26];
  for(int i = p1;i <= p2;p1++){
    ++times[chars[i]-'a'];}
  while(p2 - p1 + 1 >= k && times[chars[p1] - 'a'] < k){
    p1++;}
  while(p2 - p1 + 1 >= k && times[chars[p2] - 'a'] < k){
    p2--;}
  if(p2-p1+1 < k) return 0;
  for(int i = p1;i <= p2;i++){
    if(times[chars[i]-'a'] < k){
      return Math.max(count(chars,k,p1,i-1),count(chars,k,i+1,p2));}}
  return p2-p1+1;}
```

总结：
====

刚开始没有看到最长子串，这里的递归思路和动态规划有点相似，获取左边最长和右边最长。
