# leetcode

题目描述（简单）
============

在一个由小写字母构成的字符串 s 中，包含由一些连续的相同字符所构成的分组。

例如，在字符串 s = "abbxxxxzyy" 中，就含有 "a", "bb", "xxxx", "z" 和 "yy" 这样的一些分组。

分组可以用区间 [start, end] 表示，其中 start 和 end 分别表示该分组的起始和终止位置的下标。上例中的 "xxxx" 分组用区间表示为 [3,6] 。

我们称所有包含大于或等于三个连续字符的分组为 较大分组 。

找到每一个 较大分组 的区间，按起始位置下标递增顺序排序后，返回结果。


示例 1：
输入：s = "abbxxxxzzy"
输出：[[3,6]]
解释："xxxx" 是一个起始于 3 且终止于 6 的较大分组。

解法一：一次遍历每个字符
====================

```java
public List<List<Integer>> largeGroupPositions(String s) {
    List<List<Integer>> ans = new ArrayList<>();
    int n = s.length();
    int num = 1;
    for(int i = 0;i < n;i++){
        if(i == n-1 || s.charAt(i) != s.charAt(i+1)){
            if(num >= 3){
                ans.add(Arrays.asList(i-num+1,i);}
            num = 1;}
        else{
            num++;}}
    return ans;}
```

解法二：双指针
============

```java
public List<List<Integer>> largeGroupPositions(String s) {
    List<List<Integer>> ans = new ArrayList<>();
    int left = 0;
    int n = s.length();
    while(left < n){
        int count = 0;
        while(left + count < n && s.charAt(left) == s.charAt(left+count)){
            count++;}
        if(count >= 3){
            ans.add(Arrays.asList(left,left+count-1);}
        left = left + count;}
    return ans;}
```

总结：
====

两种方法其实思路是一致的，不同的是解法一比较的是相邻字符是否相等，解法二是在相等的情况下右指针右移，注意结尾的情况。

    
    List<List<Integer>> ans = new ArrayList<>();t
    List<List<Integer>> ans = new ArrayList<>();
