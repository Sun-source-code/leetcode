# leetcode

题目描述（中等）
============

实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。

示例 1：
输入：x = 2.00000, n = 10
输出：1024.00000

解法一：递归
==========

```java
class Solution {
    public double myPow(double x, int n) {
        if(n == 0) return 1;
        if(n < 0) retuen 1.0 / myPow(x,-n-1);
        else if(n % 2 == 1) return x * myPow(x,n-1);
        else return myPow(x*x,n / 2);}}
```

解法二：迭代
==========

```java
class Solution {
    public double myPow(double x, int n) {
        long b = n;
        if(b < 0){
            x = 1 / x;
            b = -b;}
        double ans = 1;
        while(b != 0){
            if(b % 2 != 0){
                ans *= x;}
            b >>= 1;
            x *= x;}
        return ans;}}
```

总结：
====

总结起来这题不能直接使用乘，而是要根据n的奇偶性对原来的计算量进行缩减，递归相对好理解一点。
