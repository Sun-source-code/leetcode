# leetcode

题目描述（困难）
============

给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。
注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例：输入: [2,4,1], k = 2
输出: 2
解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。

解法一：动态规划
=============

这里有一个容易出错的点，整个过程包含买入和卖出，那么如果k的值过于大，就没有作用了
其余的思路和前面的一致，只是将持股和不持股的状态用一维数组表示。

```java
public int maxProfit(int k,int [] prices){
  int len = prices.length;
  if(len < 0 || k == 0){
    return 0;}
  if(k >= len / 2){
    return greedy(prices,len);}
  int [] stock = new int[k];//持股时的状态
  Arrays.fill(stock,Integer.MIN_VALUE);
  int [] cash = ne int[k];//不持股时的状态
  for(int price : prices){
    for(int i = 0;i < k;i++){
      stock[i] = Math.max(stock[i],(i == 0) ? 0 : cash[i-1]-price);
      cash[i] = Math.max(cash[i],stock[i]+price);}}
  return cash[n-1];}
private int greedy(int [] prices,int len){
  int maxProfit = 0;
  for(int i = 1;i < len;i++){
    if(prices[i] > prices[i-1]){
      maxProfile += prices[i] - prices[i-1];}}
  return maxProfit;}
```

总结：
====

题目本身与前面区别还是不大的，只是需要注意一个k值大小的问题，如果k过于大，就没办法做到买卖k次，
这时题目就和122题一样了。
