# leetcode

题目描述（中等）
============

给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。
示例：输入: num1 = "123", num2 = "456"
输出: "56088"

说明：1、num1 和 num2的长度小于110。
2、num1 和 num2只包含数字 0-9。
3、num1 和 num2均不以零开头，除非是数字 0 本身。
4、不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。

解法一：普通竖式

根据竖式运算的思想，可以得到123*456 = 123*6 + 123*5*10 + 123*4*100

```java
public String multiply(String num1,String num2){
  if(num1.equals("0") || num2.equals("0")) return "0";
  String res = "";
  for(int i = num2.length()-1;i >= 0;i--){
    int carry = 0;
    StringBuilder temp = new StringBuilder();
    for(int j = 0;j < num2.length()-1-i;j++){
        temp.append(0);}
    int n2 = num2.charAt(i) - '0';
    for(int j = num1.length()-1;j >= 0 || carry != 0;j--){
      int n1 = j < 0 ? 0:num1.charAt(j)-'0';
      int product = (n1 * n2 + carry) % 10;
      temp.append(product);
      carry = (n1 * n2 + carry) / 10;}
    res = addStrings(res,temp.reverse().toString());}
  return res;}
public String addStrings(String num1,String num2){
  StringBilder build = new StringBuilder();
  int carry = 0;
  for(int i = num1.length()-1,j = num2.length()-1;i > = 0 || j >=0 || carry != 0;i--,j--){
    int x = i < 0?0:num1.charAt(i)-'0';
    int y = j < 0?0:num2.charAt(j)-'0';
    int sum = (x+y+carry) % 10;
    build.append(sum);
    carry = (x+y+carry) / 10;}
  return build.reverse().toString();}
```

解法二：优化竖式

```java
public String muliply(String num1,String num2){
  if(num1.equals("0") || num2.equals("0")){
    return "0";}
  int [] res = new int[num1.length()+num2.length()];
  for(int i = num1.length()-1;i>=0;i--){
    int n1 = num1.charAt(i)-'0';
    for(int j = num2.length()-1;j>=0;j--){
      int n2 = num2.charAt(j)-'0';
      int sum = (res[i+j+1] + n1*n2);
      res[i+j+1] = sum % 10;
      res[i+j] += sum / 10;}}
  StringBuilder builder = new StringBuilder();
  for(int i = 0;i < res.length;i++){
    if(i == 0 && res[i] == 0) continue;
    builder.append(res[i]);}
  return builder.toString();}
```

总结：
====

这题思路还是比较容易想到的，遍历每一个字符，进行进位操作，方法一中使用的数学的思路进行计算，步骤比较复杂，需要
特别小心，不过按照新的竖式计算，确实厉害了许多，这里可以考虑为数学的找规律，也可以是动态规划的思路，根据每个
位置，寻找到与原来字符串的关联，很棒。
