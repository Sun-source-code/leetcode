# leetcode

题目描述（中等）
============

给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。
具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。

示例 1：
输入："abc"
输出：3
解释：三个回文子串: "a", "b", "c"

解法一：中心拓展
=============

枚举所有可能的回文中心，用两个指针向两边拓展，如果两边元素相同时计数，不同时停止拓展

```java
public int countSubstrings(String s) {
    int n = s.length(),ans = 0;
    for(int i = 0;i < 2 * i -1;i++){
        int l = i / 2,r = i / 2 + i % 2;
        while(l >= 0 && r < n && s.charAt(l) == s.charAt(r)){
            l--;
            r++;
            ans++;}}
    return ans;}
```

解法二：马拉车算法
===============

```
public int countSubstrings(String s) {
    int n = s.length();
    StringBuffer t = new StringBuffer("$#");
    for(int i = 0;i < n;i++){
        t.append(s.charAt(i));
        t.append('#');}
    n = t.length();
    t.append('!');
    int [] f = new int[n];
    int iMax = 0,rMax = 0,ans = 0;
    for(int i = 1;i < n;i++){
        f[i] = i <= rMax ? Math.min(rMax - i + 1,f[2 * iMax - 1]) : 1;
        while(t.charAt(i + f[i]) == t.charAt(i - f[i])){
            f[i]++;}
        if(i + f[i] - 1 > rMax){
            iMax = i;
            rMax = i + f[i] - 1;}
        ans += f[i] / 2;}
    return ans;}
```

总结：
====

解法一里的回文中心总结的很棒，包括总共有多少个不同的回文中心也计算到了，马拉车算法还是不太理解，以后再更新吧。
