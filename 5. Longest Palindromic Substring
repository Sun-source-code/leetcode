# leetcode

题目描述（中等）
============

给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。
示例：输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。

解法一：动态规划
=============

字符串第i到j组成的子串分两种情况，要么符合回文串，要么不符合，不符合的情况又两种，一是他本身不符合，二是i>j，
因此我们写出状态转移方程为P(i,j) = P(i+1,j-1) && S[i] == S[j]

```java
public String longestPalidrome(String s){
  int len = s.length();
  if(len < 2) return s;
  int maxlen = 1;
  int begin = 0;
  boolean [][] dp = new boolean[len][len];
  char[] charArray = s.toCharArray();
  for(int i = 0;i < len;i++){
    dp[i][i] = true;}
  for(int j = 1;j < len;j++){
    for(int i = 0;i < j;i++){
      if(charArray[i] != charArray[j]){
        dp[i][j] = false;}
      else{
        if(j - i < 3){
          dp[i][j] = true;}
        else{
          dp[i][j] = dp[i+1][j-1];}}
      if(j-i+1 > maxlen && dp[i][j]){
        maxlen = j-i+1;
        begin = i;}}}
  return s.substring(begin,begin+maxlen);}
```

解法二：中心扩散法
===============

我们设计一个方法，兼容两种情况
1、如果传入的是重合的索引编码，进行中心扩散，此时得到的字符串长度是奇数
2、如果传入的是相邻的索引编码，进行中心扩散，此时得到的字符串长度是偶数

```java
public String centerSpard(String s,int left,int right){
  int len = s.length();
  int i = left;
  int j = right;
  while(i >= 0 && j < len){
    if(s.charAt(i) == s.charAt(j)){
      i--;
      j++;}
    else{
      break;}}
  return s.substring(i+1,j);}
public String longestPalindrome(String s){
  int len = s.length();
  if(len < 2) return s;
  int maxlen = 1;
  String res = s.substring(0,1);
  for(int i = 0;i < len-1;i ++){
    String oldstr = centerSpard(s,i,i);
    String evenstr = centerSpard(s,i,i+1);
    String maxstr = oldstr.length() > evenstr.length() ? oldstr : evenstr;
    if(maxstr.length() > maxlen){
      maxlen = maxstr.length();
      res = maxstr;}}
  return res;}
```

解法三：马拉车算法
===============

在每个字符中间插入一个字符‘#’，计算辅助数组的最长子串，可以排除数组长度是奇数还是偶数的问题

```java
public String longestPalindrome(String s){
  int len = s.length();
  if(len < 2) return s;
  String str = addBoundaried(s,'#');
  int slen = len * 2 + 1;
  int maxlen = 1;
  int start = 0;
  for(int i = 0;i < slen;i ++){
    int curlen = centerSpard(str,i);
    if(curlen > maxlen){
      maxlen = curlen;
      start = (i - maxlen) / 2;}}
  return s.substring(start,start+maxlen);}
private int centerSpard(String s,int center){
  int len = s.length();
  int i = center - 1;
  int j = center + 1;
  int step = 0;
  while(i >= 0 && j <len && s.charAt(i) == s.charAt(j)){
    i--;
    j++;
    step++;}
  return step;}
private String addBoundaried(String s,char divide){
  int len = s.length();
  if(len == 0) return "";
  if(s.indexOf(divide) != -1){
    throw new IllegalArgumentException("参数错误");}
  StringBuilder str = new StringBuilder();
  for(int i = 0;i < len;i++){
    str.append(divide);
    str.append(s.charAt(i));}
  str.append(divide);
  return str.toString();}
```

马拉车算法优化：
===========

```java
public String longestPalindrome(String s){
  int len = s.length();
  if(len < 2) return s;
  String str = addBoundaried(s,'#');
  int slen = 2 * len + 1;
  int [] p = new int[slen];
  int maxRight = 0;
  int center = 0;
  int maxlen = 1;
  int start = 0;
  for(int i = 0;i < slen;i++){
    if(i < maxRight){
      int mirror = 2 * center - i;
      p[i] = Math.min(maxRight - i,p[mirror]);}
    int left = i - (1 + p[i]);
    int right = i + (1 + p[i]);
    while(left >= 0 && right < slen && str.charAt(left) == str.charAt(right)){
      p[i]++;
      left--;
      right++;}
    if(i + p[i] > maxRight){
      maxRight = i + p[i];
      center = i;}
    if(p[i] > maxlen){
      maxlen = p[i];
      start = (i - maxlen) / 2;}}
  return s.substring(start,start+maxlen);}
private String addBoundaried(String s,char divide){
  int len = s.length();
  if(len == 0) return "";
  if(s.indexOf(divide) != -1){
    throw new IllegalArgumentException("参数错误");}
  StringBuilder str = new StringBuilder();
  for(int i = 0;i < len;i++){
    str.append(divide);
    str.append(s.charAt(i));}
  str.append(divide);
  return str.toString();}
  
总结：
====

中心扩散和动态规划应该是最容易想到的方法，思路也比较清晰，马拉车算法则是充分利用了对称性这一特点，非常厉害，值得学习。
