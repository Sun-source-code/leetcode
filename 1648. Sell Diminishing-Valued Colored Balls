# leetcode

题目描述（中等）
============

你有一些球的库存 inventory ，里面包含着不同颜色的球。一个顾客想要 任意颜色 总数为 orders 的球。

这位顾客有一种特殊的方式衡量球的价值：每个球的价值是目前剩下的 同色球 的数目。
比方说还剩下 6 个黄球，那么顾客买第一个黄球的时候该黄球的价值为 6 。
这笔交易以后，只剩下 5 个黄球了，所以下一个黄球的价值为 5 （也就是球的价值随着顾客购买同色球是递减的）

给你整数数组 inventory ，其中 inventory[i] 表示第 i 种颜色球一开始的数目。
同时给你整数 orders ，表示顾客总共想买的球数目。你可以按照 任意顺序 卖球。

请你返回卖了 orders 个球以后 最大 总价值之和。由于答案可能会很大，请你返回答案对 109 + 7 取余数 的结果。

解法一：模拟
==========

```java
public int maxProfit(int[] inv, int orders) {
    Arrays.sort(inv);
    int n = inv.length;
    long ans = 0;
    for(int i = n - 1; i >= 0 && orders > 0; i--){
        int l = i;
        while(l > 0 && inv[l] == inv[l - 1]){
            l--;}
        int cnt = n - l;
        int use = l == 0 ? inv[l] : inv[l] - inv[l - 1];
        if((long)use * cnt >= orders){
            int left = inv[l] - orders / cnt;
            ans += sum(left + 1, inv[l]) * cnt;
            ans += (long)left * (orders % cnt);
            orders = 0;
        }else{
            ans += sum(inv[l - 1] + 1, inv[l]) * cnt;
            orders -= (int)(use * cnt);}
        i = l;}
    int mod = (int)1e9 + 7;
    return (int)(ans % mod);}
    
public long sum(long l, long r){
    return (l + r) * (r - l + 1) / 2;}
```

总结：
====

刚开始一直没弄明白怎么利用等差数列求和，现在看来也不难，需要多注意里面的逻辑
