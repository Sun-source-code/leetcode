# leetcode

题目描述（简单）
============

给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，
使得 nums [i] = nums [j]，并且 i 和 j 的差的 绝对值 至多为 k。

示例 1:
输入: nums = [1,2,3,1], k = 3
输出: true

解法一：哈希表
============

```java
public boolean containsNearbyDuplicate(int[] nums, int k) {
    Map<Integer,Integer> map = new HashMap<>();
    for(int i = 0;i < nums.length;i++){
        if(map.containsKey(nums[i])){
            if(i - map.get(nums[i]) <= k) return true;}
        map.put(nums[i],i);}
    return false;}
```

解法二：哈希Set
=============

```java
public boolean containsNearbyDuplicate(int[] nums, int k) {
    HashSet<Integer> set = new HashSet<>();
    for(int i = 0; i < nums.length; i++) {
        if(set.contains(nums[i])) {
            return true;}
        set.add(nums[i]);
        if(set.size() > k) {
            set.remove(nums[i - k]);}}
    return false;}
```

总结：
====

我的第一想法是解法一，不过如果数据量大，这个方法会占据很大内存，方法二自始至终只占据k的空间，这方面方法二好些
