# leetcode

题目描述（中等）
============

给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。
你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。
返回获得利润的最大值。
注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。

示例：输入: prices = [1, 3, 2, 8, 4, 9], fee = 2
输出: 8
解释: 能够达到的最大利润:  
在此处买入 prices[0] = 1
在此处卖出 prices[3] = 8
在此处买入 prices[4] = 4
在此处卖出 prices[5] = 9
总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.

题解一：动态规划
=============

这一题的特殊之处在于，每次收取手续费，那么更新时需要减去手续费，状态转移方程为：
dp[i][0] = Math.max(dp[i][0],dp[i][1]+prices[i]);
dp[i][1] = Math.max(dp[i][1],dp[i][0]-prices[i]-fee);

```java
public int maxProfit(int[] prices, int fee) {
  int n = prices.length;
  int dp0 = 0,dp1 = Integer.MIN_VALUE;
  for(int i = 0;i < n;i++){
    dp0 = Math.max(dp0,dp1 + prices[i]);
    dp1 = Math.max(dp1,dp0 - prices[i] - fee);}
  return dp0;}
```

题解二：直接一次遍历
================

```java
public int maxProfit(int [] prices,int fee){
  if(prices.length < 2) return 0;
  int ans = 0;
  int in_hand = prices[0];
  for(int i = 0;i < prices.length;i++){
    if(prices[i] < in_hand){
      in_hand = prices[i];}
    else if(prices[i] - fee > in_hand){
      ans += prices[i] - fee -in_hand;
      in_hand = prices[i] - fee;
      ans += prices[i]-fee-in_hand;}}
  return ans;}
```

总结：
====

还是一样的改一下状态转移方程即可，注意解法二里in_hand的更新。
