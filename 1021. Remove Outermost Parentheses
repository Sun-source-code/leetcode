# leetcode

题目描述（简单）
=============

有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。
例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。

如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。

给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。

对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。

示例 1：

输入："(()())(())"
输出："()()()"
解释：
输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。

解法一：双指针
============

```java
public String removeOuterParentheses(String S) {
    int balance = 1;
    int i = 0;
    int j = 1;
    String res = "";
    while (j < S.length()) {
        if (S.charAt(j) == ')') {
            balance--;
        }else {
            balance++;}
        if (balance == 0) {
            res += S.substring(i+1, j);
            i = j + 1;
            j = i + 1;
            balance = 1;
        }else {
            j++;}}
    return res;}
```

解法二：简洁
==========

```java
public String removeOuterParentheses(String S) {
    StringBuilder sb = new StringBuilder();
    int level = 0;
    for (char c : S.toCharArray()) {
        if (c == ')') --level;
        if (level >= 1) sb.append(c);
        if (c == '(') ++level;}
    return sb.toString();}
```

总结：
====

刚开始被题目误导，没弄明白删除最外面是什么意思，其实解法二更好理解，直接判断能否组成一对括号。
