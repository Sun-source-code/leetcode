# leetcode

题目描述（困难）
============

厨房里总共有 n 个橘子，你决定每一天选择如下方式之一吃这些橘子：

吃掉一个橘子。
如果剩余橘子数 n 能被 2 整除，那么你可以吃掉 n/2 个橘子。
如果剩余橘子数 n 能被 3 整除，那么你可以吃掉 2*(n/3) 个橘子。
每天你只能从以上 3 种方案中选择一种方案。

请你返回吃掉所有 n 个橘子的最少天数。

示例 1：

输入：n = 10
输出：4
解释：你总共有 10 个橘子。
第 1 天：吃 1 个橘子，剩余橘子数 10 - 1 = 9。
第 2 天：吃 6 个橘子，剩余橘子数 9 - 2*(9/3) = 9 - 6 = 3。（9 可以被 3 整除）
第 3 天：吃 2 个橘子，剩余橘子数 3 - 2*(3/3) = 3 - 2 = 1。
第 4 天：吃掉最后 1 个橘子，剩余橘子数 1 - 1 = 0。
你需要至少 4 天吃掉 10 个橘子。

解法一：记忆化搜索
===============

```java
Map<Integer,Integer> memo = new HashMap<>();
public int minDays(int n) {
    if(n <= 1) return n;
    if(memo.containsKey(n)){
        return memo.get(n);}
    memo.put(n,Math.min(n%2 + 1 + minDays(n/2),n%3 + 1 + minDays(n/3));
    return memo.put(n);}
```

解法二：最短路
============

```java
public int minDays(int n) {
    PriorityQueue<int[]> queue = new PriorityQueue<int[]>(new Comparator<int[]>() {
        public int compare(int[] daysRest1, int[] daysRest2) {
            if (daysRest1[0] != daysRest2[0]) {
                return daysRest1[0] - daysRest2[0];
            } else {
                return daysRest1[1] - daysRest2[1];}}
    });
    Set<Integer> visited = new HashSet<Integer>();
    queue.offer(new int[]{0, n});
    int ans = 0;
    while (true) {
        int[] daysRest = queue.poll();
        int days = daysRest[0], rest = daysRest[1];
        if (visited.contains(rest)) {
            continue;}
        visited.add(rest);
        if (rest == 1) {
            ans = days + 1;
            break;}
        queue.offer(new int[]{days + rest % 2 + 1, rest / 2});
        queue.offer(new int[]{days + rest % 3 + 1, rest / 3});}
    return ans;}
```

总结：
====

还是记忆化搜索好使些，不过方法二的思路很棒，尤其是优先队列的排序，其实还有一种启发式搜索，以后再更新吧
