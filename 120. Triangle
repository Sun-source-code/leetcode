# leetcode

题目描述（中等）
=============

给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。
相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。
示例：给定三角形：
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。

解法一：动态规划
=============

状态转移方程为：dp[i][j] = Math.min(dp[i-1][j-1],dp[i-1][j]) + c[i][j];
特殊情况：1、dp[0][0] = triangle.get(0).get(0)
2、dp[i][0] = dp[i-1][0] + c[i][0]
3、dp[i][i] = dp[i-1][i-1] + c[i][i]

```java
public mininumTotal(List<List<Integer>> triangle){
  int n = triangle.size();
  int [][] dp = new int[n][n];
  dp[0][0] = triangle.get(0).get(0);
  for(int i = 1;i < n;i++){
    dp[i][0] = dp[i-1][0] + triangle.get(i).get(0);
    for(int j = 1;j < i;j++){
      dp[i][j] = Math.min(dp[i-1][j-1],dp[i-1][j]) + triangle.get(i).get(j);}
    dp[i][i] = dp[i-1][i-1] + triangle.get(i).get(i);}
  int total = dp[n-1][0];
  for(int i = 1;i < n;i++){
    total = Math.min(total,dp[n-1][i];}
  return total;}
```

空间优化：
=======

我们发现，dp[i][j] 只与dp[i-1][...]有关，而与dp[i-2][...]无关，可以将i根据奇偶性得到一个新的数组，也就是dp[2][n]

```
public int mininumTotal(List<List<Integer>> triangle){
  int n = triangle.size();
  int [][] dp = new int[2][n];
  dp[0][0] = triangle.get(0).get(0);
  for(int i = 1;i < n;i++){
    int cur = i % 2;
    int prev = 1 - cur;
    dp[cur][0] = dp[prev][0] + triangle.get(i).get(0);
    for(int j = 1;j < i;j++){
      dp[cur][j] = Math.min(dp[prev][j-1],dp[prev][j]) + triangle.get(i).get(j);}
    dp[cur][i] = dp[prev][i-1] + triangle.get(i).get(i);}
  int total = dp[(n-1) % 2][0];
  for(int i = 1;i < n;i++){
    total = Math.min(total,dp[(n-1) % 2][i];}
  return total;}
  
一维数组空间优化：
==============

```java
public int mininumTotal(List<List<Integer>> triangle){
  int n = triangle.size();
  int [] dp = new int[n];
  dp[0] = triangle.get(0).get(0);
  for(int i = 1;i < n;i++){
    dp[i] = dp[i-1] + triangle.get(i).get(i);
    for(int j = i - 1;j > 0;j--){
      dp[i] = Math.min(dp[j-1],dp[j]) + triangle.get(i).get(j);}
    dp[0] += triangle.get(i).get(0);}
  int minTotal = dp[0];
  for (int i = 1; i < n; ++i) {
    minTotal = Math.min(minTotal, dp[i]);}
  return minTotal;}
```

解法二：递归+记忆化
================

我们将任一点到底边的最小路径和，转化成了与该点相邻两点到底边的最小路径和中的较小值，再加上该点本身的值

```java
Integer [][] ans;
public int minimumTotal(List<List<Integer>> triangle){
  int len = triangle.size();
  ans = new Integer[len][len];
  retrun dfs(triangle,0,0);
public int dfs(List<List<Integer>> triangle,int i,int j){
  if(i == triangle.size()){
    return 0;}
  if(ans[i][j] != null){
    return ans[i][j];}
  return memo[i][j] = Math.min(dfs(triangle, i + 1, j), 
    dfs(triangle, i + 1, j + 1)) + triangle.get(i).get(j);}

总结：
====

很明显的动态规划，第一种空间优化的方式不太容易想到，而递归需要注意不能直接递归，会超时，需要记录ans[i][j]的大小。

