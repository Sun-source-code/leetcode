# leetcode

给你两个字符串 s 和 goal ，只要我们可以通过交换 s 中的两个字母得到与 goal 相等的结果，就返回 true ；否则返回 false 。

交换字母的定义是：取两个下标 i 和 j （下标从 0 开始）且满足 i != j ，接着交换 s[i] 和 s[j] 处的字符。

例如，在 "abcd" 中交换下标 0 和下标 2 的元素可以生成 "cbad" 。
 

示例 1：

输入：s = "ab", goal = "ba"
输出：true
解释：你可以交换 s[0] = 'a' 和 s[1] = 'b' 生成 "ba"，此时 s 和 goal 相等。
示例 2：

输入：s = "ab", goal = "ab"
输出：false
解释：你只能交换 s[0] = 'a' 和 s[1] = 'b' 生成 "ba"，此时 s 和 goal 不相等。

解法一：枚举
==========

```Java
class Solution{
    public boolean buddyStrings(String s, String goal) {
        if(s.length() != goal.length()){
            return false;}
        if(s.equals(goal)){
            int [] count = new int[26];
            for(int i = 0;i < s.length();i++){
                count[s.charAt(i) - 'a']++;
                if(count[s.charAt(i)] > 1){
                    return true;}}
            return false;}
        else{
            int first = -1,second = -1;
            for(int i = 0;i < goal.length();i++){
                if(s.charAt(i) != goal.charAt(i)){
                    if(first = -1){
                        first = i;}
                    else if(second = -1){
                        second = i;}
                    else{
                        return false;}}}
        return (second != -1) && (s.charAt(first) == goal.charAt(second)) && (s.charAt(second) == goal.charAt(first));
```

```Python
class Solution:
    def buddyStrings(self,s:str,goal:str) -> bool:
        if len(s) != len(str):
            return False
        if s = goal:
            if len(set(s)) <  len(goal):
                return True
            else:
                return False
        diff = [(a,b) for a,b in zip(s,goal) if a != b]
        return len(diff) == 2 && diff[0][0] == diff[1][1] && diff[0][1] == diff[1][0]
```

总结：
====

需要注意相同字符串有多个字母重复的情况，另外python写法值得学习。
