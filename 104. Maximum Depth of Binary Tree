# leetcode

题目描述（简单）
============

给定一个二叉树，找出其最大深度。
二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。
说明: 叶子节点是指没有子节点的节点。
示例：给定二叉树 [3,9,20,null,null,15,7]，

    3
   / \
  9  20
    /  \
   15   7
返回它的最大深度 3 。

解法一：递归
==========

```java
public int maxDepth(TreeNode root) {
  int max = Integer.MIN_VALUE;
  if(root == null) return 0;
  else{
    int leftLen = maxDepth(root.left);
    int rightLen = maxDepth(root.right);
    max = Math.max(leftLen,rightLen)+1;}
  return max;}
```

解法二：迭代
==========

```java
public int maxDepth(TreeNode root){
  Queue<Pair<TreeNode,Integer> queue = new LinkedList<>();
  if(root != null){
    queue.add(new Pair(root,1));}
  int depth = 0;
  while(!queue.isEmpty()){
    Pair<TreeNode,Integer> current = queue.poll();
    root = current.getKey();
    int currVal = current.getValue();
    if(root != null){
      depth = Math.max(depth,currVal);
      queue.add(new Pair(root.left,currVal+1);
      queue.add(new Pair(root.right,currVal+1);}}
  return depth;}
```

总结：
====

两个思路其实最后两句是一样的，递归还是比较好理解的，迭代使用了配对，相比哈希表更容易取得键值对，思路
类似于深度优先遍历。
