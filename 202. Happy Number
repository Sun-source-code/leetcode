# leetcode

题目描述（简单）
============

编写一个算法来判断一个数 n 是不是快乐数。

「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，
然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。

如果 n 是快乐数就返回 True ；不是，则返回 False 。

示例：

输入：19
输出：true
解释：
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

解法一：用HashSet检测循环
======================

```java
privete int getNext(int n){
    int totalSum = 0;
    while(n > 0){
        int d = n % 10;
        n /= 10;
        totalSum += d * d;}
    return totalSum;}
public boolean isHappy(int n){
    Set<Integer> set = new HashSet<>();
    while(n != 1 && !set.contains(n){
        set.add(n);
        n = getNext(n);}
    return n == 1;}
```

解法二：快慢指针
=============

如果 n 是一个快乐数，即没有循环，那么快跑者最终会比慢跑者先到达数字 1。
如果 n 不是一个快乐的数字，那么最终快跑者和慢跑者将在同一个数字上相遇。

```java
privete int getNext(int n){
    int totalSum = 0;
    while(n > 0){
        int d = n % 10;
        n /= 10;
        totalSum += d * d;}
    return totalSum;}
public boolean isHappy(int n){
    int slow = n;
    int fast = getNext(n);
    while(fast != 1 && fast != slow){
        slow = getNext(slow);
        fast = getNext(getNext(fast));}
    return fast == 1;}
```

解法三：数学方法
=============

```java
private static Set<Integer> cycleMembers =
    new HashSet<>(Arrays.asList(4, 16, 37, 58, 89, 145, 42, 20));

public int getNext(int n) {
    int totalSum = 0;
    while (n > 0) {
        int d = n % 10;
        n = n / 10;
        totalSum += d * d;}
    return totalSum;}

public boolean isHappy(int n) {
    while (n != 1 && !cycleMembers.contains(n)) {
        n = getNext(n);}
    return n == 1;}
```

总结：
====

方法一还是比较容易想到的，可是方法二确实没想到，龟兔赛跑能和这个搭上关系，太秒了。
