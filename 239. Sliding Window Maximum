# leetcode

题目描述（困难）
============

给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。
你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。

返回滑动窗口中的最大值。

示例：输入：nums = [1,3,-1,-3,5,3,6,7], k = 3
输出：[3,3,5,5,6,7]
解释：
滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

解法一：优先队列
=============

```java
public int[] maxSlidingWindow(int[] nums, int k) {
    int n = nums.length;
    PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>{
        public int compara(int [] pair1,int [] pair2){
            return pair1[0] != pair2[0] ? pair2[0] - pair1[0] : pair2[1] - pair1[1];}};
    for(int i = 0;i < k;i++){
        pq.offer(new int[]{nums[i],i});}
    int [] ans = new int[n - k + 1];
    ans[0] = pq.peek()[0];
    for(int i = k;i < n;i++){
        pq.offer(new int[]{nums[i],i});
        while(pq.peek()[1] <= i - k){
            pq.poll();}
        ans[i-k+1] = pq.peek()[0];}
    return ans;}
```

解法二：单调队列
==============

```java
public int[] maxSlidingWindow(int[] nums, int k) {
    int n = nums.length;
    Deque<Integer> deque = new LinkedList<Integer>();
    for (int i = 0; i < k; ++i) {
        while (!deque.isEmpty() && nums[i] >= nums[deque.peekLast()]) {
            deque.pollLast();}
        deque.offerLast(i);}
    int[] ans = new int[n - k + 1];
    ans[0] = nums[deque.peekFirst()];
    for (int i = k; i < n; ++i) {
        while (!deque.isEmpty() && nums[i] >= nums[deque.peekLast()]) {
            deque.pollLast();}
        deque.offerLast(i);
        while (deque.peekFirst() <= i - k) {
            deque.pollFirst();}
        ans[i - k + 1] = nums[deque.peekFirst()];}
    return ans;}
```

总结：
====

这里很关键的一个点就是排序，在插入一个数据的同时，需要将不需要的数据排出队列，而方法二更是通过两个数据的对比将
先加入队列的数据删除，很巧妙。
