# leetcode

题目描述（中等）
=============

写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；
假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。

注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0。

说明：

假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。
如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。

示例 1：
输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 2:
输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。

解法一：字符串遍历
===============

```java
class Solution {
    public int strToInt(String str) {
        char [] ch = str.trim().toCharArray();
        if(ch.length == 0) return 0;
        int ans = 0,bndry = Integer.MAX_VALUE / 10;
        int i = 1,sign = 1;
        if(ch[0] == '-') sign = -1;
        else if(ch[i] != '+') i = 0;
        for(int j = i;j < ch.length;j++){
            if(ch[j] < '0' || ch[j] > '9') break;
            if(ans > bndry || ans < bndry && ch[j] > '7') return sign > 0 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
            ans = ans * 10 + (ch[j] - '0');}
        return sign * ans;}}
```

总结：
====

直接遍历字符串，这里的trim也可以删除，使用while循环对每个字符判断。
