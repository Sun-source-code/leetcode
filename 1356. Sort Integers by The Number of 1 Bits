# leetcode

题目描述（简单）
============

给你一个整数数组 arr 。请你将数组中的元素按照其二进制表示中数字 1 的数目升序排序。

如果存在多个数字二进制中 1 的数目相同，则必须将它们按照数值大小升序排列。

请你返回排序后的数组。

示例 1：

输入：arr = [0,1,2,3,4,5,6,7,8]
输出：[0,1,2,4,8,3,5,6,7]
解释：[0] 是唯一一个有 0 个 1 的数。
[1,2,4,8] 都有 1 个 1 。
[3,5,6] 有 2 个 1 。
[7] 有 3 个 1 。
按照 1 的个数排序得到的结果数组为 [0,1,2,4,8,3,5,6,7]

解法一：暴力
==========

```java
public int[] sortByBits(int[] arr) {
    int[] bit = new int[10001];
    List<Integer> list = new ArrayList<Integer>();
    for (int x : arr) {
        list.add(x);
        bit[x] = get(x);}
    Collections.sort(list, new Comparator<Integer>() {
        public int compare(Integer x, Integer y) {
            if (bit[x] != bit[y]) {
                return bit[x] - bit[y];
            } else {
                return x - y;}}
        });
    for (int i = 0; i < arr.length; ++i) {
        arr[i] = list.get(i);}
    return arr;}

public int get(int x) {
    int res = 0;
    while (x != 0) {
        res += x % 2;
        x /= 2;}
    return res;}
```

解法二：递推预处理
===============

与方法一相比，只是将寻找二进制中1的个数的方式换成了bit[i] = bit[i >> 1] + (i & 1)

```java
public int[] sortByBits(int[] arr) {
    List<Integer> list = new ArrayList<Integer>();
    for (int x : arr) {
        list.add(x);}
    int[] bit = new int[10001];
    for (int i = 1; i <= 10000; ++i) {
        bit[i] = bit[i >> 1] + (i & 1);}
    Collections.sort(list, new Comparator<Integer>() {
        public int compare(Integer x, Integer y) {
            if (bit[x] != bit[y]) {
                return bit[x] - bit[y];
            } else {
                return x - y;}}
        });
    for (int i = 0; i < arr.length; ++i) {
        arr[i] = list.get(i);}
    return arr;}
```

总结：
====

题目意思很明确，需要注意的是第二种方法计算1的个数会快很多，还有就是注意排序的过程
