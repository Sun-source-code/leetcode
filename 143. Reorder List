# leetcode

题目描述（中等）
============

给定一个单链表 L：L0→L1→…→Ln-1→Ln ，
将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…

你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

示例 1:
给定链表 1->2->3->4, 重新排列为 1->4->2->3.

示例 2:
给定链表 1->2->3->4->5, 重新排列为 1->5->2->4->3.

解法一：线性表
============

链表不支持下标，所以将链表存入list集合，再使用下标找到对应的节点

```java
public void reorderList(ListNode head) {
    if (head == null) {
        return;}
    List<ListNode> list = new ArrayList<ListNode>();
    ListNode node = head;
    while (node != null) {
        list.add(node);
        node = node.next;}
    int i = 0, j = list.size() - 1;
    while (i < j) {
        list.get(i).next = list.get(j);
        i++;
        if (i == j) break;
        list.get(j).next = list.get(i);
        j--;}
    list.get(i).next = null;}
```

解法二：寻找链表中点+链表逆序+合并链表
================================

分为三步：第一步寻找链表中点
第二步将链表的右半端反转
第三步将链表两端合并

```java
public void reorderList(ListNode head) {
    if (head == null) {
        return;}
    ListNode mid = middleNode(head);
    ListNode l1 = head;
    ListNode l2 = mid.next;
    mid.next = null;
    l2 = reverse(l2);
    mergeList(l1,l2);}
public ListNode middleNode(ListNode head){
    ListNode slow = head;
    ListNode fast = head;
    while(fast.next != null && fast.next.next != null){
        slow = slow.next;
        fast = fast.next.next;}
    return slow;}
public ListNode reverse(ListNode head){
    ListNode cur = head;
    ListNode prev = null;
    while(cur != null){
        ListNode temp = cur.next;
        cur.next = prev;
        prev = cur;
        cur = temp;}
    return prev;}
public void mergeList(ListNode l1,ListNode l2){
    ListNode l1_temp;
    ListNode l2_temp;
    while(l1.next != null && l2.next != null){
        l1_temp = l1.next;
        l2_temp = l2.next;
        l1.next = l2;
        l1 = l1_temp;
        l2.next = l1;
        l2 = l2_temp;}
```

总结：
====

解法一很好考虑，解法二找到中间节点也很简单，但是后面反转这个思路是我没想到的，尤其是合并的过程，需要好好熟悉这个操作。
