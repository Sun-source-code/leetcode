# leetcode

题目描述（中等）
============

一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？
示例：输入:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
输出: 2
解释:
3x3 网格的正中间有一个障碍物。
从左上角到右下角一共有 2 条不同的路径：
1. 向右 -> 向右 -> 向下 -> 向下
2. 向下 -> 向下 -> 向右 -> 向右

题解一：动态规划
=============

这题的思路可以参考第62题，只是需要加上判断是否有障碍物

```java
public int uniquePathsWithObstacles(int[][] obstacleGrid){
  int n = obstacleGrid.length,m = obstacleGrid[0].length;
  int dp = new int[m];
  dp[0] = obstacleGrid[0][0] == 0 ? 1 : 0;
  for(int i = 1;i < n;i++){
    for(int j = 1;j < m;j++){
      if(obstacleGrid[i][j] == 1){
        dp[j] = 0;
        continue;}
      if(j - 1 > 0 && obstacleGrid[i][j-1] == 0){
        dp[i] += dp[i-1];}}}
  return dp[m-1];
```

总结：
====

这题和62题一样，只需要加上一个判断，改动不大。
