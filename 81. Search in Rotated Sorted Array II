# leetcode

题目描述（中等）
============

假设按照升序排序的数组在预先未知的某个点上进行了旋转。
( 例如，数组 [0,0,1,2,2,5,6] 可能变为 [2,5,6,0,0,1,2] )。
编写一个函数来判断给定的目标值是否存在于数组中。若存在返回 true，否则返回 false。

示例：输入: nums = [2,5,6,0,0,1,2], target = 0
输出: true

解法一：暴力匹配
=============

```java
public boolean search(int[] nums, int target) {
  for(int i = 0;i < nums.length;i++){
    if(nums[i] == target) return true;}
      return false;}
```

解法二：二分查找
=============

注意这里给出的数组并不是有序数组，因此我们二分的时候，需要先判断一下这一段子数组是否有序。

```java
public boolean search(int[] nums,int target){
  if(nums == null || nums.length == 0) return false;
  int start = 0,end = nums.length-1;
  int mid;
  while(start <= end){
    mid = start + (end - start) / 2;
    if(nums[mid] == target) return true;
    if(nums[start] == nums[mid]){
      start++;
      continue;}
    if(nums[start] < nums[mid]){
      if(nums[mid] > target && nums[start] <= target){
        end = mid - 1;}
      else{
        start = mid + 1;}}
    else{
      if(nums[mid] < target && nums[end] >= target) {
        start = mid + 1;}
      else{
        end = mid - 1;}}}
  return false;}
```

总结：
====

这一题题意很简单，不过对于二分查找，加入了判断子数组是否有序。
