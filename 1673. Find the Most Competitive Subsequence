# leetcode

题目描述（中等）
============

给你一个整数数组 nums 和一个正整数 k ，返回长度为 k 且最具 竞争力 的 nums 子序列。

数组的子序列是从数组中删除一些元素（可能不删除元素）得到的序列。

在子序列 a 和子序列 b 第一个不相同的位置上，如果 a 中的数字小于 b 中对应的数字，
那么我们称子序列 a 比子序列 b（相同长度下）更具 竞争力 。 
例如，[1,3,4] 比 [1,3,5] 更具竞争力，在第一个不相同的位置，也就是最后一个位置上， 4 小于 5 。

示例 1：

输入：nums = [3,5,2,6], k = 2
输出：[2,6]
解释：在所有可能的子序列集合 {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]} 中，[2,6] 最具竞争力。

解法一：单调栈
============

```java
public int[] mostCompetitive(int[] nums, int k) {
    Stack<Integer> stack = new Stack<>();
    stack.push(-1);
    in len = nums.length;
    for(int i = 0;i < len;i++){
        while(nums[i] < stack.peek() && k - stack.size + 1 < len - i){
            stack.pop();}
        if(stack.size() < k+1){
            stack.push(nums[i]);}
    int [] ans = new int[k];
    while(k > 0){
        ans[--k] = stack.pop();}
    return ans;}
```

总结：
====

这里肯定是不可能使用枚举的，那么单调栈就起作用了，这题的关键在于判断数组剩余长度与剩余需要加入栈中数据的大小关系。
