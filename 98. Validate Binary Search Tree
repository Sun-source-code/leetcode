# leetcode

题目描述（中等）
=============

给定一个二叉树，判断其是否是一个有效的二叉搜索树。
假设一个二叉搜索树具有如下特征：
1、节点的左子树只包含小于当前节点的数。
2、节点的右子树只包含大于当前节点的数。
3、所有左子树和右子树自身必须也是二叉搜索树。

实例：输入:
    5
   / \
  1   4
     / \
    3   6
输出: false
解释: 输入为: [5,1,4,null,null,3,6]。
     根节点的值为 5 ，但是其右子节点值为 4 。

解法一：递归
==========

```java
public boolean helper(TreeNode node, Integer lower, Integer upper) {
  if(node == null) return true;
  if(low != null && val <= lower) return false;
  if(upper != null && val >= upper) return false;
  if(!helper(node.left,val,upper) return false;
  if(!helper(node.right,low,upper) return false;
  return true;}
public boolean isValidBST(TreeNode root){
  return helper(root,null,null);}
```

解法二：中序遍历
=============

```java
public boolean isValidBST(TreeNode root){
  Stack<TreeNode> stack = new Stack<>();
  TreeNode pre = null;
  while(root != null || !stack.isEmpty()){
    while(root != null){
      stack.push(root);
      root = root.left;}
    root = stack.pop();
    if(pre != null && root.val <= pre.val) return false;
    pre = root;
    root = root.right;}
  return true;}
```

总结：
====

最容易想到的是中序遍历，因为中序遍历得到的数列是升序的，只要验证是否升序即可，递归思路还是容易的，
但是需要注意val的变化。
