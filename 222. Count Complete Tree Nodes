# leetcode

题目描述（中等）
============

给出一个完全二叉树，求出该树的节点个数。

说明：
完全二叉树的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，
并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 1~ 2h 个节点。

示例:

输入: 
    1
   / \
  2   3
 / \  /
4  5 6

输出: 6

解法一：二分查找+位运算
===================

```java
public int countNodes(TreeNode root) {
    if(root == null) return 0;
    int level = 0;
    TreeNode node = root;
    while(node.left != null){
        level++;
        node = node.left;}
    TreeNode low = 1 << level,high = (1 << (level+1))-1;
    while(low <= high){
        int mid = (high - low + 1) / 2;
        if(exist(root,level,mid){
            low = mid;}
        else{
            high = mid - 1;}}
    return low;}
public boolean exist(TreeNode root,int level,int k){
    int bits = 1 << (level-1);
    TreeNode node = root;
    while(node != null && bits > 0){
        if(bits & k != 0){
            node = node.right;}
        else{
            node = node.left;}
        bits >>= 1;}
    return node != null;}
```

总结：
====

二分查找居然可以用在完全二叉树中，这个思路需要掌握，另外位运算来寻找节点，这个方法也需要记住。
