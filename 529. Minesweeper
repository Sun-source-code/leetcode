# leetcode

题目描述（中等）
============

让我们一起来玩扫雷游戏！

给定一个代表游戏板的二维字符矩阵。 'M' 代表一个未挖出的地雷，'E' 代表一个未挖出的空方块，'B' 代表没有相邻（上，下，左，右，和所有4个对角线）地雷的已挖出的空白方块，数字（'1' 到 '8'）表示有多少地雷与这块已挖出的方块相邻，'X' 则表示一个已挖出的地雷。

现在给出在所有未挖出的方块中（'M'或者'E'）的下一个点击位置（行和列索引），根据以下规则，返回相应位置被点击后对应的面板：

如果一个地雷（'M'）被挖出，游戏就结束了- 把它改为 'X'。
如果一个没有相邻地雷的空方块（'E'）被挖出，修改它为（'B'），并且所有和其相邻的未挖出方块都应该被递归地揭露。
如果一个至少与一个地雷相邻的空方块（'E'）被挖出，修改它为数字（'1'到'8'），表示相邻地雷的数量。
如果在此次点击中，若无更多方块可被揭露，则返回面板。
 

示例 1：
输入: 

[['E', 'E', 'E', 'E', 'E'],
 ['E', 'E', 'M', 'E', 'E'],
 ['E', 'E', 'E', 'E', 'E'],
 ['E', 'E', 'E', 'E', 'E']]

Click : [3,0]

输出: 

[['B', '1', 'E', '1', 'B'],
 ['B', '1', 'M', '1', 'B'],
 ['B', '1', '1', '1', 'B'],
 ['B', 'B', 'B', 'B', 'B']]

解法一：深度优先遍历+模拟
=====================

1、如果当前点击的是未挖出的地雷，那么将其改为X，结束游戏
2、如果当前点击的是未挖出的方块，我们需要统计他周围的地雷的数目，如果地雷数目为0，那么将其该改为B，并递归地处理他周围的八个方块，
直到没有更多分方块需要挖出，否则直接将其改为数字

```java
int[] dirX = {0, 1, 0, -1, 1, 1, -1, -1};
int[] dirY = {1, 0, -1, 0, 1, -1, 1, -1};

public char[][] updateBoard(char[][] board, int[] click) {
    int x = click[0], y = click[1];
    if (board[x][y] == 'M') {
        board[x][y] = 'X';
    } else{
        dfs(board, x, y);}
    return board;}

public void dfs(char[][] board, int x, int y) {
    int cnt = 0;
    for (int i = 0; i < 8; ++i) {
        int tx = x + dirX[i];
        int ty = y + dirY[i];
        if (tx < 0 || tx >= board.length || ty < 0 || ty >= board[0].length) {
            continue;}
        // 不用判断 M，因为如果有 M 的话游戏已经结束了
        if (board[tx][ty] == 'M') {
            ++cnt;}}
    if(cnt > 0) {
        board[x][y] = (char) (cnt + '0');
    }else {
        board[x][y] = 'B';
        for (int i = 0; i < 8; ++i) {
            int tx = x + dirX[i];
            int ty = y + dirY[i];
            // 这里不需要在存在 B 的时候继续扩展，因为 B 之前被点击的时候已经被扩展过了
            if (tx < 0 || tx >= board.length || ty < 0 || ty >= board[0].length || board[tx][ty] != 'E') {
                continue;}
            dfs(board, tx, ty);}}}
```

解法二：广度优先遍历+模拟
=====================

与解法一基本相同，就是把tx和ty放进一个队列里

int[] dirX = {0, 1, 0, -1, 1, 1, -1, -1};
int[] dirY = {1, 0, -1, 0, 1, -1, 1, -1};

public char[][] updateBoard(char[][] board, int[] click) {
    int x = click[0], y = click[1];
    if (board[x][y] == 'M') {
        board[x][y] = 'X';
    } else{
        dfs(board, x, y);}
    return board;}

public void dfs(char[][] board, int x, int y) {
    Queue<int []> queue = new LinkedList<>();
    boolean [][] vis = new boolean[board.length][board[0].length];
    queue.off(new int[]{x,y};
    vis[x][y] = true;
    while(!queue.isEmpty()){
        int [] poll = queue.poll();
        int cnt = 0,x = poll[0],y = poll[1];
        for (int i = 0; i < 8; ++i) {
            int tx = x + dirX[i];
            int ty = y + dirY[i];
            if (tx < 0 || tx >= board.length || ty < 0 || ty >= board[0].length) {
                continue;}
            // 不用判断 M，因为如果有 M 的话游戏已经结束了
            if (board[tx][ty] == 'M') {
                ++cnt;}}
        if(cnt > 0) {
            board[x][y] = (char) (cnt + '0');
        }else {
            board[x][y] = 'B';
            for (int i = 0; i < 8; ++i) {
                int tx = x + dirX[i];
                int ty = y + dirY[i];
                // 这里不需要在存在 B 的时候继续扩展，因为 B 之前被点击的时候已经被扩展过了
                if (tx < 0 || tx >= board.length || ty < 0 || ty >= board[0].length || board[tx][ty] != 'E' || vis[tx][ty]) {
                    continue;}
                queue.push(new int[]{tx,ty};
                vis[tx][ty] = true;}}}}
```

总结：
====

又是一个递归的题目，简单说就是点击一个点，如果是雷就结束，如果不是就查看附近的八个点是否有雷。
