# leetcode

题目描述（简单）
============

集合 S 包含从1到 n 的整数。不幸的是，因为数据错误，导致集合里面某一个元素复制了成了
集合里面的另外一个元素的值，导致集合丢失了一个整数并且有一个元素重复。

给定一个数组 nums 代表了集合 S 发生错误后的结果。
你的任务是首先寻找到重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。

示例 1:

输入: nums = [1,2,2,4]
输出: [2,3]

解法一：暴力解法
=============

```java
public int[] findErrorNums(int[] nums) {
    int dup = -1,missing = 1;
    for(int i = 1;i < nums.length;i++){
        int count = 0;
        for(int j = 0;j < nums.length;j++){
            if(nums[j] == i){
                count++;}}
        if(count == 2){
            dup = i;}
        else if(count == 0){
            missing = i;}}
    return new int []{dup,missing};}
```

解法二：排序
==========

```java
public int[] findErrorNums(int[] nums) {
    Arrays.sort(nums);
    int dup = -1,missing = 1;
    for(int i = 1;i < nums.length;i++){
        if(nums[i] == nums[i-1]){
            dup = nums[i];}
        else if(nums[i] > nums[i-1] + 1){
            missing = nums[i-1] + 1;}}
    return new int[]{dup,nums[nums.length - 1] != nums.length ? nums.length : missing};}
```

解法三：哈希表
============

```java
public int[] findErrorNums(int[] nums) {
    Map<Integer,Integer> map = new HashMap<>();
    int dup = -1,missing = 1;
    for(int n : nums){
        map.put(n,map.getOrDefault(map.get(n),0) + 1);}
    for(int i = 1;i <= nums.length;i++){
        if(map.containsKey()){
            if(map.get(i) == 2){
                dup = i;}}
        else{
            missing = i;}}
    return new int[]{dup,missing};}
```

解法四：使用额外数组
=================

```java
public int[] findErrorNums(int[] nums) {
    int [] arr = new int[nums.length+1];
    int dup = -1,missing = 1;
    for(int i = 0;i < nums.length;i++){
        arr[nums[i]] += 1;}
    for(int i = 1;i <= nums.length;i++){
        if(arr[i] == 0){
            missing = i;}
        else if(arr[i] == 2){
            dup = i;}}
    return new int[]{dup,missing};}
```

解法五：使用额外空间
=================

```java
public int[] findErrorNums(int[] nums) {
    int dup = -1,missing = 1;
    for(int n : nums){
        if(nums[Math.abs(n)-1] < 0){
            dup = Math.abs(n);}
        else{
            nums[Math.abs(n)-1] *= -1;}}
    for(int i = 1;i < nums.length;i++){
        if(nums[i] > 0){
            missing = i + 1;}}
    return new int[]{dup,missing};}
```

解法六：位运算
============

```java
public int[] findErrorNums(int[] nums) {
    int xor = 0, xor0 = 0, xor1 = 0;
    for (int n: nums)
        xor ^= n;
    for (int i = 1; i <= nums.length; i++)
        xor ^= i;
    int rightmostbit = xor & ~(xor - 1);
    for (int n: nums) {
        if ((n & rightmostbit) != 0)
            xor1 ^= n;
        else
            xor0 ^= n;}
    for (int i = 1; i <= nums.length; i++) {
        if ((i & rightmostbit) != 0)
            xor1 ^= i;
        else
            xor0 ^= i;}
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] == xor0)
            return new int[]{xor0, xor1};}
    return new int[]{xor1, xor0};}
```

总结：
====

实现方法有很多，比较好理解且巧妙的是使用额外数组和空间，这里将正常的数取反，或者加一都很棒的思路，但是位运算还不太理解，以后再更新吧。
