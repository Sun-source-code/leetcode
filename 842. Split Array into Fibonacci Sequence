# leetcode

题目描述（中等）
============

给定一个数字字符串 S，比如 S = "123456579"，我们可以将它分成斐波那契式的序列 [123, 456, 579]。

形式上，斐波那契式序列是一个非负整数列表 F，且满足：

0 <= F[i] <= 2^31 - 1，（也就是说，每个整数都符合 32 位有符号整数类型）；
F.length >= 3；
对于所有的0 <= i < F.length - 2，都有 F[i] + F[i+1] = F[i+2] 成立。
另外，请注意，将字符串拆分成小块时，每个块的数字一定不要以零开头，除非这个块是数字 0 本身。

返回从 S 拆分出来的任意一组斐波那契式的序列块，如果不能拆分则返回 []。

示例 1：

输入："123456579"
输出：[123,456,579]

解法一：回溯+剪枝
==============

```java
public List<Integer> splitIntoFibonacci(String S) {
    List<Integer> ans = new ArrayList<>();
    backtrack(ans,S,S.length(),0,0,0);
    return ans;}
public boolean backtrack(List<Integer> ans,String S,int length,int index,int sum,int prev){
    if(index == length){
        return ans.size() >= 3;}
    long currLong = 0;
    for(int i = index;i < length;i++){
        if(i > index && S.charAt(index) == '0'){
            break;}
        currLong = currLong * 10 + S.charAt(i) - '0';
        if(currLong > Integer.MAX_VALUE){
            break;}
        int curr = (int)currLong;
        if(ans.size() >= 2){
            if(curr < sum){
                continue;}
            else if(curr > sum){
                break;}}
        ans.add(curr);
        if(backtrack(ans,S,length,i+1,curr+prev,curr)){
            return true;}
        else{
            ans.remove(ans.size() - 1);}}
    return false;}
```

总结：
====

经典回溯+剪枝的问题，这里面非常需要注意特殊情况，比如大于Integer.MAX_VALUE，达到最后一个字符，以及0作为第一个字符的情况。
