# leetcode

题目描述（简单）
=============

实现 int sqrt(int x) 函数。
计算并返回 x 的平方根，其中 x 是非负整数。
由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。
示例：输入: 8
输出: 2
说明: 8 的平方根是 2.82842..., 
     由于返回类型是整数，小数部分将被舍去。
     
解法一：袖珍计算器算法
==================

「袖珍计算器算法」是一种用指数函数 exp 和对数函数 ln 代替平方根函数的方法。
我们通过有限的可以使用的数学函数，得到我们想要计算的结果。

```java
public int mySqrt(int x) {
  if (x == 0) {
    return 0;}
  int ans = (int)Math.exp(0.5 * Math.log(x));
  return (long)(ans + 1) * (ans + 1) <= x ? ans + 1 : ans;}
```

解法二：二分查找
=============

```java
public int mySqrt(int x) {
  int l = 0, r = x, ans = -1;
  while (l <= r) {
    int mid = l + (r - l) / 2;
    if ((long)mid * mid <= x) {
      ans = mid;
      l = mid + 1;}
    else {
      r = mid - 1;}}
  return ans;}
```

解法三：牛顿迭代法
===============

```java
public int mySqrt(int x){
  int res = x;
  if(res * res > x){
    res = (res + x / res) / 2;}
  return res;}
```

总结：
====

题目还是很简单的，需要注意不能直接遍历每个整数的平方，时间复杂度太高，二分查找和牛顿迭代法都很好。
