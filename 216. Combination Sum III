# leetcode

题目描述（中等）
============

找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。

说明：
所有数字都是正整数。
解集不能包含重复的组合。

示例 1:
输入: k = 3, n = 7
输出: [[1,2,4]]

解法一：二进制（子集）枚举
=====================

```java
List<List<Integer>> ans = new ArrayList<>();
List<Integer> temp = new ArrayList<>();
public List<List<Integer>> combinationSum3(int k, int n) {
    for(int mask = 0;mask < (1 << 9);mask++){
        if(check(mask,k,n){
            ans.add(new ArrayList<>(temp));}}
    return ans;}
public boolean check(int mask,int k,int n){
    temp.clear();
    for(int i = 0;i < 9;i++){
        if(1 << i) & mask) != 0){
            temp.add(i+1);}}
    if(temp.size() != k){
        return false;}
    int sum = 0;
    for(int x : temp){
        sum += x;}
    return sum == n;}
```

解法二：组合枚举
=============

```java
List<List<Integer>> ans = new ArrayList<>();
List<Integer> temp = new ArrayList<>();
public List<List<Integer>> combinationSum3(int k, int n) {
    dfs(1,9,k,n);
    return ans;}
public void dfs(int cur,int n,int k,int sum){
    if(temp.size() + (n - cur + 1) < k || temp.size() > k){
        return;}
    if(temp.size() == k){
        int tmpSum = 0;
        for(int num : temp){
            tmpSum += num;}
        if(tmpSum == k){
            ans.add(new ArrayList<>(temp));
            return;}}
    temp.add(cur);
    dfs(cur+1,n,k,sum);
    temp.remove(temp.size());
    dfs(cur+1,n,k,sum);}}
```

解法三：深度搜索+剪枝
==================

```java
List<List<Integer>> ans = new ArrayList<>();
Deque<Integer> queue = new ArrayDeque<>();
public List<List<Integer>> combinationSum3(int k,int n){
    dfs(k,n,1);
    return ans;}
public void dfs(int k,int n,int start){
    if(k < 0 || n < 0) return;
    if(k == 0 && n == 0){
        if(!path.isEmpty()){
            ans.add(new ArrayList<>(queue));
            return;}
        for(int i = start;i < 10;i++){
            path.push(i);
            dfs(k-1,n-i,start++);
            path.pop();}}}
```

总结：
====

解决方法还是比较好理解的，方法一直接列举了所有可能的情况，if(1 << i) & mask) != 0)用的很妙，后面两种方法都使用递归实现。
