# leetcode

题目描述（困难）
=============

一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。
我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。
骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。
有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；
其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。
为了尽快到达公主，骑士决定每次只向右或向下移动一步。
编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。
示例：考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -> 右 -> 下 -> 下，则骑士的初始健康点数至少为 7。
-2(K)	-3	  3
-5	  -10	  1
10	  30	  -5 (P)

解法一：动态规划
=============

状态转移方程为dp[i][j] = max(min(dp[i+1][j],dp[i][j+1])-dungeon[i][j]),1);

```java
public int calculateMinimumHP(int [][]dungeon){
  int m = dungeon.length;
  int n = dungeon[0].length;
  int [][] ans = new int[m+1][n+1];
  for(int i = 0;i < m;i++){
    Arrays.fill(ans[i],Integer.MAX_VALUE);}
  ans[m][n - 1] = 1;
  ans[m - 1][n] = 1;
  for(int i = m-1;i >= 0;i--){
    for(int j = n-1;j >= 0;j--){
      int minn = Math.min(ans[i+1][j],ans[i][j+1]);
      ans[i][j] = Math.max(minn - dungeon[i][j],1);}}
  return ans[0][0];}
```

空间优化：
========

public int calculateMinimumHP(int [][] dungeon){
  int m = dungeon.length;
  int n = dungeon[0].length;
  int [] dp = new int[n+1];
  Arrays.fill(dp,Integer.MAX_VALUE);
  dp[n-1] = dungeon[m-1][n-1] > 0 ? 1 : (1-dungeon[m-1][n-1]);
  for(int i = m-1;i >= 0;i--){
    for(int j = n-1;j >= 0;j--){
      if(i == m-1 && j == n-1) continue;
      dp[j] = Math.min(dp[j],dp[j+1]) - dungeon[i][j];
      if(dp[j] <= 0) dp[j] = 1;}}
  return dp[0];}
      

总结：
====

正序相加很容易出现数组越界，不如先从右下角开始遍历，先初始化为1，再逐个相加。
