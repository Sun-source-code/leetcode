# leetcode

题目描述（简单）
============

给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）

例如：
给定二叉树 [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
返回其自底向上的层次遍历为：
[
  [15,7],
  [9,20],
  [3]
]

解法一：深度优先遍历
================

```java
public List<List<Integer>> levelOrderBottom(TreeNode root) {
    List<List<Integer>> ans = new ArrayList<>();
    find(root,1,ans);
    return ans;}
public void find(TreeNode root,int level,List<List<Integer>> ans){
    if(root == null) return;
    if(level > ans.size()){
        ans.add(0,new ArrayList<>());}
    ans.get(ans.size()-level).add(root.val);
    find(root.left,level+1,ans);
    find(root.right,level+1,ans);}
```

解法二：广度优先遍历
=================

```java
public List<List<Integer>> levelOrderBottom(TreeNode root) {
    Queue<TreeNode> queue = new LinkedList<>();
    List<List<Integer>> ans = new ArrayList<>();
    if(root == null) return ans;
    queue.offer(root);
    while(!queue.isEmpty()){
        int levelNum = queue.size();
        List<Integer> subList = new ArrayList<>();
        for(int i = 0;i < levelNum;i++){
            TreeNode cur = queue.poll();
            if(cur != null){
                subList.add(cur.val);
                queue.offer(cur.left);
                queue.offer(cur.right);}}
        if(subList.size() > 0){
            ans.add(0,subList);}}
    return ans;}
```

总结：
====

需要注意节点值自底向上，所以深度优先遍历注意ans.get(ans.size()-level).add(root.val);
