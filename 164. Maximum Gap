# leetcode

题目描述（困难）
============

给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。

如果数组元素个数小于 2，则返回 0。

示例 1:

输入: [3,6,9,1]
输出: 3
解释: 排序后的数组是 [1,3,6,9], 其中相邻元素 (3,6) 和 (6,9) 之间都存在最大差值 3。

解法一：排序
==========

```java
public int maximumGap(int[] nums) {
    if(nums.length < 2) return 0;
    Arrays.sort(nums);
    int ans = 0;
    for(int i = 1;i < nums.length;i++){
        if(nums[i] - nums[i-1] > ans){
            ans = nums[i] - nums[i-1];}}
    return ans;}
```

解法二：桶排序
============

```java
public int maximumGap(int[] nums) {
    if (nums.length <= 1) {
        return 0;}
    int n = nums.length;
    int min = nums[0];
    int max = nums[0];
    for (int i = 1; i < n; i++) {
        min = Math.min(nums[i], min);
        max = Math.max(nums[i], max);}
    if(max - min == 0) {
        return 0;}
    int interval = (int) Math.ceil((double)(max - min) / (n - 1));
    int[] bucketMin = new int[n - 1];
    int[] bucketMax = new int[n - 1];
    Arrays.fill(bucketMin, Integer.MAX_VALUE);
    Arrays.fill(bucketMax, -1);
    for (int i = 0; i < nums.length; i++) {
        //当前数字所在箱子编号
        int index = (nums[i] - min) / interval;
        //最大数和最小数不需要考虑
        if(nums[i] == min || nums[i] == max) {
            continue;
        }
        //更新当前数字所在箱子的最小值和最大值
        bucketMin[index] = Math.min(nums[i], bucketMin[index]);
        bucketMax[index] = Math.max(nums[i], bucketMax[index]);}
    int maxGap = 0;
    int previousMax = min;
    for (int i = 0; i < n - 1; i++) {
        if (bucketMax[i] == -1) {
            continue;}
        maxGap = Math.max(bucketMin[i] - previousMax, maxGap);
        previousMax = bucketMax[i];}
    maxGap = Math.max(max - previousMax, maxGap);
    return maxGap;}
```

总结：
====

还是排序方便理解，桶排序的时间复杂度还不如排序的，不过逻辑需要学习。
