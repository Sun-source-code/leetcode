# leetcode

题目描述（中等）
============

假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对(h, k)表示，其中h是这个人的身高，
k是排在这个人前面且身高大于或等于h的人数。 编写一个算法来重建这个队列。

注意：
总人数少于1100人。

示例

输入:
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]

输出:
[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]

解法一：从低到高考虑
=================

```java
public int[][] reconstructQueue(int[][] people) {
    Arrays.sort(people,new Comparator<int []>{
        public int compara(int [] a,int [] b){
            if(a[0] != b[0]){
                return a[0] - b[0];}
            else{
                return b[1] - a[1];}}
    });
    int n = people.length;
    int [][] ans = new int[n][];
    for(int [] person : people){
        int spaces = peoson[1] + 1;
        for(int i = 0;i < n;i++){
            if(ans == null){
                spaces--;
                if(spaces == 0){
                    ans[i] = person;
                    break;}}}}
    return ans;}
```

解法二：从高到低考虑
=================

```java
public int[][] reconstructQueue(int[][] people) {
    Arrays.sort(people, new Comparator<int[]>() {
        public int compare(int[] person1, int[] person2) {
            if (person1[0] != person2[0]) {
                return person2[0] - person1[0];
            } else {
                return person1[1] - person2[1];}}
        });
    List<int[]> ans = new ArrayList<int[]>();
    for (int[] person : people) {
        ans.add(person[1], person);}
    return ans.toArray(new int[ans.size()][]);}
```

总结：
====

总结来说最开始的比较器非常重要，解法二的直接导入实在太厉害了
