# leetcode

题目描述（中等）
============

给定一个非空的整数数组，返回其中出现频率前 k 高的元素。

示例 1:
输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]

解法一：堆
========

```java
public int[] topKFrequent(int[] nums, int k) {
    Map<Integer,Integer> map = new HashMap<>();
    for(int num : nums){
        map.put(num,map.getOrDefault(num,0)+1);}
    PriorityQueue<int []> queue = new PriorityQueue<int []>(new Comparator<int []>(){
        public int cpmpare(int [] a,in [] b){
            return a[1] - b[1];});
    for(Map.Entry<Integer,Integer> entry : map.entrySet()){
        int num = entry.getKey(),count = entry.getValue();
        if(queue.size == k){
            if(queue.peek()[1] < count){
                queue.poll();
                queue.offer(new int[]{num,count});}
        else{
             queue.offer(new int[]{num,count});}}
    int [] ret = new int[k];
    for(int i = 0;i < k;i++){
        ret[i] = queue.poll()[0];}
    return ret;}
```

解法二：基于快速排序
=================

```java
public int[] topKFrequent(int[] nums, int k) {
    Map<Integer, Integer> occurrences = new HashMap<Integer, Integer>();
    for (int num : nums) {
        occurrences.put(num, occurrences.getOrDefault(num, 0) + 1);}

    List<int[]> values = new ArrayList<int[]>();
    for (Map.Entry<Integer, Integer> entry : occurrences.entrySet()) {
        int num = entry.getKey(), count = entry.getValue();
        values.add(new int[]{num, count});}
    int[] ret = new int[k];
    qsort(values, 0, values.size() - 1, ret, 0, k);
    return ret;}

public void qsort(List<int[]> values, int start, int end, int[] ret, int retIndex, int k) {
    int picked = (int) (Math.random() * (end - start + 1)) + start;
    Collections.swap(values, picked, start);
        
    int pivot = values.get(start)[1];
    int index = start;
    for (int i = start + 1; i <= end; i++) {
        if (values.get(i)[1] >= pivot) {
            Collections.swap(values, index + 1, i);
            index++;}}
    Collections.swap(values, start, index);

    if (k <= index - start) {
        qsort(values, start, index - 1, ret, retIndex, k);
    } else {
        for (int i = start; i <= index; i++) {
            ret[retIndex++] = values.get(i)[0];}
        if (k > index - start + 1) {
            qsort(values, index + 1, end, ret, retIndex, k - (index - start + 1));}}}
```

总结：
====

比较容易想到的还是第一种方法，注意根据特定的比较器进行排序。
