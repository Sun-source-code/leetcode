# leetcode

题目描述（中等）
=============

给你一个括号字符串 s ，它只包含字符 '(' 和 ')' 。一个括号字符串被称为平衡的当它满足：

任何左括号 '(' 必须对应两个连续的右括号 '))' 。
左括号 '(' 必须在对应的连续两个右括号 '))' 之前。
比方说 "())"， "())(())))" 和 "(())())))" 都是平衡的， ")()"， "()))" 和 "(()))" 都是不平衡的。

你可以在任意位置插入字符 '(' 和 ')' 使字符串平衡。
请你返回让 s 平衡的最少插入次数。

示例：输入：s = "(()))"
输出：1
解释：第二个左括号有与之匹配的两个右括号，但是第一个左括号只有一个右括号。
我们需要在字符串结尾额外增加一个 ')' 使字符串变成平衡字符串 "(())))" 。

解法一：直接遍历
=============

```java
public int minInsertions(String s) {
    int ans = 0;
    int i = 0;
    int left = 0;
        while (i < s.length()) {
        if (s.charAt(i) == '(') {
            left++;
            i++;
            continue;}
        if (s.charAt(i) == ')') {
            if (i + 1 == s.length() || s.charAt(i + 1) != ')') {
                ans++;
                left--;
                if (left == -1) {
                    left = 0;
                    ans++;}
                i += 1;
            } else {
                left--;
                if (left == -1) {
                    left = 0;
                    ans++;}
                i += 2;}}}
    return ans + 2 * left;}
```

总结：
====

我前面的判断都是对的，唯一缺少了i+1 == s.length()这个条件，导致最后判断出错，另外这里可以不需要两次遍历，
也不需要计数，类似二次哈希表变成一次哈希表的思路。
