# leetcode

题目描述（困难）
============

给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例：输入: [3,3,5,0,0,3,1,4]
输出: 6
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。

解法一：模拟真实交易
================

联系到实际情况，两次交易，每一次找到买入和卖出得到的最大收益，与121题的方法类似

```java
public int maxProfit(int [] prices){
  if(prices.length == 0) return 0;
  int s1 = -prices[0];
  int s2 = Integer.MIN_VALUE;
  int s3 = Integer.MIN_VALUE;
  int s4 = Integer.MIN_VALUE;
  for(int i = 0;i < prices.length;i++){
    s1 = Math.max(s1,-prices[i]);
    s2 = Math.max(s2,s1+prices[i]);
    s3 = Math.max(s3,s2-prices[i]);
    s4 = Math.max(s4,s3+prices[i]);}
  return Math.max(0,s4);}
```

解法二:动态规划
=============

这一题和前面几题不同的是，保证交易两次，思路其实和解法一是一样的

```java
public int maxProfit(int[] prices) {
  if(prices.length<2) return 0;
  int len =  prices.length;
  int[] dp = new int[5];
  dp[0] = 0;//
  dp[1] = -prices[0];
  dp[2] = Integer.MIN_VALUE;
  dp[3] = Integer.MIN_VALUE;
  dp[4] = Integer.MIN_VALUE;
  for(int i=1;i<len;++i){
    dp[0] = 0;
    dp[1] = Math.max(dp[1],dp[0]-prices[i]);
    dp[2] = Math.max(dp[2],dp[1]+prices[i]);
    dp[3] = Math.max(dp[3],dp[2]-prices[i]);
    dp[4] = Math.max(dp[4],dp[3]+prices[i]);}
  return Math.max(dp[2],dp[4]);}
```

总结：
====

这题其实就是前两题的进阶，掌握了前面两题，这题也就简单了。
