# leetcode

题目描述（简单）
============

编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。

示例：
输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。

解法一：循环和位移动
================

总共32位，每一位进行判断

```java
public int hammingWeight(int n) {
    int bits = 0;
    int mask = 1;
    for(int i = 0;i < 32;i++){
        if((n & mask) != 0){
            bits++;}
        mask <<= 2;}
    return bits;}
```

解法二：位运算技巧
===============

n & (n-1)将最后一个1转化为0

```java
public int hammingWeight(int n) {
    int sum = 0;
    while(n != 0){
        sum++;
        n &= (n-1);}
    return sum;}
```

总结：
====

还是解法二比较快，这个小技巧在很多地方都能用到。
