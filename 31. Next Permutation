# leetcode

题目描述（中等）
============

实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须原地修改，只允许使用额外常数空间。

以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

解法一：一遍扫描
=============

从后往前扫描，扫描到一个按照升序排列的数就停止扫描，之后从这个点往后扫描，扫描到刚好比当前位置大的数，停止扫描，
之后把后面两端数据交换，注意，这里即使找到了两个交换的数，也不能直接停止，需要将后面的数再次排序。

```java
public void nextPermutation(int[] nums) {
    int i = nums.length - 2;
    while(i >= 0 && nums[i] >= nums[i+1]){
        i--;}
    if(i >= 0){
        int j = nums.length - 1;
        while(j >= 0 && nums[j] <= nums[i]){
            j--;}
        swap(nums,i,j);}
    reserve(nums,i+1);}

public void swap(int [] nums,int x,int y){
    int temp = nums[x];
    nums[x] = nums[y];
    nums[y] = temp;}

public void reserve(int [] nums,int start){
    int i = start,j = nums.length - 1;
    while(i < j){
        swap(nums,i,j);
        i++;
        j--;}
```

总结：
====

这里容易忽略最小，也就是说，不能直接将两个元素交换，还要取后面元素组合的最小值，因此直接查找两个元素的大小关系是不正确的。
