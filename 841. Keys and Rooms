# leetcode

题目描述（中等）
============

有 N 个房间，开始时你位于 0 号房间。每个房间有不同的号码：0，1，2，...，N-1，并且房间里可能有一些钥匙能使你进入下一个房间。

在形式上，对于每个房间 i 都有一个钥匙列表 rooms[i]，每个钥匙 rooms[i][j] 由 [0,1，...，N-1] 中的一个整数表示，其中 N = rooms.length。 钥匙 rooms[i][j] = v 可以打开编号为 v 的房间。

最初，除 0 号房间外的其余所有房间都被锁住。

你可以自由地在房间之间来回走动。

如果能进入每个房间返回 true，否则返回 false。

示例 1：

输入: [[1],[2],[3],[]]
输出: true
解释:  
我们从 0 号房间开始，拿到钥匙 1。
之后我们去 1 号房间，拿到钥匙 2。
然后我们去 2 号房间，拿到钥匙 3。
最后我们去了 3 号房间。
由于我们能够进入每个房间，我们返回 true。

解法一：深度优先遍历
================

```java
boolean[] vis;
int num;
public boolean canVisitAllRooms(List<List<Integer>> rooms) {
    int n = rooms.size();
    num = 0;
    vis = new boolean[n];
    dfs(rooms, 0);
    return num == n;}

public void dfs(List<List<Integer>> rooms, int x) {
    vis[x] = true;
    num++;
    for (int it : rooms.get(x)) {
        if (!vis[it]) {
            dfs(rooms, it);}}}
```

解法二：广度优先遍历
================

```java
public boolean canVisitAllRooms(List<List<Integer>> rooms) {
    int n = rooms.size(), num = 0;
    boolean[] vis = new boolean[n];
    Queue<Integer> que = new LinkedList<Integer>();
    vis[0] = true;
    que.offer(0);
    while (!que.isEmpty()) {
        int x = que.poll();
        num++;
        for (int it : rooms.get(x)) {
            if (!vis[it]) {
                vis[it] = true;
                que.offer(it);}}}
    return num == n;}
```

总结：
====

大致思想就是num递增，如果能找到的n与集合中不同字符个数不同，则返回false
