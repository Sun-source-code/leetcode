# leetcode

题目描述（中等）
============

我们有一个由平面上的点组成的列表 points。需要从中找出 K 个距离原点 (0, 0) 最近的点。

（这里，平面上两点之间的距离是欧几里德距离。）

你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。


示例 1：

输入：points = [[1,3],[-2,2]], K = 1
输出：[[-2,2]]
解释： 
(1, 3) 和原点之间的距离为 sqrt(10)，
(-2, 2) 和原点之间的距离为 sqrt(8)，
由于 sqrt(8) < sqrt(10)，(-2, 2) 离原点更近。
我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。

解法一：排序
==========

```java
public int[][] kClosest(int[][] points, int K) {
    Arrays.sort(points, new Comparator<int[]>() {
        public int compare(int[] point1, int[] point2) {
            return (point1[0] * point1[0] + point1[1] * point1[1]) - (point2[0] * point2[0] + point2[1] * point2[1]);}
        });
    return Arrays.copyOfRange(points, 0, K);}
```

解法二：优先队列
=============

```java
public int[][] kClosest(int[][] points, int K) {
    PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>() {
        public int compare(int[] array1, int[] array2) {
            return array2[0] - array1[0];}
    });
    for (int i = 0; i < K; ++i) {
        pq.offer(new int[]{points[i][0] * points[i][0] + points[i][1] * points[i][1], i});}
    int n = points.length;
    for (int i = K; i < n; ++i) {
        int dist = points[i][0] * points[i][0] + points[i][1] * points[i][1];
        if (dist < pq.peek()[0]) {
            pq.poll();
            pq.offer(new int[]{dist, i});}}
    int[][] ans = new int[K][2];
    for (int i = 0; i < K; ++i) {
        ans[i] = points[pq.poll()[1]];}
    return ans;}
```

解法三：快速选择（快速排序的思想）
===========================

```java
Random rand = new Random();
public int[][] kClosest(int[][] points, int K) {
    int n = points.length;
    random_select(points, 0, n - 1, K);
    return Arrays.copyOfRange(points, 0, K);}

public void random_select(int[][] points, int left, int right, int K) {
    int pivotId = left + rand.nextInt(right - left + 1);
    int pivot = points[pivotId][0] * points[pivotId][0] + points[pivotId][1] * points[pivotId][1];
    swap(points, right, pivotId);
    int i = left - 1;
    for (int j = left; j < right; ++j) {
        int dist = points[j][0] * points[j][0] + points[j][1] * points[j][1];
        if (dist <= pivot) {
            ++i;
            swap(points, i, j);}}
    ++i;
    swap(points, i, right);
    // [left, i-1] 都小于等于 pivot, [i+1, right] 都大于 pivot
    if (K < i - left + 1) {
        random_select(points, left, i - 1, K);
    } else if (K > i - left + 1) {
        random_select(points, i + 1, right, K - (i - left + 1));}}

public void swap(int[][] points, int index1, int index2) {
    int[] temp = points[index1];
    points[index1] = points[index2];
    points[index2] = temp;}
```

总结：
====

第一种方法还是很好想，但是时间复杂度太高了，优先队列虽然对于时间复杂度并没有什么改善，但是这个思路值得学习，定义
优先队列时定义好排序的方式，然后设定队列中有几个元素，每次比较当前元素与队列中的元素的大小，最后一个快速选择还不
太能理解，以后再更新吧
