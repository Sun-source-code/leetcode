# leetcode

题目描述（简单）
============

给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。

例如：
输入: 原始二叉搜索树:
              5
            /   \
           2     13

输出: 转换为累加树:
             18
            /   \
          20     13

解法一：反序中序遍历
================

```java
int sum = 0;
public TreeNode convertBST(TreeNode root) {
    if (root != null) {
        convertBST(root.right);
        sum += root.val;
        root.val = sum;
        convertBST(root.left);}
    return root;}
```

解法二：Morris遍历
================

```java
public TreeNode convertBST(TreeNode root) {
    int sum = 0;
    TreeNode node = root;
    while (node != null) {
        if (node.right == null) {
            sum += node.val;
            node.val = sum;
            node = node.left;
        }else {
            TreeNode succ = getSuccessor(node);
            if (succ.left == null) {
                succ.left = node;
                node = node.right;
            } else {
                succ.left = null;
                sum += node.val;
                node.val = sum;
                node = node.left;}}}
    return root;}

public TreeNode getSuccessor(TreeNode node) {
    TreeNode succ = node.right;
    while (succ.left != null && succ.left != node) {
        succ = succ.left;}
    return succ;}
```

总结：
====

二叉搜索树的遍历，只不过需要加一个sum变量，从后往前递增
