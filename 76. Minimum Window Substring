# leetcode

题目描述（困难）
============

给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字符的最小子串。
示例：输入: S = "ADOBECODEBANC", T = "ABC"
输出: "BANC"

解法一：滑动窗口：数组
==================

将T不同字符个数封装进一个长度为128的数组，如果S中包含这些字符且个数相同，则判断此时的子字符串长度

```java
public String minWindow(String s, String t) {
  char [] ss = s.toCharArray();
  char [] tt = t.toCharArray();
  int [] ans = new int [128];
  int start = 0,minLen = Integer.MAX_VALUE;
  int count = 0;
  for(int r = 0,l = 0;r < ss.length;r++){
    if(--ans[ss[r]] >= 0) count++;
    while(count == tt.length){
      if(r - j + 1 < maxLen){
        start = l;
        maxLen = r - j + 1;}
      if(++ans[ss[l++]] > 0) count--;}}
  return minLen == Integer.MAX_VALUE ? "":s.substring(start,start+maxLen);}
```

解法二：滑动窗口：哈希表
====================

```java
Map<Character,Integer> ori = new HashMap<>();
Map<Character,Integer> cnt = new HashMap<>();
public String minWindow(String s, String t) {
  int tLen = t.length();
  for(int i = 0;i < tLen;i++){
    char ch = t.charAt(i);
    ori.put(ch,ori.getOrDefault(ch,0)+1);}
  int l = 0,r = -1;
  int len = Integer.MAX_VALUE,ansL = -1,ansR = -1;
  int sLen = s.length();
  while(r < sLen){
    ++r;
    if(r < sLen && ori.containsKey(s.charAt(i))){
      cnt.put(s.charAt(r),cnt.getOrDefalut(s.charAt(r),0)+1);
    while(check() && l <= r){
      if(r - l + 1 < len){
        len = r - l + 1;
        ansL = 1;
        ansR = i + len;}
      if(ori.containsKey(s.charAt(l))){
        cnt.put(s.charAt(l),cnt.getOrDefault(s.charAt(l),0)-1);}
      ++l;}
  return ansL == -1 ? "" : s.substring(ansL,ansR);}
public boolean check(){
  Iterator iter = ori.entrySet().iterator();
  while(iter.hasNext()){
    Map.Entry entry = (Map.Entry) iter.next();
    Character key = (Character) entry.getKey();
    Integer val = (Integer) entry.getValue();
    if(cnt.getOrDefalut(key,0) < val){
      return false;}}
  return true;}
```

总结：
====

对比之下，使用哈希表遍历非常复杂，且创造了许多多余的空间，不推荐使用，使用数组则固定了使用一定的空间，只需要对数组元素
进行修改即可，我一直没有想到的是最后怎么判断左边的字符不符合条件，if(++ans[ss[l++]] > 0) count--，用的很妙。
