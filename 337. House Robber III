# leetcode

题目描述（中等）
=============

在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。
这个地区只有一个入口，我们称之为“根”。除了“根”之外，每栋房子有且只有一个“父“房子与之相连。
一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 
如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。

计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。

示例：输入: [3,2,3,null,3,null,1]

     3
    / \
   2   3
    \   \ 
     3   1

输出: 7 
解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.

解法一：暴力解法
=============

4 个孙子偷的钱 + 爷爷的钱 VS 两个儿子偷的钱 哪个组合钱多，就当做当前节点能偷的最大钱数。
这就是动态规划里面的最优子结构

```java
public int rob(TreeNode root){
  if(root == null) return 0;
  int money = root.val;
  if(root.left != null){
    money += (rob(root.left.left) + rob(root.left.right));}
  if(root.right != null){
    money += (rob(root.right.left) + rob(root.right.right));}
  return Math.max(money,rob(root.left)+rob(root.right);}
```

解法二：记忆化
============

把TreeNode 当做 key，能偷的钱当做 value，减少部分遍历步骤。

```java
public int rob(TreeNode root) {
  HashMap<TreeNode, Integer> memo = new HashMap<>();
  return robInternal(root, memo);}
public int robInternal(TreeNode root, HashMap<TreeNode, Integer> memo) {
  if (root == null) return 0;
  if (memo.containsKey(root)) return memo.get(root);
  int money = root.val;
  if (root.left != null) {
    money += (robInternal(root.left.left, memo) + robInternal(root.left.right, memo));}
  if (root.right != null) {
    money += (robInternal(root.right.left, memo) + robInternal(root.right.right, memo));}
  int result = Math.max(money, robInternal(root.left, memo) + robInternal(root.right, memo));
  memo.put(root, result);
  return result;}
```

解法三：动态规划
=============

当前节点选择不偷：当前节点能偷到的最大钱数 = 左孩子能偷到的钱 + 右孩子能偷到的钱
当前节点选择偷：当前节点能偷到的最大钱数 = 左孩子选择自己不偷时能得到的钱 + 右孩子选择不偷时能得到的钱 + 当前节点的钱数
状态转移方程：
root[0] = Math.max(rob(root.left)[0], rob(root.left)[1]) + Math.max(rob(root.right)[0], rob(root.right)[1])
root[1] = rob(root.left)[0] + rob(root.right)[0] + root.val;

```java
public int rob(TreeNode root){
  int [] result = robInternal(root);
  return Math.max(result[0],result[1]);
public int[] robInternal(TreeNode root){
  if(root == null) return new int[2];
  int [] result = new int[2];
  int [] left = robInternal(root.left);
  int [] right = robInternal(root.right);
  result[0] = Math.max(left[0], left[1]) + Math.max(right[0], right[1]);
  result[1] = left[0] + right[0] + root.val;}
  return result;}
```

总结：
====

对于二叉树的直接相连与数组不同，也就需要不一样的状态转移方程，这题对于二叉树的邻接点还是比较经典的题目。
