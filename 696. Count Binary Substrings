# leetcode

题目描述（简单）
=============

给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。
重复出现的子串要计算它们出现的次数。

示例 :
输入: "00110011"
输出: 6
解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。

请注意，一些重复出现的子串要计算它们出现的次数。
另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。

解法一：按字符分组
===============

将字符串按照0和1分组，比如字符串"00111011"可以得到数组counts={2,3,1,2}
假设数组中两个相邻的数为u和v，那么就对应着u个0和v个1，或者u个1和v个0，组成符合条件的子串数为Math.min(u,v)

```java
public int countBinarySubstrings(String s) {
    List<Integer> counts = new ArrayList<Integer>();
    int ptr = 0, n = s.length();
    while (ptr < n) {
        char c = s.charAt(ptr);
        int count = 0;
        while (ptr < n && s.charAt(ptr) == c) {
            ++ptr;
            ++count;}
        counts.add(count);}
    int ans = 0;
    for (int i = 1; i < counts.size(); ++i) {
        ans += Math.min(counts.get(i), counts.get(i - 1));}
    return ans;}
```

同样的，可以使用一个last记录前一个数的大小，减少对counts数组的遍历

```java
public int countBinarySubstrings(String s) {
    int ptr = 0, n = s.length(), last = 0, ans = 0;
    while (ptr < n) {
        char c = s.charAt(ptr);
        int count = 0;
        while (ptr < n && s.charAt(ptr) == c) {
            ++ptr;
            ++count;}
        ans += Math.min(count, last);
        last = count;}
    return ans;}
```

总结：
====

刚开始我陷进了子串的陷阱，准备使用哈希表，但是后来发现哈希表处理特别复杂，后来才知道连续的1和0，只要分组即可。
