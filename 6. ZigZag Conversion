# leetcode

题目描述（中等）
=============

将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。
比如输入字符串为 "LEETCODEISHIRING" 行数为 3 时，排列如下：
L   C   I   R
E T O E S I I G
E   D   H   N
之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如："LCIRETOESIIGEDHN"
请你实现这个将字符串进行指定行数变换的函数：
string convert(string s, int numRows);

解法一：按行排序
=============

从左向右迭代s，将每个字符添加到合适的行，可以使用当前行和当前方向对其进行追踪
只有当我们移动到最上面的行和最下面的行时，当前方向才会改变

```java
public String convert(String s,int numRows){
  if(numRows == 1) return s;
  List<StringBuilder> ans = new ArrayList<>();
  for(int i = 0;i < Math.min(s.length(),numRows){
    ans.add(new StringBuilder());}
  int curRow = 0;
  boolean flag = false;
  for(char c : s.toCharArray()){
    ans.get(curRow).append(c);
    if(curRow == 0 || curRow == numRows - 1){
      flag = !flag;}
    curRow += flag?1:-1;}
  StringBuilder ret = new StringBuilder();
  for(StringBuilder an : ans) ret.append(an);
  return ret.toString();}
```

解法二：按行访问
=============

统计每一行字符对应于原字符串的位置，可以得到每一行下标的规律
1、行0的字符位于索引k*(2*numRows-2)
2、行numRows-1的字符位于索引k*(2*numRows-2+numRows-1)
3、内部的字符位于索引k*(2*numRows-2)+i以及(k+1)*(2*numRows-2)-i处

```java
public String convert(String s, int numRows) {
  if (numRows == 1) return s;
  StringBuilder ret = new StringBuilder();
  int n = s.length();
  int cycleLen = 2 * numRows - 2;
  for (int i = 0; i < numRows; i++) {
    for (int j = 0; j + i < n; j += cycleLen) {
      ret.append(s.charAt(j + i));
      if (i != 0 && i != numRows - 1 && j + cycleLen - i < n)
        ret.append(s.charAt(j + cycleLen - i));}}
  return ret.toString();}
```

总结：
====

解法一最关键的地方就是flag的变化，解法二最关键的是j+cycleLen-i<n，都是不太好想到的一点。



