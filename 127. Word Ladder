# leetcode

题目描述（中等）
=============

给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。
转换需遵循如下规则：
1、每次转换只能改变一个字母。
2、转换过程中的中间单词必须是字典中的单词。

说明：1、如果不存在这样的转换序列，返回 0。
2、所有单词具有相同的长度。
3、所有单词只由小写字母组成。
4、字典中不存在重复的单词。
5、你可以假设 beginWord 和 endWord 是非空的，且二者不相同。

示例：输入:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]
输出: 5
解释: 一个最短转换序列是 "hit" -> "hot" -> "dot" -> "dog" -> "cog"
     返回它的长度 5。

解法一：广度优先遍历
=================

1、对所有的wordlist进行处理，找出所有的通用状态，将通用状态记录在字典中，键是通用状态，值是通用状态对应的单词
2、将包含beginword和1的元组放入队列中，1代表节点的层次
3、当队列中有元素时，取出一个元素，记为curr_word
4、找到curr_word的所有通用状态，并检查这些通用状态是否有其他单词的映射，通过all_combo来实现
5、从all_combo中获得的所有单词，都和curr_word同一个通用状态，将其放到队列中
6、对于新获得的所有单词，向队列中加入元素 (word, level + 1) 其中 level 是 curr_word 的层次。
7、最终当你到达期望的单词，对应的层次就是最短变换序列的长度

```java
public int ladderLength(String beginword,String endWord,List<String> wordList){
  int L = beginword.length();
  Map<String,List<String>> allcom = new HashMap<>();
  wordList.forEach(
    word -> {
      for(int i = 0;i < L;i++){
        String newword = word.substring(0,i) + "*" + word.substring(i+1,L);
        List<String> tran = allcom.getOrDefault(newword,new ArrayList<>());
        tran.add(word);
        allcom.put(newword,tran);}});
  Queue<Pair<String,Integer>> queue = new LinkedList<>();
  queue.put(new Pair(beginword,1));
  Map<String,Boolean> visited = new HashMap<>();
  visited.add(beginword,true);
  while(!queue.isEmpty()){
    Pair<String,Integer> node = queue.remove();
    String word = node.getKey();
    int level = node.getValue();
    for(int i = 0;i < L;i++){
      String newword = word.substring(0,i) + "*" + word.substring(i+1,L);
      for(String adjence : allcom.getOrDefault(newword,new ArrayList<>())){
        if(adjence.equals(endWord)){
          return level + 1;}
        if(!visited.containsKey(adjence)){
          visited.put(adjence,true);
          queue.add(new Pair(adjence,level+1));}}}}
  return 0;}
```   
    
总结：
====

广度优先遍历的应用，操作起来还是比较复杂的。
====================

====================
