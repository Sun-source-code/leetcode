# leetcode

题目描述（困难）
=============

合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。

示例:
输入:
[
  1->4->5,
  1->3->4,
  2->6
]
输出: 1->1->2->3->4->4->5->6

解法一：暴力
==========

将每个链表中节点的值加入一个链表中，对链表排序后输出

```java
public ListNode mergeKLists(ListNode[] lists) {
    List<Integer> ans = new ArrayList<>();
    for(ListNode ln : lists){
        while(ln != null){
            ans.add(ln.val);
            ln = ln.next;}}
    Collections.sort(ans);
    ListNode head = new ListNode(0);
    ListNode h = head;
    for(int i : ans){
        ListNode t = new ListNode(i);
        h.next = t;
        h = h.next;}
    h.next = null;
    return head.next;}
```

解法二：一列一列比较
=================

每一列的首节点相互比较，最小的加入新链表，逐个循环，直到链表为空

```java
public ListNode mergeKLists(ListNode [] lists){
    int min_index = 0;
    ListNode head = new ListNode(0);
    ListNode h = head;
    while(true){
        boolean isBreak = true;
        int min = Integer.MAX_VALUE;
        for(int i = 0;i < lists.length;i++){
            if(lsits[i] != null){  
                if(lists[i].val < min){
                    min_index = i;
                    min = lists[i].val;}}
            isBreak = false;}
        if(isBreak) break;
        ListNode a = new ListNode(lists[min_index].val);
        h.next = a;
        h = h.next;
        lists[min_index] = lists[min_index].next;}
    h.next = null;
    return head.next;}
```

解法三：优先队列
=============

```java
public ListNode mergeKLists(ListNode [] lists){
    Comparator<ListNode> tmp;
    tmp = new Comparator<ListNode>(){
        public int compareTo(ListNode o1,ListNode o2){
            return o1.val - o2.val;}};
    Queue<ListNode> queue = new PriorityQueue<ListNode>(tmp);
    for(ListNode l : lists){
        if(l != null){
            queue.add(l.val);}}
    ListNode head = new ListNode(0);
    ListNode h = head;
    while(!queue.isEmpty()){
        h.next = queue.poll;
        h = h.next;
        ListNode next = h.next;
        if(next != null){
            q.add(next);}}
    return head.next;}
```

解法四：两两合并
=============

```java
public ListNode helper(ListNode l1,ListNode l2){
    ListNode head = new ListNode(0);
    ListNode h = head;
    while(l1 != null && l2 != null){
        if(l1.val < l2.val){
            h.next = l1;
            h = h.next;
            l1 = l1.next;}
        else{
            h.next = l2;
            h = h.next;
            l2 = l2.next;}}
    if(l1 == null){
        h.next = l2;}
    if(l2 == null){
        h.next = l1;}
    return head.next;}
public ListNode mergeKLists(ListNode [] lists){
    if(lists.length==1){
        return lists[0];
    }
    if(lists.length==0){
        return null;
    }
    ListNode head = helper(lists[0],lists[1]);
    for (int i = 2; i < lists.length; i++) {
        head = helper(head,lists[i]);
    }
    return head;}
```

总结：
====

基于前面的合并两个有序数组，我首先想到的是方法四，但是这个方法时间复杂度太高，这里最好的方法还是方法二和方法三，
虽然思路简单，但是过程复杂，需要多练习。
