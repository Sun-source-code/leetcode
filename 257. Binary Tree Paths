# leetcode

题目描述（简单）
============

给定一个二叉树，返回所有从根节点到叶子节点的路径。
说明: 叶子节点是指没有子节点的节点。

示例:
输入:

   1
 /   \
2     3
 \
  5

输出: ["1->2->5", "1->3"]
解释: 所有根节点到叶子节点的路径为: 1->2->5, 1->3

解法一：深度优先遍历
================

```java
public List<String> binaryTreePaths(TreeNode root) {
    List<String> paths = new ArrayList<>();
    dfs(root,"",paths);
    return paths;}
public void dfs(TreeNode root,String s,List<String> paths){
    if(root != null){
        StringBuilder sb = new StringBuilder(s);
        sb.append(Integer.toString(root.val));
        if(root.left == null && root.right == null){
            paths.add(sb.toString());}
        else{
            sb.append("->");
            dfs(root.left,sb.toString(),paths);
            dfs(root.right,sb.toString(),paths);}}}
```

解法二：广度优先遍历
=================

```java
public List<String> binaryTreePaths(TreeNode root) {
    List<String> paths = new ArrayList<>();
    if(root == null) return paths;
    Queue<TreeNode> nodeQueue = new LinkedList<>();
    Queue<String> pathQueue = new LinkedList<>();
    nodeQueue.offer(root);
    pathQueue.offer(Integer.toString(root.val));

    while(!nodeQueue.isEmpty()){
        TreeNode node = nodeQueue.poll();
        String path = pathQueue.poll();
        if(node.left == null && node.right == null){
            paths.add(path);}
        else{
            if(node.left != null){
                nodeQueue.offer(node.left);
                pathQueue.offer(new StringBuffer(path).append("->").append(node.left.val).toString());}
            if(node.right != null){
                nodeQueue.offer(node.right);
                pathQueue.offer(new StringBuffer(path).append("->").append(node.right.val).toString());}}}
    return paths;
```

总结：
====

常规的深度优先和广度优先遍历
