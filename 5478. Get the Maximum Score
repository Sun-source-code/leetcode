# leetcode

题目描述（困难）
=============

你有两个 有序 且数组内元素互不相同的数组 nums1 和 nums2 。

一条 合法路径 定义如下：
选择数组 nums1 或者 nums2 开始遍历（从下标 0 处开始）。
从左到右遍历当前数组。
如果你遇到了 nums1 和 nums2 中都存在的值，那么你可以切换路径到另一个数组对应数字处继续遍历（但在合法路径中重复数字只会被统计一次）。
得分定义为合法路径中不同数字的和。

请你返回所有可能合法路径中的最大得分。
由于答案可能很大，请你将它对 10^9 + 7 取余后返回。

示例：输入：nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]
输出：30
解释：合法路径包括：
[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],（从 nums1 开始遍历）
[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]  （从 nums2 开始遍历）
最大得分为上图中的绿色路径 [2,4,6,8,10] 。

解法一：双指针
============

```java
public int maxSum(int[] nums1, int[] nums2) {
    int MOD = (int)(Math.pow(10,9) + 7);
    int i = 0,j = 0;
    long ans1 = 0,ans2 = 0;
    while(i < nums1.length && j < nums2.length){
        if(nums1[i] < nums2[j]){
            ans1 += nums1[i];
            i++;}
        else if(nums1[i] > nums2[j]){
            ans2 += nums2[j];
            j++;}
        else{
            ans1 = Math.max(ans1,ans2)+nums1[i];
            ans2 = ans1;
            i++;
            j++;}}
    while(i < nums1.length){
        ans1 += nums1[i];
        i++;}
    while(j < nums2.length){
        ans2 += nums2[j];
        j++;}
    return (int)(Math.max(ans1,ans2) % MOD);}
```

总结：
====

思路还是比较简单的，不能被题目误导了。
