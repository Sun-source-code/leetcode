# leetcode

题目描述（中等）
============

给出两个‘非空’的链表用来表示两个非负的整数。其中，它们各自的位数是按照‘逆序’的方式存储的，并且它们的每个节点只能存储’一位‘数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

解法一：初等数学
=============

就像十进制的计算一样，我们从最低位也就是l1和l2的表头开始相加，计算两数之和时会出现溢出的情况，比如5+7=12，我们会将当前位设置为2，
进位为1，并将进位带入下一次迭代，因此两个数字相加最大为9+9+1=19。
1、将当前节点的根节点初始化为列表的哑结点
2、将进位carry初始化为0
3、将p和q分别初始化为l1，l2列表的头部
4、遍历l1和l2直到列表的尾部，将x设为结点p的值，y设置为结点q的值，sum = (x + y) + carry，创建一个值为sum % 10的结点，并将其
设置为当前节点的下一个节点，同时，将p和q指向下一个结点。
注意以下几种情况：
1、当一个列表比另一个列表长时
2、出现空列表时
3、求和运算最后出现额外的进位

```java
class Solution{
    public ListNode addTwoNumbers(ListNode l1,ListNode l2){
        ListNode dummyNode = new ListNode(0);
        ListNode p = l1,q = l2,curr = dummyNode;
        int carry = 0;
        while(p != null || q != null){
            int x = (p != null)?p.val:0;
            int y = (q != null)?q.val:0;
            int sum = x+y+carry;
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            if(p != null) p = p.next;
            if(q != null) q = q.next;}
        if(carry > 0){
            curr.next = new ListNode(carry);}
        return dummyNode.next;}}
```
```python3
class Solution:
    def addTwoNumbers(self,l1:ListNode,l2:ListNode) -> ListNode:
        p = ListNode(0)
        q = p
        carry = 0
        while(l1 or l2 or carry):
            if(l1):
                carry += l1.val
                l1 = l1.next
            if(l2):
                carry += l2.val
                l2 = l2.next
            q.next = ListNode(carry % 10)
            q = q.next
            carry = carry // 10
        return p.next
```

拓展
====

如果链表中的数字不是按逆序存储的呢？例如：(3→4→2)+(4→6→5)=8→0→7

单链表逆序的思路1、迭代
1、next = head -> next; //保存 head 的 next , 以防取下 head 后丢失
2、head -> next = pre; //将 head 从原链表取下来，添加到新链表上
3、pre = head;// pre 右移
4、head = next; // head 右移

```java
class Solution{
    public ListNode reserveList(ListNode head){
        if(head == null) return null;
        ListNode pre = null;
        ListNode next;
        while(head.next != null){
            next = head.next;
            head.next = pre;
            pre = head;
            head = next;}
        return pre;}}}
```

单链表逆序的思路2、递归
```java
class Solution{
    public ListNode reserve(ListNode head){
        ListNode newhead;
        if(head == null || head.next == null) return head;
        newhead = reserve(head.next);
        head.next.next = head;
        head.next = null;
        return newhead;}}
```

总结：
====

这道题本身是不难的，只是需要注意进位以及两个链表长度不一样的情况，但是这个拓展思考有点难度，将单链表逆序输出的方法有两种，
其中递归的方法思路比较好理解，迭代方法短短四步，很巧妙。
