# leetcode

题目描述（简单）
=============

数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。

示例：输入：n = 3
输出：[
       "((()))",
       "(()())",
       "(())()",
       "()(())",
       "()()()"
     ]

解法一：回溯
==========

与第17题的电话号码字母组合思路一致，回溯直到最终的字符个数达到2n时加入链表

```java
public List<String> generateParenthesis(int n) {
    List<String> ans = new ArrayList<>();
    backtrack(ans,new StringBuilder(),0,0,n);
    return ans;}
public void backtrack(List<String> ans,StringBuilder temp,int open,int close,int max){
    if(temp.length() == 2*max){
        ans.add(temp.toString());
        return;}
    if(open < max){
        temp.append('(');
        backtrack(ans,temp,open+1,close,max);
        temp.deleteCharAt(temp.length()-1);}
    if(close < open){
        temp.append(')');
        backtrack(ans,temp,open,close+1,max);
        temp.deleteCharAt(temp.length()-1);}}
```

解法二：递归
==========

```java
ArrayList[] cache = new ArrayList[100];
public List<String> generate(int n) {
    if (cache[n] != null) {
        return cache[n];}
    ArrayList<String> ans = new ArrayList();
    if (n == 0) {
        ans.add("");
    }else {
        for (int c = 0; c < n; ++c)
            for (String left: generate(c))
                for (String right: generate(n - 1 - c))
                    ans.add("(" + left + ")" + right);}
    cache[n] = ans;
    return ans;}
public List<String> generateParenthesis(int n) {
    return generate(n);}
```

总结：
====

这题比较容易想到的是回溯，虽然思路一样，但是递归反而没有想到，注意deleteCharAt方法使用。
