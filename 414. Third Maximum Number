# leetcode

题目描述（简单）
============

给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。

示例 1:
输入: [3, 2, 1]
输出: 1
解释: 第三大的数是 1.

示例2：
输入: [2, 2, 3, 1]
输出: 1
解释: 注意，要求返回第三大的数，是指第三大且唯一出现的数。
存在两个值为2的数，它们都排第二。

解法一：使用三个变量
=================

```java
public int thirdMax(int[] nums) {
    long first = Long.MIN_VALUE;
    long second = Long.MIN_VALUE;
    long third = Long.MIN_VALUE;
    for (int num : nums) {
        if(num>first){
            third = second;
            second = first;
            first = num;
        }else if(num>second&&num<first){
            third = second;
            second = num;
        }else if(num<second&&num>third){
            third = num;}}
    return third!=Long.MIN_VALUE ? new Long(third).intValue() : new Long(first).intValue();}
```

解法二：使用set集合
================

```java
public int thirdMax(int[] nums) {
    if (nums == null || nums.length == 0) throw new RuntimeException("error");
    TreeSet<Integer> set = new TreeSet<>();
    for (Integer elem : nums) {
        set.add(elem);
        if (set.size() > 3) set.remove(set.first());}
    return set.size() < 3 ? set.last() : set.first();}
```

总结：
====

题目很简单，只是如果数字大，可能就不好计算了。
