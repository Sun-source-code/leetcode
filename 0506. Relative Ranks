# leetcode

题目描述（简单）
=============

给你一个长度为 n 的整数数组 score ，其中 score[i] 是第 i 位运动员在比赛中的得分。所有得分都 互不相同 。

运动员将根据得分 决定名次 ，其中名次第 1 的运动员得分最高，名次第 2 的运动员得分第 2 高，依此类推。运动员的名次决定了他们的获奖情况：

名次第 1 的运动员获金牌 "Gold Medal" 。
名次第 2 的运动员获银牌 "Silver Medal" 。
名次第 3 的运动员获铜牌 "Bronze Medal" 。
从名次第 4 到第 n 的运动员，只能获得他们的名次编号（即，名次第 x 的运动员获得编号 "x"）。
使用长度为 n 的数组 answer 返回获奖，其中 answer[i] 是第 i 位运动员的获奖情况。

示例 1：

输入：score = [5,4,3,2,1]
输出：["Gold Medal","Silver Medal","Bronze Medal","4","5"]
解释：名次为 [1st, 2nd, 3rd, 4th, 5th] 。
示例 2：

输入：score = [10,3,8,9,4]
输出：["Gold Medal","5","Bronze Medal","Silver Medal","4"]
解释：名次为 [1st, 5th, 3rd, 2nd, 4th] 。

解法一：排序
==========

```Java
class Solution{
    public String[] findRelativeRanks(int [] scores){
        String [] desc = {"Gold Medal","Silver Medal","Bronze Medal"};
        int [][] arr = new int[score.length][2];
        for (int i = 0;i < score.length;i++) {
            arr[i][0] = score[i];
            arr[i][1] = i;}
        Arrays.sort(arr,(a,b) -> b[0] - a[0]);
        String[] ans = new String[score.length];
        for (int i = 0; i < score.length; ++i) {
            if (i >= 3) {
                ans[arr[i][1]] = Integer.toString(i + 1);
            } else {
                ans[arr[i][1]] = desc[i];}}
        return ans;}}
```

```Python
class Solution:
    desc = ("Gold Medal", "Silver Medal", "Bronze Medal")
    def findRelativeRanks(self,scores:List[int]) -> List[str]:
        ans = [""] * len(str)
        arr = sorted(enumerate(score),key = lambda x : -x[1])
        for i, (idx, _) in enumerate(arr):
            ans[idx] = self.desc[i] if i < 3 else str(i + 1)
        return ans
```

总结：
====

使用二维数组存储分数和下标，排序后查看下标，注意Python的排序方法。
