# leetcode

题目描述（中等）
============

有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。

省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。

给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市
和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。

返回矩阵中 省份 的数量。

示例：输入：isConnected = [[1,1,0],[1,1,0],[0,0,1]]
输出：2

解法一：深度优先遍历
=================

```java
public int findCircleNum(int[][] isConnected) {
    int provinces = isConnected.length;
    boolean [] visited = new boolean[provinces];
    int circle = 0;
    for(int i = 0;i < provinces;i++){
        if(!visites[i]){
            dfs(isConnected,visited,provinces,i);
            circle++;}}
    return circle;}
public void dfs(int [][] isConnected,boolean [] visited,int provinces,int i){
    for(int j = 0;j < provinces;j++){
        if(isConnected[i][j] == 1 && !visited){
            visited[j] = true;
            dfs(isConnected,visited,provinces,j);}}}
```

解法二：广度优先遍历
=================

```java
public int findCircleNum(int[][] isConnected) {
    int provinces = isConnected.length;
    boolean [] visited = new boolean[provinces];
    int circle = 0;
    Queue<Integer> queue = new LinkedList<>();
    for(int i = 0;i < provinces;i++){
        if(!visited[i]){
            queue.offer(i);
            while(!queue.isEmpty()){
                int j = queue.poll();
                visited[j] = true;
                for(int k = 0;k < provinces;k++){
                    if(isConnected[j][k] == 1 && !visited[k]){
                        queue.offer(k);}}}
            circle++;}}
    return circle;}
```

总结：
====

题目意思很简单，不过最容易想到的还是直接遍历，这里需要注意需要检测当前的省份是否已经计算过，所以需要一个visited数组。
