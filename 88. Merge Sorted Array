# leetcode

题目描述（简单）
=============

给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。
说明：1、初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。
2、你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。

解法一：合并后排序
===============

直接调用System.arraycopy()

```java
public void merge(int[] nums1, int m, int[] nums2, int n) {
  System.arraycopy(nums2, 0, nums1, m, n);
  Arrays.sort(nums1);}
```

解法二：双指针，从前往后
====================

```java
public void merge(int[] nums1, int m, int[] nums2, int n) {
  int [] nums1_copy = new int[m];
  System.arraycopy(nums1, 0, nums1_copy, 0, m);
  int p1 = 0;
  int p2 = 0;
  int p = 0;
  while ((p1 < m) && (p2 < n))
    nums1[p++] = (nums1_copy[p1] < nums2[p2]) ? nums1_copy[p1++] : nums2[p2++];
  if (p1 < m)
    System.arraycopy(nums1_copy, p1, nums1, p1 + p2, m + n - p1 - p2);
  if (p2 < n)
    System.arraycopy(nums2, p2, nums1, p1 + p2, m + n - p1 - p2);}
```

解法三：双指针，从后往前
====================

与解法二不同的是，不需要考虑num1长度比num2长度长的情况。

```java
public void merge(int[] nums1, int m, int[] nums2, int n) {
  int p1 = m - 1;
  int p2 = n - 1;
  int p = m + n - 1;
  while ((p1 >= 0) && (p2 >= 0))
    nums1[p--] = (nums1[p1] < nums2[p2]) ? nums2[p2--] : nums1[p1--];
  System.arraycopy(nums2, 0, nums1, 0, p2 + 1);}
```

总结：
====

我没有想到的是复制nums1数组，另外需要考虑两个数组长度不同的情况。
