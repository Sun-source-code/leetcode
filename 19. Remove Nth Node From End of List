# leetcode

题目描述（中等）
============

给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。

示例：
给定一个链表: 1->2->3->4->5, 和 n = 2.
当删除了倒数第二个节点后，链表变为 1->2->3->5.

解法一：两次遍历
=============

第一次遍历得到链表的长度，第二次遍历删除固定的某个节点

```java
public ListNode removeNthFromEnd(ListNode head, int n){
    ListNode dummy = new ListNode(0);
    dummy.next = head;
    int length = 0;
    listNode first = head;
    while(first != null){
        length++;
        first = first.next;}
    length-=n;
    first = dummy;
    while(length > 0){
        length--;
        first = first.next;}
    first.next = first.next.next;
    return dummy.next;}
```

解法二：一次遍历
=============

使用一个指针标记需要删除的节点，注意这里是倒数第N个，所以while(first!=null)

```java
public ListNode removeNthFromEnd(ListNode head, int n) {
    ListNode dummy = new ListNode(0);
    dummy.next = head;
    ListNode first = dummy;
    ListNode second = dummy;
    for(int i = 0;i <= n;i++){
        first = first.next;}
    while(first != null){
        first = first.next;
        second = second.next;
        }
    second.next = second.next.next;
    return dummy.next;}
```

总结：
====

链表的遍历问题，注意哑结点的使用。
