# leetcode

题目描述（中等）
============

给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，
使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。
注意：答案中不可以包含重复的四元组。

示例：给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。
满足要求的四元组集合为：
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]

解法一：双指针
===========

参考15.三数之和，只是在原来的基础上加上一层循环，代码如下
```java
public List<List<Integer> fourSum(int [] nums,int target){
  List<List<Integer>> ans = new ArrayList<>();
  if(nums.length < 4 || nums == null) return ans;
  Arrays.sort(nums);
  for(int i = 0;i < nums.length-3;i++){
    if(i > 0 && nums[i] == nums[i-1]) continue;
    int minl = nums[i] + nums[i+1] + nums[i+2] + nums[i+3];
    if(minl > target) break;
    int maxl = nums[i] + nums[nums.length-1] + nums[nums.length-2] + nums[nums.length-3];
    if(maxl < target) continue;
    for(int j = i+1;j < nums.length-2;j++){
      if(j > i+1 && nums[j] == nums[j-1]) continue;
      int right = nums.length-1;
      int res = target - nums[i];
      for(int left = j+1;left < nums.length-1;left++){
        if(left > j+1  && nums[left] == nums[left-1]) continue;
        while(left < right && nums[j] + nums[right] + nums[left] > res){
          right--;}
        if(left == right) break;
        if(nums[j] + nums[right] + nums[left] == res){
          List<Integer> l = new ArrayList<>();
          l.add(nums[i]);
          l.add(nums[j]);
          l.add(nums[left]);
          l.add(nums[right]);
          ans.add(l);}}}}
  return ans;}
```

总结：
====
总体思路和第15题一样，值得注意的是，这里加入了最小值和最大值的概念，最小值为当前值和他后面三个数之和，这个最小值如果大于target，
那么其他组合也不可能再符合条件了，最大值为当前值和最后三个数之和，如果最大值小于target，那么当前i也不符合条件，注意这里不能直接
停止，而是继续寻找其他组合，使用最小值和最大值的概念可以大大减少计算次数，时间从18ms降到3ms。
