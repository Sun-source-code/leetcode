# leetcode

题目描述（简单）
=============

一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。
在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。

示例 1:

输入: [0,1,3]
输出: 2

解法一：二分查找
=============

```java
class Solution {
    public int missingNumber(int[] nums) {
        int i = 0,j = nums.length - 1;
        while(i < j){
            int m = (i + j) / 2;
            if(nums[m] == m) i = m + 1;
            else j = m - 1;}
        return i;}}
```

解法二：位运算
============

a^a=0；自己和自己异或等于0
a^0=a；任何数字和0异或还等于他自己
a^b^c=a^c^b；异或运算具有交换律
也就是说，让每个数字异或顺序的数字，最后得到的结果就是缺少的数字。

```java
class Solution {
    public int missingNumber(int[] nums) {
        int x = 0;
        for(int i = 0;i < nums.length;i++){
            x ^= nums[i] ^ (x + 1);}
        return x;}}
```


解法三：求和
==========

将数组看成等差数列，求和后依次减去数组。

```java
class Solution {
    public int missingNumber(int[] nums) {
        int length = nums.length;
        int sum = (0 + length) * (length + 1) / 2;
        for (int i = 0; i < length; i++)
            sum -= nums[i];
        return sum;}}
```

总结：
====

除了暴力，方法还是有很多的，最巧妙的就是位运算了。
