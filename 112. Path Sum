# leetcode

题目描述（简单）
============

给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。
说明: 叶子节点是指没有子节点的节点。
示例: 给定如下二叉树，以及目标和 sum = 22
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。

解法一：广度优先遍历
=================

广度优先遍历就是一层一层的查找，无需递归

```java
public boolean hasPathSum(TreeNode root,int sum){
  if(root == null) return false;
  Queue<TreeNode> queNode = new LinkedList<>();
  Queue<Integer> queval = new LinkedList<>();
  queNode.offer(root);
  queval.offer(root.val);
  while(!queNode.isEmpty()){
    TreeNode now = queNode.poll();
    int temp = queval.poll();
    if(now.left == null && now.right == null){
      if(temp == sum){
        return true;}
      continue;}
    if(now.left != null){
      queNode.offer(now.left);
      queval.offer(now.left.val + temp);}
    if(now.right != null){
      queNode.offer(now.right);
      queval.offer(now.right.val + temp);}}
  return false;}
 ```
 
 解法二：深度优先遍历
 =================
 
 深度优先遍历，也就是递归
 
 ```java
 public boolean hasPathSum(TreeNode root,int sum){
  if(root == null){
    return false;}
  if(root.left == null && root.right == null){
    return sum == root.val;}
  return hasPathSum(root.left,sum-root.val) || hasPathSUm(root.right,sum-root.val);
```

总结：
====

这题比较简单，只是两种方法的应用。
  
