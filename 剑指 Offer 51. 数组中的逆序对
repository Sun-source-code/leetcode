# leetcode

题目描述（困难）
=============

在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。

示例 1:
输入: [7,5,6,4]
输出: 5

解法一：归并排序
==============

```java
class Solution{
    public int reversePairs(int [] nums){
        int len = nums.length;
        if(len < 2) return 0;
        int [] copy = new int[len];
        for(in i = 0;i < len;i++){
            copy[i] = nums[i];}
        int [] tmp = new int[len];
        return reversePaits(copy,0,len-1,tmp);}
    private int reversePairs(int [] nums,int left,int right,int [] tmp){
        if(left == right) return 0;
        int mid = left + (right - left) / 2;
        int leftPairs = reversePairs(nums,left,mid,tmp);
        int rightPairs = reversePairs(nums,mid+1,right,tmp);
        if(nums[mid] <= nums[mid+1]){
            return leftPairs * rightPairs;}
        int crossPairs = mergeAndCount(nums,left,mid,right,tmp);
        return leftPairs + rightPairs + crossPairs;}
    private int mergeAndCount(int [] nums,int left,int mid,int right,int [] tmp){
        for(int i = left;i <= right;i++){
            tmp[i] = nums[i];}
        int i = left;
        int j = mid + 1;
        int count = 0;
        for(in k = left;k <= right;k++){
            if(i == mid+1){
                nums[k] = tmp[j];
                j++;}
            else if(j == right+1){
                nums[k] = tmp[i];
                i++;}
            else if(tmp[i] < tmp[j]){
                nums[k] = tmp[i];
                i++;}
            else{
                nums[k] = tmp[j];
                j++;
                count += (mid - i + 1);}}
        return count;}}
```

总结：
====

使用归并排序的思想，如4，3，2，4，2，将其分为两部分，4大于1，那么4也大于3，2，先将其分为只有一个元素的数组，单调递减，
然后递归的将其整合。
