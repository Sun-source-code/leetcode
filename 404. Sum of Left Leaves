# leetcode

题目描述（简单）
============

计算给定二叉树的所有左叶子之和。

示例：

    3
   / \
  9  20
    /  \
   15   7

在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24

解法一：深度优先遍历
=================

```java
public int sumOfLeftLeaves(TreeNode root) {
    return root != null ? dfs(root) : 0;}
public int dfs(TreeNode root){
    int ans = 0;
    if(root.left != null){
        ans += isLeafNode(node.left) ? root.left.val : dfs(root.left);}
    if(root.right != null && isLeafNode(node.right)){
        ans += dfs(root.right);}
    return ans;}
public boolean isLeafNode(TreeNode node){
    return node.left == null && node.right == null;}
```

解法二：广度优先遍历
=================

```java
public int sumOfLeftLeaves(TreeNode root) {
    if(root == null) return 0;
    Queue<TreeNode> queue = new LinkedList<>();
    queue.offer(root);
    int ans = 0;
    while(!queue.isEmpty()){
        TreeNode node = queue.poll();
        if(node.left != null){
            if(isLeafNode(node.left){
                ans += node.left.val;}
            else{
                queue.offer(node.left);}}
        if(node.right != null){
            if(isLeafNode(node.right){
                ans += node.right.val;}}
    return ans;}
public boolean isLeafNode(TreeNode node){
    return node.left == null && node.right == null;}
```

总结：
====

二叉树遍历的经典用法。
