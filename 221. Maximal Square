# leetcode

题目描述（中等）
============

在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。

示例:
输入: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

输出: 4

解法一：暴力法
============

```java
public int maximalSquare(char[][] matrix) {
    int maxSide = 0;
    if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
        return maxSide;}
    int rows = matrix.length,columns = matrix[0].length;
    for(int i = 0;i < rows;i++){
        for(int j = 0;j < columns;j++){
            if(matrix[i][j] == '1'){
                maxSide = Math.max(maxSize,1);}
                int curr = Math.min(rows - i,columns - j);
                for(int k = 1;k < curr;k++){
                    boolean flag = true;
                    if(matrix[i+k][j+k] == '0'){
                        break;}
                    for(int m = 0 = 0;m < k;m++){
                        if(matrix[i+k][j+m] == '0' || matrix[i+m][j+k] == '0'){
                            flag = false;
                            break;}}
                    if(flag){
                        maxSide = Math.max(maxSide,k+1);}
                    else{
                        break;}}}}}
    int maxSquare = maxSide * maxSide;
    return maxSquare;}
```

解法二：动态规划
=============

当前元素为0时，dp(i,j) = 0
当前元素为1时，dp(i,j) = min(dp(i-1,j),dp(i-1,j-1),dp(i,j-1))+1

```java
public int maximalSquare(char[][] matrix) {
    int maxSide = 0;
    if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
        return maxSide;}
    int rows = matrix.length,columns = matrix[0].length;
    int[][] dp = new int[rows][columns];
    for(int i = 0;i < rows;i++){
        for(int j = 0;j < columns;j++){
            if(matrix[i][j] == '1'){
                if(i == 0 || j == 0){
                    dp[i][j] = 1;}
                else{
                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;}
                maxSide = Math.max(maxSide,dp[i][j]);}}}
    int maxSquare = maxSide * maxSide;
    return maxSquare;}
```

空间优化
=======

```java
public int maximalSquare(char[][] matrix) {
    if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
        return maxSide;}
    int rows = matrix.length,columns = matrix[0].length;
    int [] dp = new int[columns+1];
    int maxSide = 0;
    in pre = 0;
    for(int i = 1;i <= rows;i++){
        for(int j = 1;j <= columns;j++){
            int temp = dp[j];
            if(matrix[i-1][j-1] == '0'){
                dp[j] = 0;}
            else{
                dp[j] = Math.min(dp[j-1],Math.min(dp[j],temp))+1;
                maxSide = Math.max(dp[j],maxSide);}
            pre = temp;}}
    return maxSide * maxSide;}
```

总结：
====

这题暴力法反而不好写，动态规划比较好考虑，但是空间优化还是比较难的。
