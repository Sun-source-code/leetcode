# leetcode

题目描述（简单）
=============

给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例：输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 

解法一：动态规划
=============

根据121题给出的状态转移方程，k可以为无穷大，那么k与k-1并无差别，改写状态转移方程为
dp[i][0] = Math.max(dp[i-1][0],dp[i-1][1] + prices[i]);
dp[i][1] = Math.max(dp[i-1][1],dp[i-1][0] - prices[i]);

```java
public int maxProfit(int[] prices) {
  int n = prices.length;
  int dp0 = 0,dp1 = Integer.MIN_VALUE;
  for(int i = 0;i < n;i++){
    dp0 = Math.max(dp0,dp1 + prices[i]);
    dp1 = Math.max(dp1,dp0 - prices[i]);}
  return dp0;}
```

解法二：峰谷法
============

找出每一个峰值的利润最大化

```java
public int maxProfit(int [] prices){
  int i = 0;
  int n = prices.length;
  int valley = prices[0];
  int peak = prices[0];
  int ans = 0;
  while(i < n-1){
    while(i < n-1 && prices[i] >= prices[i+1])
      i++;
    valley = prices[i];
    while(i < n-1 && prices[i] <= prices[i+1])
      i++;
    peak = prices[i];
    ans += peak - valley;}
  return ans;}

解法三：直接一次遍历
=================

```java
public int maxProfit(int[] prices) {
  int maxprofit = 0;
  for (int i = 1; i < prices.length; i++) {
    if (prices[i] > prices[i - 1])
      maxprofit += prices[i] - prices[i - 1];}
        return maxprofit;}
```

总结：
====

这题思路很清晰，直接一次遍历都没问题，但是还是可以思考一下不同的解法，峰谷法是我没有想到的，虽然考虑目标和
一次遍历是差不多的，但也是不一样的思考方向。
