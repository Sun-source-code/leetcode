# leetcode

题目描述（中等）
=============

对于某些字符串 S，我们将执行一些替换操作，用新的字母组替换原有的字母组（不一定大小相同）。
每个替换操作具有 3 个参数：起始索引 i，源字 x 和目标字 y。
规则是如果 x 从原始字符串 S 中的位置 i 开始，那么我们将用 y 替换出现的 x。如果没有，我们什么都不做。
举个例子，如果我们有 S = “abcd” 并且我们有一些替换操作 i = 2，x = “cd”，y = “ffff”，
那么因为 “cd” 从原始字符串 S 中的位置 2 开始，我们将用 “ffff” 替换它。
再来看 S = “abcd” 上的另一个例子，如果我们有替换操作 i = 0，x = “ab”，y = “eee”，
以及另一个替换操作 i = 2，x = “ec”，y = “ffff”，那么第二个操作将不执行任何操作，因为原始字符串中 S[2] = 'c'，与 x[0] = 'e' 不匹配
所有这些操作同时发生。保证在替换时不会有任何重叠： 
S = "abc", indexes = [0, 1], sources = ["ab","bc"] 不是有效的测试用例。

示例：输入：S = "abcd", indexes = [0,2], sources = ["a","cd"], targets = ["eee","ffff"]
输出："eeebffff"
解释：
"a" 从 S 中的索引 0 开始，所以它被替换为 "eee"。
"cd" 从 S 中的索引 2 开始，所以它被替换为 "ffff"。

解法一：模拟
==========

定义一个数组match，其中 match[ix] = j 表示字符串 S 从第 ix 位开始和 sources[j] 匹配，并且会被替换成 target[j]

```java
public String findReplaceString(String S, int[] indexes, String[] sources, String[] targets){
  int n = S.length();
  int [] match = new int[n];
  Arrays.fill(match,-1);
  for(int i = 0;i < indexes.length;i++){
    int ix = indexes[i];
    if(S.substring(ix,ix+sources[i].length()).equals(sources[i])){
      match[ix] = i;}}
  StringBuilder ans = new StringBuilder();
  int ix = 0;
  while(ix < n){
    if(match[ix] >= 0){
      ans.append(target[match[ix]]);
      ix += sources[match[ix]].length();}
    else{
      ans.append(S.charAt(ix++));}}
  return ans.toString();}
```

总结：
====

这题题目比较长，也比较不好理解，但是理解之后就是检索字符串和添加字符的过程，需要注意match数组的应用。
