# leetcode

题目描述（中等）
============

在整数数组 nums 中，是否存在两个下标 i 和 j，使得 nums [i] 和 nums [j] 的差的绝对值小于等于 t ，且满足 i 和 j 的差的绝对值也小于等于 ķ 。

如果存在则返回 true，不存在返回 false。

示例 1:

输入: nums = [1,2,3,1], k = 3, t = 0
输出: true

解法一：线性搜索（超时）
===================

```java
public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
    for(int i = 0;i < nums.length;i++){
        for(int j = Math.max(i - k,0);j < nums.length;j++){
            if(Math.abs(nums[i] - nums[j]) <= t){
                return true;}}}
    return false;}
```

很显然，直接二次循环超时

解法二：二叉搜索树
===============

窗口中元素是无序的，因此我们需要维护一个能够支持插入，搜索，删除的动态的数据结构，也就是自平衡二叉树。

public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
    TreeSet<Integer> set = new TreeSet<>();
    for(int i = 0;i < nums.length;i++){
        Integer s = set.ceiling(nums[i]);
        if(s != null && s <= nums[i] + t){
            return true;}
        Integer g = set.ceiling(nums[i]);
        if(g != null && nums[i] <= g + t){
            return true;}
        set.add(nums[i]);
        if(set.size() > k){
            set.remove(nums[i - k]);}}
    return false;}
```

解法三：桶
=========

类比桶排序，让x/w成为桶的标签，每个桶包含的区间是t，那么任何不在同一个桶或者相邻桶的两个元素的距离一定大于t。

```java
public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
    if(t < 0) return false;
    Map<Long,Long> map = new HashMap<>();
    Long w = (Long) t + 1;
    for(int i = 0;i < nums.length;i++){
        Long m = getId(nums[i],w);
        if(map.containsKey(m)){
            return true;}
        if(map.containsKey(m-1) && Math.abs(nums[i] - map.get(m-1)) < w){
            return true;}
        if(map.containsKey(m+1) && Math.abs(nums[i] - map.get(m+1)) < w){
            return true;}
        map.put(m,(Long)nums[i]);
        if(i > k) map.remove(getId(nums[i-k],m);}
    return false;}
```

总结：
====

结果好像只有最后一个方法能通过，不得不说后面两种思路都非常好，关键在于建立合适的桶标签和区间，找到对应的桶即可。
