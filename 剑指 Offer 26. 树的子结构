# leetcode

题目描述（中等）
============

输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)
B是A的子结构， 即 A中有出现和B相同的结构和节点值。

例如:
给定的树 A:

     3
    / \
   4   5
  / \
 1   2
给定的树 B：

   4 
  /
 1
返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。

示例 1：
输入：A = [1,2,3], B = [3,1]
输出：false

解法一：深度优先遍历
=================

1、先遍历树A的中的每个节点n
2、判断以n节点为根节点的树是否与树B相等
停止条件：
1、当节点B为空，说明匹配完成，返回true
2、当节点A为空，说明节点B已经越过节点A，匹配失败，返回false
3、当节点A和节点B的值不相等，匹配失败，返回false

```java
class Solution {
    public boolean isSubStructure(TreeNode A, TreeNode B) {
        return (A != null && B != null) && (recur(A,B) || isSubStructure(A.left,B) || isSubStructure(A.right,B);}
    public boolean recur(TreeNode A,TreeNode B){
        if(B == null) return true;
        if(A == null || A.val != B.val) return false;
        return recur(A.left,B.left) && recur(A.right,B.right);}}
```

解法二：广度优先遍历
=================

```java
class Solution {
    public boolean isSubStructure(TreeNode A, TreeNode B) {
        if(A == null || B == null) return false;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(A);
        while(!queue.isEmpty()){
            TreeNode node = queue.poll();
            if(node.val == B.val && compare(node,B)) return true;
            if(node.left != null) queue.offer(node.left);
            if(node.right != null) queue.offer(node.right);}
        return false;}
    public boolean compare(TreeNode A,TreeNode B){
        if(B == null) return true;
        if(A == null) return false;
        return A.val == B.val && compare(A.left,B.left) && compare(A.right,B.right);}}
```

总结：
====

常规的深度优先遍历和广度优先遍历，深度优先比较容易想到，速度也更快些。
