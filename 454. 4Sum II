# leetcode

题目描述（中等）
============

给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。

为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。
所有整数的范围在 -228 到 228 - 1 之间，最终结果不会超过 231 - 1 。

例如:

输入:
A = [ 1, 2]
B = [-2,-1]
C = [-1, 2]
D = [ 0, 2]

输出:
2

解释:
两个元组如下:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0

解法一：哈希表
============

```java
public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
    Map<Integer, Integer> countAB = new HashMap<Integer, Integer>();
    for (int u : A) {
        for (int v : B) {
            countAB.put(u + v, countAB.getOrDefault(u + v, 0) + 1);}}
    int ans = 0;
    for (int u : C) {
        for (int v : D) {
            if (countAB.containsKey(-u - v)) {
                ans += countAB.get(-u - v);}}}
    return ans;}
```

解法二：降维+初始容量+避免类型转换
=============================

```java
private static class Node {
    int value;
    int count;
    Node next;
    public Node(int value) {
        this.value = value;
        this.count = 1;}
    public Node(int value, Node next) {
        this.value = value;
        this.count = 1;
        this.next = next;}}

private static class Map {
    Node[] table;
    public Map(int initalCapacity) {
        if (initalCapacity < 16) {
            initalCapacity = 16;
        } else {
            initalCapacity = Integer.highestOneBit(initalCapacity - 1) << 1;}
        table = new Node[initalCapacity];}
    private int hash(int value) {
        if (value < 0) {
            value = -value;}
        int h;
        return (value == 0) ? 0 : (h = value) ^ (h >>> 16);}
    public void put(int value) {
        int tableIndex = hash(value) & table.length - 1;
        Node head = table[tableIndex];
        if (head == null) {
            table[tableIndex] = new Node(value);
            return;}
        Node cur = head;
        while (cur != null) {
            if (cur.value == value) {
                cur.count++;
                return;}
            cur = cur.next;}
        table[tableIndex] = new Node(value, head);}
    public int getCount(int value) {
        int tableIndex = hash(value) & table.length - 1;
        Node head = table[tableIndex];
        if (head == null) {
            return 0;}
        Node cur = head;
        while (cur != null) {
            if (cur.value == value) {
                return cur.count;}
            cur = cur.next;}
        return 0;}}
public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
    // 避免扩容, 初始化一个最大初始容量
    Map abMap = new Map(A.length * B.length);
    for (int a : A) {
        for (int b : B) {
            abMap.put(a + b);}}
    int res = 0;
    for (int c : C) {
        for (int d : D) {
            res += abMap.getCount(-c - d);}}
    return res;}
```

总结：
====

思路基本上是一样的，不过方法二相当于重写了Map集合的实现，去除了一些复杂的变化，减少时间。
