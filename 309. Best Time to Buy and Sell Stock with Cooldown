# leetcode

题目描述（中等）
============

给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。
设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
1、你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
2、卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。

解法一：动态规划
=============

sell之后会空出一天，将i-1改成i-2，状态转移方程为：
dp[i][0] = Math.max(dp[i-1][0],dp[i-1][1] + prices[i];
dp[i][1] = Math.max(dp[i-1][1],dp[i-2][1] - prices[i];

```java
public int maxProfit(int [] prices){
  int n = prices.length;
  int dp0 = 0,dp1 = Integer.MIN_VALUE,dppre = 0;
  for(int i = 0;i < n;i++){
    int temp = dp0;
    dp0 = Math.max(dp0,dp1+prices[i]);
    dp1 = Math.max(dp1,dppre+prices[i]);
    dppre = temp;}
  return dp0;}
```
注意要求dp[i-2][1]，需要使用一个辅助变量来记录前一个位置的值

总结：
====

同样的只要稍微修改下状态转移方程即可。
