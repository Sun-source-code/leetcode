# leetcode

题目描述（简单）
============

给定一个二叉树，判断它是否是高度平衡的二叉树。
本题中，一棵高度平衡二叉树定义为：
一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。

示例 1:
给定二叉树 [3,9,20,null,null,15,7]

    3
   / \
  9  20
    /  \
   15   7
返回 true 。

解法一：自顶向下的遍历
==================

```java
public boolean isBalanced(TreeNode root) {
    if(root == null){
        return true;
    }else{
        return Math.abs(height(root.left)-height(root.right)) <= 1 && isBalanced(root.left) && isBalanced(root.right);}}
public int height(TreeNode root){
    if(root == null){
        return 0;
    }else{
        return Math.max(height(root.left),height(root.right)) + 1;}
```

解法二：自底向上的遍历
==================

```java
public boolean isBalanced(TreeNode root){
    return height(root) >= 0;}
public int height(TreeNode root){
    if(root == null) return 0;
    int leftHeight = height(root.left);
    int rightHeight = height(root.right);
    if(leftHeight == -1 || rightHeight == -1 || Math.abs(leftHeight - rightHeight >= 2){
        return -1;}
    else{
        return Math.max(leftHeight,rightHeight)+1;}
```

总结：
====

二叉树高度的常用两种方法。
