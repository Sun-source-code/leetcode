# leetcode

题目描述（简单）
=============

给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 
返回以该节点为根的子树。 如果节点不存在，则返回 NULL。
例如：给定二叉搜索树:
        4
       / \
      2   7
     / \
    1   3
和值: 2

你应该返回如下子树:
      2     
     / \   
    1   3

解法一：递归
==========

```Java
public TreeNode searchBST(TreeNode root, int val) {
  if(root == null || root.val == val) return root;
  return val < root.val ? searchBST(root.left,val) : searchBST(root.right,val);}
```

```Python
class Solution:
    def searchBST(self, root: TreeNode, val: int) -> TreeNode:
        if root is None:
            return None
        if val == root.val:
            return root
        return self.searchBST(root.left if val < root.val else root.right,val)
```

解法二：迭代
==========

```Java
public TreeNode searchBST(TreeNode root,int val){
  while(root != null || val != root.val){
    root = val < root.val ? root.left : root.right;}
  return root;}
```

```Python
class Solution:
    def searchBST(self, root: TreeNode, val: int) -> TreeNode:
        while root:
            if val == root.val:
                return root
            root == root.left if val < root.val else root.right
        return None
```

总结：
====

最常规方法，递归和迭代，Python解法迭代比递归快很多。
