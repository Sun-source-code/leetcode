# leetcode

题目描述（简单）
=============

给定两个二叉树，编写一个函数来检验它们是否相同。

如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。

示例：
输入:       1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]
        
输出: true

解法一：深度优先遍历
=================

如果两个二叉树都为空，返回true，如果一个为空，另一个不为空，返回false，如果两个二叉树都不为空，
则递归向下查询

```java
public boolean isSameTree(TreeNode p, TreeNode q) {
    if(p == null && q == null){
        return true;}
    else if(p == null || q == null){
        return false;}
    else if(p.val != q.val){
        return false;}
    return isSameTree(p.left,q.left) && isSameTree(p.right,q.right);}
```

解法二：广度优先遍历
=================

1、比较两个节点的值，如果节点的值不同二叉树一定不同
2、比较两个节点子节点是否为空，如果只有一个节点的左子节点为空，或只有一个节点的右子节点为空，二叉树一定不同
3、将两个节点的非空子节点按照顺序加入到队列中

```java
public boolean isSameTree(TreeNode p, TreeNode q) {
    if(p == null && q == null){
        return true;}
    else if(p == null || q == null){
        return false;}
    Queue<TreeNode> queue1 = new LinkedList<>();
    Queue<TreeNode> queue2 = new LinkedList<>();
    queue1.offer(p);
    queue2.offer(q);
    while(!queue1.isEmpty() && !queue2.isEmpty()){
        TreeNode node1 = queue1.poll();
        TreeNode node2 = queue2.poll();
        if(node1.val != node2.val){
            return false;}
        TreeNode left1 = node1.left,right1 = node1.right,left2 = node2.left,right2 = node2.right;
        if(left1 == null ^ left2 == null){
            return false;}
        if(right1 == null ^ right2 == null){
            return false;}
        if (left1 != null) {
            queue1.offer(left1);}
        if (right1 != null) {
            queue1.offer(right1);}
        if (left2 != null) {
            queue2.offer(left2);}
        if (right2 != null) {
            queue2.offer(right2);}}
    return queue1.isEmpty() && queue2.isEmpty();}
```

总结：
====

二叉树的遍历问题，也是常规的深度和广度两种方法
