# leetcode

题目描述（简单）
============

输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。

示例 1:
输入: n = 1
输出: [1,2,3,4,5,6,7,8,9]

解法一：全排列
============

```java
class Solution {
    public int[] printNumbers(int n) {
        int end = (int) Math.pow(10,n)-1;
        int [] ans = new int[end];
        for(int i = 0;i < end;i++){
            ans[i] = i+1;}
        return ans;}}
```

实际上，这题的考点是大数打印，使用全排列。

```java
class Solution {
    int [] res;
    int nine = 0,count = 0,start,n;
    char [] num,loop = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
    public int[] printNumbers(int n){
        this.n = n;
        res = new int[(int)Math.pow(10,n)-1];
        num = new char[n];
        start = n - 1;
        dfs(0);
        return res;}
    public void dfs(int x){
        if(x == n){
            String s = String.valueOf(num).substring(start);
            if(!s.equals("0")) res[count++] = Integer.parseInt(s);
            if(n - start == nine) start--;
            return;}
        for(char c : loop){
            if(c == '9') nine++;
            num[x] = c;
            dfs(i+1);}
        nine--;}}
```

总结：
====

这题的考点主要在大数的计算，使用string进行存储，尤其需要注意进位操作以及001这样的数需要进行的去0操作。
