# leetcode

题目描述（中等）
============

给定一个 没有重复 数字的序列，返回其所有可能的全排列。

示例:

输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

解法一：回溯
==========

```java
public List<List<Integer>> permute(int[] nums) {
    List<List<Integer>> res = new ArrayList<>();
    List<Integer> output = new ArrayList<>();
    for(int num : nums){
        output.add(num);}
    int n = nums.length;
    back(n,output,res,0);
    return res;}

private void back(int n,List<Integer> output,List<List<Integer>> res,int first){
    if(first == n) res.add(new ArrayList<Integer>(output));
    for(int i = first;i < n;i++){
        Collections.swap(output,first,i);
        back(n,output,res,first+1);
        Collections.swap(output,first,i);}}
```

总结：
====

我没有想到的一点是Collections.swap，一直没想到怎么保证选中某一个数，其他就是回溯方法的使用了
