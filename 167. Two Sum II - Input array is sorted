# leetcode

题目描述（简单）
============

给定一个已按照‘升序排列’的有序数组，找到两个数使得它们相加之和等于目标数。
函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。
说明：1、返回的下标值（index1 和 index2）不是从零开始的。
2、你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。

示例：输入: numbers = [2, 7, 11, 15], target = 9
输出: [1,2]
解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。

解法一：双指针
============

因为给定的是已经按照升序排列的数组，所以直接计算首尾元素之和，如果结果大于target，则右边数减小，
如果结果小于target，则左边数增大，直到等于target
```java
public int [] twoSum(int [] numbers,int target){
  if(numbers == null) return null;
  int left = 0,right = numbers.length-1;
  while(left < right){
    int sum = numbers[left] + numbers[right];
    if(sum < target) left++;
    else if(sum > target) right--;
    else return new int[] {left+1,right+1};}
  return null;}
```

解法二：二分查找
=============

思路和双指针一样，只是不像双指针一样层层递进，这里直接缩小一半的查询范围
```java
public int [] twoSum(int [] numbers,int target){
  if(numbers == null || numbers.length < 2 || target < numbers[0] + numbers[1] ||
    target > numbers[numbers.length-1] + numbers[numbers.length-2]) return null;
  int mid = 0;
  if(target - numbers[0] >= numbers[numbers.length-1]){
    mid = numbers[numebrs.length-1];}
  else{
    int i = 0,j = numbers.length-1,temp = target - numbers[0];
    while(i <= j){
      mid = (i+j) / 2;
      if(numbers[mid] > temp){
        j = mid - 1;}
      else if(numbers[mid] < temp){
        i = mid + 1;}
      else break;}
    if(numbers[mid] > temp){
      mid -= 1;}}
  for(int i = 0,j = mid;i < j;){
    if(numbers[i] + numbers[j] > target){
      --j;} 
    else if(numbers[i] + numbers[j] < target){
      ++i;} 
    else{
      return new int[]{i +  1, j + 1};}}
  return null;}

```

总结：我原本以为二分查找与双指针差不多，实际上，二分查找还是省下了不少的步骤，速度也有所提高，不过过程有些复杂，
需要分析很多种情况，尤其是mid的位置需要特别注意
