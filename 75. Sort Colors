# leetcode

题目描述（中等）
============

给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。

此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。

注意:
不能使用代码库中的排序函数来解决这道题。

示例:
输入: [2,0,2,1,1,0]
输出: [0,0,1,1,2,2]

解法一：单指针
===========

两次遍历，第一次将为0的元素放在前面，第二次将为1的元素放在0的后面

```java
public void sortColors(int[] nums) {
    int n = nums.length;
    int ptr = 0;
    for(int i = 0;i < nums.length;i++){
        if(nums[i] == 0){
            int temp = nums[i];
            nums[i] = nums[ptr];
            nums[ptr] = temp;
            ptr++;}}
    for(int i = ptr;i < nums.length;i++){
        if(nums[i] == 1){
            int temp = nums[i];
            nums[i] = nums[ptr];
            nums[ptr] = temp;
            ptr++;}}}
```

解法二：双指针
===========

public void sortColors(int[] nums) {
    int n = nums.length;
    int p0 = 0, p1 = 0;
    for (int i = 0; i < n; ++i) {
        if (nums[i] == 1) {
            int temp = nums[i];
            nums[i] = nums[p1];
            nums[p1] = temp;
            ++p1;
        } else if (nums[i] == 0) {
            int temp = nums[i];
            nums[i] = nums[p0];
            nums[p0] = temp;
            if (p0 < p1) {
                temp = nums[i];
                nums[i] = nums[p1];
                nums[p1] = temp;}
            ++p0;
            ++p1;}}
```

解法三：双指针
============

public void sortColors(int[] nums) {
    int n = nums.length;
    int p0 = 0, p2 = n - 1;
    for (int i = 0; i <= p2; ++i) {
        while (i <= p2 && nums[i] == 2) {
            int temp = nums[i];
            nums[i] = nums[p2];
            nums[p2] = temp;
            --p2;}
        if (nums[i] == 0) {
            int temp = nums[i];
            nums[i] = nums[p0];
            nums[p0] = temp;
            ++p0;}}}
```

总结：
====

就题目要求来说，随便一个排序算法都可以实现，不过这里只涉及0，1，2三种元素，也就没必要全部排序，这里使用的两个
双指针的思想很棒
            
