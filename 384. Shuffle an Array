# leetcode

给你一个整数数组 nums ，设计算法来打乱一个没有重复元素的数组。

实现 Solution class:

Solution(int[] nums) 使用整数数组 nums 初始化对象
int[] reset() 重设数组到它的初始状态并返回
int[] shuffle() 返回数组随机打乱后的结果

示例：
输入
["Solution", "shuffle", "reset", "shuffle"]
[[[1, 2, 3]], [], [], []]
输出
[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]

解释
Solution solution = new Solution([1, 2, 3]);
solution.shuffle();    // 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。例如，返回 [3, 1, 2]
solution.reset();      // 重设数组到它的初始状态 [1, 2, 3] 。返回 [1, 2, 3]
solution.shuffle();    // 随机返回数组 [1, 2, 3] 打乱后的结果。例如，返回 [1, 3, 2]

解法一：暴力

```java
class Solution{
    int [] nums;
    int [] original;
    public Solution(int [] nums) {
        this.nums = nums;
        original = new int[nums.length];
        System.arraycopy(nums,0,original,0,nums.length);}
    public int[] reset() {
        System.arraycopy(original,0,num,0,nums.length);
        return nums;}
    public int[] shuffle() {
        int [] shuffled = new int[nums.length];
        List<Integer> list = new ArrayList<>();
        for(int i = 0;i < nums.length;i++){
            list.add(nums[i]);}
        Random random = new Random();
        for(int i = 0;i < nums.length;i++){
            int j = random.nextInt(list.size());
            shuffled[i] = list.remove(j);}
        System.arraycopy(shuffled,0,nums,0,nums.length);
        return nums;}}
```

```Python
class Solution:
    def _init_(self,nums:List[int]):
        self.nums = nums
        self.original = nums.copy()
    def reset(self) -> List[int]:
        self.nums = self.original.copy()
        return original
    def shuffle(self) -> List[int]:
        shuffled = [0] * len(self.nums)
        for i in range(len(self.nums)):
            j = random.randrange(len(self.nums))
            shuffled[i] = self.nums.pop(j)
        self.nums = shuffled
        return self.nums
```

解法二：洗牌算法

```Java
class Solution{
    int [] nums;
    int [] original;
    public Solution(int [] nums) {
        this.nums = nums;
        this.original = new int[nums.length];
        System.arraycopy(nums,0,original,0,nums.length);}
    public int[] reset() {
        System.arraycopy(original,0,nums,0,nums.length);
        return nums;}
    public int[] shuffle() {
        Random random = new Random();
        for(int i = 0;i < nums.length;i++){
            int j = i + random.nextInt(nums.length - i);
            int temp = nums[j];
            nums[i] = nums[j];
            nums[j] = temp;}
        return nums;}}
```

```Python
class Solution:
    def _init_(self,nums:List[int]):
        self.nums = nums
        self.original = nums.copy()
    def reset(self) -> List[int]:
        self.nums = self.original.copy()
        return self.nums
    def shuffled(self) -> List[int]:
        for i in range(len(self.nums)):
            j = random.randrange(i,self.nums)
            self.nums[i],self.nums[j] = self.nums[j],self.nums[i]
         return self.nums

总结：
====

第一种解法就是将所有数据放入列表，再随机取出，相比之下第二种解法则是随机取一个，再与后面的进行交换，无论第一个是什么元素，都可以满足随机性，
复杂度大大降低，是个很好的思路。
