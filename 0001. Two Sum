# leetcode

题目描述
=======

给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

示例：
给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

解法一：暴力法
============

直接双重遍历，得到两个整数的下标，如果没有解答，则抛出异常，直接上代码。

```java
public int [] twoSum(int [] nums,int target){
    for(int i = 0;i < nums.length;i++){
        int ans = target - nums[i];
        for(int j = 1;j < nums.length;j++){
            if(nums[j] == ans){
            return new int[]{i,j};}}}
        throw new IllegalArgumentException("No two sum solution");}
```
```python3
class solution:
    def twoSum(self,nums:List[int],target:int) -> List[int]:
        n = len(nums)
        for i in range(n):
            for j in range(i+1,n):
                if nums[i] + nums[j] == target:
                    return [i,j]
        return []
```
时间复杂度：O(n^2)

解法二：两遍哈希表
===============

两次迭代，第一次将数组的下标和对应的下标存储到哈希表中，第二次检查每个元素对应的目标元素是否存在于哈希表中，注意对应的目标不能是本身。

```java
public int [] twoSum(int [] nums,int target){
    Map<Integer,Integer> map = new HashMap<>();
    for(int i = 0;i < nums.length;i++){
        map.put(nums[i],i);}
     for(int i = 0;i < nums.length;i++){
        int ans = target - nums[i];
        if(map.containsKey(ans) && map.get(ans) != i){
            return new int[]{i,map.get(ans)};}}
        throw new IllegalArgumentException("No two sum solution");}
```
时间复杂度：O(n)

解法三：一遍哈希表
===============

在插入数据的同时，检查这个元素对应的目标是否已经插入到哈希表中。

```java
public int [] twoSum(int [] nums,int target){
  Map<Integer,Integer> map = new HashMap<>();
  for(int i = 0;i < nums.length;i++){
    int ans = target - nums[i];
    if(map.containsKey(ans) && map.get(ans) != i){
      return new int[] {i,map.get(ans)};}
    map.put(nums[i],i);}
  throw new IllegalArgumentException("No two sum solution");}
```
```python3
class Solution:
    def twoSum(self,nums:List[int],target:int) -> List[int]:
        hashtable = dict()
        for i,num in enumerate(nums):
            if target - num in hashtable:
                return [hashtable[target - num],i]
            hashtable[nums[i]] = i
        return []
```

时间复杂度：O(n)
注意：输出时i和map.get(ans)的位置不能更换，i是后面的元素，map.get(ans)是前面的元素。

总结：
====

这道题思路还是比较清晰的，需要注意的是两遍哈希表和一遍哈希表获取的i位置不同，输出时也有所变化。
