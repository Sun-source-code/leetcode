# leetcode

题目描述（困难）
=============

给定一组唯一的单词， 找出所有不同 的索引对(i, j)，使得列表中的两个单词， words[i] + words[j] ，可拼接成回文串。

示例 :
输入: ["abcd","dcba","lls","s","sssll"]
输出: [[0,1],[1,0],[3,2],[2,4]] 
解释: 可拼接成的回文串为 ["dcbaabcd","abcddcba","slls","llssssll"]

解法一：枚举前缀和后缀（字典树）
=========================

1、len1=len2，此时s1是s2的翻转
2、len1>len2，可以将s1拆分为t1和t2两部分，其中t1是s2的翻转，t2是一个回文串
3、len1<len2，可以将s2拆分为t1和t2两部分，其中t2是s1的翻转，t1是一个回文串

```java
class Node {
    int[] ch = new int[26];
    int flag;
    public Node() {
        flag = -1;}}

    List<Node> tree = new ArrayList<Node>();
    public List<List<Integer>> palindromePairs(String[] words) {
        tree.add(new Node());
        int n = words.length;
        for (int i = 0; i < n; i++) {
            insert(words[i], i);
        }
        List<List<Integer>> ret = new ArrayList<List<Integer>>();
        for (int i = 0; i < n; i++) {
            int m = words[i].length();
            for (int j = 0; j <= m; j++) {
                if (isPalindrome(words[i], j, m - 1)) {
                    int leftId = findWord(words[i], 0, j - 1);
                    if (leftId != -1 && leftId != i) {
                        ret.add(Arrays.asList(i, leftId));}}
                if (j != 0 && isPalindrome(words[i], 0, j - 1)) {
                    int rightId = findWord(words[i], j, m - 1);
                    if (rightId != -1 && rightId != i) {
                        ret.add(Arrays.asList(rightId, i));}}}}
        return ret;}

    public void insert(String s, int id) {
        int len = s.length(), add = 0;
        for (int i = 0; i < len; i++) {
            int x = s.charAt(i) - 'a';
            if (tree.get(add).ch[x] == 0) {
                tree.add(new Node());
                tree.get(add).ch[x] = tree.size() - 1;}
            add = tree.get(add).ch[x];}
        tree.get(add).flag = id;}

    public boolean isPalindrome(String s, int left, int right) {
        int len = right - left + 1;
        for (int i = 0; i < len / 2; i++) {
            if (s.charAt(left + i) != s.charAt(right - i)) {
                return false;}}
        return true;}

    public int findWord(String s, int left, int right) {
        int add = 0;
        for (int i = right; i >= left; i--) {
            int x = s.charAt(i) - 'a';
            if (tree.get(add).ch[x] == 0) {
                return -1;}
            add = tree.get(add).ch[x];}
        return tree.get(add).flag;}
```

解法二：哈希表
============

基本思路和使用字典树一样，只是使用哈希表来存储字符串

```java
List<String> wordsRev = new ArrayList<>();
Map<Integer,Integer> indices = new HashMap<>();
public List<List<Integer>> palindromePairs(String[] words) {
    int n = words.length;
    for(String word : words){
        wordsRev.add(new StringBuffer(word).reverse().toString());}
    for (int i = 0; i < n; ++i) {
        indices.put(wordsRev.get(i), i);}
    List<List<Integer>> ret = new ArrayList<List<Integer>>();
    for (int i = 0; i < n; i++) {
        String word = words[i];
        int m = words[i].length();
        if (m == 0) {
            continue;}
        for (int j = 0; j <= m; j++) {
            if (isPalindrome(word, j, m - 1)) {
               int leftId = findWord(word, 0, j - 1);
               if (leftId != -1 && leftId != i) {
                    ret.add(Arrays.asList(i, leftId));}}
            if (j != 0 && isPalindrome(word, 0, j - 1)) {
               int rightId = findWord(word, j, m - 1);
               if (rightId != -1 && rightId != i) {
                    ret.add(Arrays.asList(rightId, i));}}}}
    return ret;}

    public boolean isPalindrome(String s, int left, int right) {
        int len = right - left + 1;
        for (int i = 0; i < len / 2; i++) {
            if (s.charAt(left + i) != s.charAt(right - i)) {
                return false;}}
        return true;}

    public int findWord(String s, int left, int right) {
        return indices.getOrDefault(s.substring(left, right + 1), -1);}
```

总结：
====

可以参考第5题，最长回文子串，还是要记住字典树的使用方法。
