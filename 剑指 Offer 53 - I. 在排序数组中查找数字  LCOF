# leetcode

题目描述（简单）
=============

统计一个数字在排序数组中出现的次数。
示例：
输入: nums = [5,7,7,8,8,10], target = 8
输出: 2

解法一：暴力
==========

```java
public int search(int [] nums,int target){
    int count = 0;
    for(int i = 0;i < nums.length;i++){
        if(nums[i] == target){
            count++;}}
    return count;
```

解法二：二分查找
=============

二分查找，找到当前target的边界和target前一个字符的边界

```java
public int search(int[] nums, int target) {
    int i = 0,j = nums.length;
    while(i <= j){
        int m = (i + j) / 2;
        if(nums[m] <= target) i = m + 1;
        else j = m - 1;}
    int right = i;
    if(j >= 0 && nums[j] != target) return 0;
    i = 0,j = nums.length - 1;
    while(i <= j){
        int m = (i + j) / 2;
        if(nums[m] < target) i = m + 1;
        else j = m - 1;}
    int left = j;
    return left - right - 1;
```

优化：
====

将前一个方法的查找过程封装成一个方法

```java
public int search(int[] nums, int target) {
    return helper(nums, target) - helper(nums, target - 1);}
private int helper(int[] nums, int tar) {
    int i = 0, j = nums.length - 1;
    while(i <= j) {
        int m = (i + j) / 2;
        if(nums[m] <= tar) i = m + 1;
        else j = m - 1;}
    return i;}
```

总结：
====

题目意思很简单，但是利用二分这里还是运用了小技巧的
