# leetcode

题目描述（简单）
============

给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。

示例:
输入: "abab"
输出: True
解释: 可由子字符串 "ab" 重复两次构成。

解法一：枚举
==========

长度为n的字符串s可以由多个长度为n1的字符串s1构成，那么n一定是n1的倍数，s1一定是s的前缀

```java
public boolean repeatedSubstringPattern(String s) {
    int n = s.length();
    for(int i = 1;i*2 <= n;i++){
        if(n % 2 == 0){
            boolean match = true;
            for(int j = i;j < n;j++){
                if(s.charAt(j) != s.charAt(j-i)){
                    match = false;
                    break;}}
            if(match) return true;}}}
    return false;}
```

解法三：字符串匹配
===============

将两个s组合在一起，去掉首字母和尾字母，得到的字符串如果包含原字符串，则返回true

```java
public boolean repeatedSubstringPattern(String s) {
    return (s+s).indexOf(s,1) != s.length();}
```

解法三：KMP算法
=============

```java
public boolean repeatedSubstringPattern(String s) {
    return kmp(s + s, s);}
    
public boolean kmp(String query, String pattern) {
    int n = query.length();
    int m = pattern.length();
    int[] fail = new int[m];
    Arrays.fill(fail, -1);
    for (int i = 1; i < m; ++i) {
        int j = fail[i - 1];
        while (j != -1 && pattern.charAt(j + 1) != pattern.charAt(i)) {
            j = fail[j];}
        if (pattern.charAt(j + 1) == pattern.charAt(i)) {
            fail[i] = j + 1;}}
        int match = -1;
        for (int i = 1; i < n - 1; ++i) {
            while (match != -1 && pattern.charAt(match + 1) != query.charAt(i)) {
                match = fail[match];}
            if (pattern.charAt(match + 1) == query.charAt(i)) {
                ++match;
                if (match == m - 1) {
                    return true;}}}
        return false;}
```

KMP算法优化
==========

```java
public boolean repeatedSubstringPattern(String s) {
    return kmp(s);}

public boolean kmp(String pattern) {
    int n = pattern.length();
    int[] fail = new int[n];
    Arrays.fill(fail, -1);
    for (int i = 1; i < n; ++i) {
        int j = fail[i - 1];
        while (j != -1 && pattern.charAt(j + 1) != pattern.charAt(i)) {
            j = fail[j];}
        if (pattern.charAt(j + 1) == pattern.charAt(i)) {
            fail[i] = j + 1;}}
    return fail[n - 1] != -1 && n % (n - fail[n - 1] - 1) == 0;}
```

总结：
====

最简单的方法应该还是方法一，KMP算法作为计算公共子串的方法，也需要好好熟悉。        
