# leetcode

题目描述（困难）
============

给定长度分别为 m 和 n 的两个数组，其元素由 0-9 构成，表示两个自然数各位上的数字。
现在从这两个数组中选出 k (k <= m + n) 个数字拼接成一个新的数，要求从同一个数组中取出的数字保持其在原数组中的相对顺序。

求满足该条件的最大数。结果返回一个表示该最大数的长度为 k 的数组。

说明: 请尽可能地优化你算法的时间和空间复杂度。

示例 :
输入:
nums1 = [3, 4, 6, 5]
nums2 = [9, 1, 2, 5, 8, 3]
k = 5
输出:
[9, 8, 6, 5, 3]

解法一：单调栈
============

可以分成两个步骤，第一从nums1和nums2中获取x和y长度的最大子序列，其中x+y=k，第二步合并。

```java
public int[] maxNumber(int[] nums1, int[] nums2, int k) {
    int m = nums1.length;
    int n = nums2.length;
    int [] maxSubsequence = new int[k];
    int start = Math.max(0,k-n);
    int end = Math.min(k,m);
    for(int i = start,i <= end;i++){
        int [] subsequence1 = maxSubsequence(nums1,i);
        int [] subsequence2 = maxSubsequence(nums2,k-i);
        int [] curMaxSubsequence = merge(subsequence1,subsequence2);
        if(compare(curMaxSubsequence,0,maxSubsequence,0) > 0){
            System.arraycopy(curMaxSubsequence,0,maxSubsequence,0,k);}}
    return maxSubsequence;}
public int [] maxSubsequence(int [] nums,int k){
    int length = nums.length;
    int [] stack = new int[k];
    int top = -1;
    int remain = length - k;
    for(int i = 0;i < length;i++){
        int num = nums[i];
        while(top >= 0 && stack[top] < num && remain > 0){
            top--;
            remain--;}
        if(top < k - 1){
            stack[++top] = num;}
        else{
            remain--;}}
    return stack;}
public int [] merge(int [] sequence1,int [] sequence2){
    int x = sequence1.length,y = sequence2;
    if(x == 0){
        return sequence2;}
    if(y == 0){
        return sequence1;}
    int mergeLength = x + y;
    int [] merged = new int[mergeLength];
    int index1 = 0,index2 = 0;
    for(int i = 0;i < mergeLength;i++){
        if(compare(sequence1,index1,sequence2,index2) > 0){
            merged[i] = sequence1[index1++];}
        else{
            merged[i] = sequence2[index2++];}}
    return merged;}
public int compare(int [] sequence1,int index1,int [] sequence2,int index2){
    int x = sequence1.length,y = sequence2.length;
    while(x < index1 && y < index2){
        int different = sequence1[index1] - sequence2[index2];
        if(different != 0){
            return different;}
        index1++;
        index2++;}
    return (x - index1) - (y - index2);}
```

总结：
====

题目可以说是很复杂了，分开来也就是单调栈和分治的组合，但是单调栈还可以这么用，非常棒，我对于单调栈的使用还是不太熟悉。
