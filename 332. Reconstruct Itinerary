# leetcode

题目描述（中等）
============

给定一个机票的字符串二维数组 [from, to]，子数组中的两个成员分别表示飞机出发和降落的机场地点，对该行程进行重新规划排序。所有这些机票都属于一个从 JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 开始。

说明:

如果存在多种有效的行程，你可以按字符自然排序返回最小的行程组合。例如，行程 ["JFK", "LGA"] 与 ["JFK", "LGB"] 相比就更小，排序更靠前
所有的机场都用三个大写字母表示（机场代码）。
假定所有机票至少存在一种合理的行程。
示例 1:

输入: [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
输出: ["JFK", "MUC", "LHR", "SFO", "SJC"]

解法一：欧拉回路
=============

Hierholzer 算法用于在连通图中寻找欧拉路径，其流程如下：
1、从起点出发，进行深度优先搜索
2、每次沿着某条边从一点移动到另一点的时候，都要删除这条边
3、如果没有可移动的半径，将所在节点加入到栈中，并返回

```java
Map<String,PriorityQueue<String>> map = new HashMap<>();
List<String> ans = new ArrayList<>();
public List<String> findItinerary(List<List<String>> tickets) {
    for(List<String> ticket : tickets){
        String src = ticket.get(0),dst = ticket.get(1);
        if (!map.containsKey(src)) {
                map.put(src, new PriorityQueue<String>());}
            map.get(src).offer(dst);}
        dfs("JFK");
        Collections.reverse(itinerary);
        return itinerary;}

    public void dfs(String curr) {
        while (map.containsKey(curr) && map.get(curr).size() > 0) {
            String tmp = map.get(curr).poll();
            dfs(tmp);}
        itinerary.add(curr);}
```

总结：
====

刚开始我想到的是直接使用哈希表，但是这样做难免会重复计算，而解决这个问题最好的方法是欧拉回路思维。
       
