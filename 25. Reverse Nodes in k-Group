# leetcode

题目描述（困难）
============

给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。
k 是一个正整数，它的值小于或等于链表的长度。
如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。

示例：
给你这个链表：1->2->3->4->5
当 k = 2 时，应当返回: 2->1->4->3->5
当 k = 3 时，应当返回: 3->2->1->4->5

说明：
你的算法只能使用常数的额外空间。
你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。

解法一：模拟
==========

```java
public ListNode reverseKGroup(ListNode head, int k) {
    ListNode dummy = new ListNode(0);
    dummy.next = head;
    ListNode pre = dummy;
    ListNode end = dummy;
    while(end.next != null){
        for(int i = 0;i < k && end.next != null;i++){
            end = end.next;}
        ListNode start = pre.next;
        ListNode next = end.next;
        end.next = null;
        pre.next = reverse(start);
        start.next = next;
        pre = start;
        end = pre;}
    return dummy.next;}
public ListNode reverse(ListNode head){
    ListNode pre = null;
    ListNode curr = head;
    while(curr != null){
        ListNode next = curr.next;
        curr.next = pre;
        pre = curr;
        curr = next;}
    return pre;}
```

总结：
====

与第24题不同的是，这里是翻转k个节点，24题翻转两个，因此这里需要用pre和end来维护一组k个节点。
