# leetcode

题目描述（中等）
============

给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。

示例:

输入: n = 4, k = 2
输出:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

解法一：回溯+剪枝
==============

```java
public List<List<Integer>> combine(int n, int k) {
    List<List<Integer>> ans = new ArrayList<>();
    if(k <= 0 || k > n){
        return ans;}
    Deque<Integer> path = new ArrayQueue<>();
    dfs(n,k,1,path,ans);
    return ans;}
public void dfs(int n,in k,int begin,Deque<Integer> path,List<List<Integer>> ans){
    if(path.size() == k){
        ans.add(new ArrayList<>(path));
        return;}
    for(int i = begin;i < n;i++){
        path.addLast(i);
        dfs(n,k,i+1,path,ans);
        path.removeLast();}}
```

优化：
====

```java
public List<List<Integer>> combine(int n, int k) {
    List<List<Integer>> ans = new ArrayList<>();
    if(k <= 0 || k > n){
        return ans;}
    Deque<Integer> path = new ArrayQueue<>();
    dfs(n,k,1,path,ans);
    return ans;}
public void dfs(int n,in k,int begin,Deque<Integer> path,List<List<Integer>> ans){
    if(path.size() == k){
        ans.add(new ArrayList<>(path));
        return;}
    for(int i = begin;i <= n - (k - path.size())+1;i++){
        path.addLast(i);
        dfs(n,k,i+1,path,ans);
        path.removeLast();}}
```

总结：
====

非常经典的回溯+剪枝操作，与组合总和那个系列相同。
