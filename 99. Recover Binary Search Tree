# leetcode

题目描述（困难）
=============

二叉搜索树中的两个节点被错误地交换。
请在不改变其结构的情况下，恢复这棵树。
示例：输入: [1,3,null,null,2]

   1
  /
 3
  \
   2

输出: [3,1,null,null,2]

   3
  /
 1
  \
   2
   
解法一：对数组进行排序
===================

```java
public void inorder(TreeNode root,List<Integer> ans){
  if(root == null) return;
  inorder(root.left,ans);
  ans.add(root.val);
  inorder(root.right,ans);}
public int [] findTwoSwapped(List<Integer> ans){
  int n = ans.size();
  int x = -1,y = -1;
  for(int i = 0;i < n-1;i++){
    if(ans.get(i+1) < ans.get(i)){
      y = ans.get(i+1);
      if(i == -1) x = ans.get(i);
      else break;}}
  return new int[] {x,y};}
public void recover(TreeNode root,int count,int x,int y){
  if(root != null){
    if(root.val == x || root.val == y){
      root.val = root.val == x ? y : x;
      if(--count == 0) return;}
    recover(root.left,count,x,y);
    recover(root.right,count,x,y);}}
public void recoverTree(TreeNode root){
  List<Integer> ans = new ArrayList<>();
  inorder(root,ans);
  int [] swapped = findTwoSwapped(ans);
  recover(root,2,swapped[0],swapped[1]);}
```

解法二：迭代中序遍历
=================

```java
public void swap(TreeNode r1,TreeNode r2){
  int temp = r1.val;
  r1.val = r2.val;
  r2.val = temp;}
public void recoverTree(TreeNode root){
  Stack<TreeNode> stack = new Stack<>();
  TreeNode x = null,y = null,pre = null;
  while(!stack.isEmpty() || root != null){
    while(root != null){
      stack.push(root);
      root = root.left;}
    root = stack.pop();
    if(pre != null && root.val < pre.val){
      y = root;
      if(x == null) x = pre;
      else break;}
    pre = root;
    root = root.right;}
  swap(x,y);}
```

解法三：递归中序遍历
=================

```java
TreeNode x = null,y = null,pre = null;
public void swap(TreeNode r1,TreeNode r2){
  int temp = r1.val;
  r1.val = r2.val;
  r2.val = temp;}
public void findTwoSwapped(TreeNode root){
  if(root == null) return;
  findTwoSwapped(root.left);
  if(pre != null && root.val < pre.val){
    y = root;
    if(x == null) x = pre;
    else return;}
  pre = root;
  findTwoSwapped(root.right);}
public void reverse(TreeNode root){
  findTwoSwapped(root);
  swap(x,y);}
```

总结：
====

要交换两个节点的值并不难，但是问题在于怎么确定交换的两个节点的位置，这里使用替换x和y的方法，通用于这三种解法。
