# leetcode

题目描述（困难）
============

有 buckets 桶液体，其中 正好 有一桶含有毒药，其余装的都是水。它们从外观看起来都一样。为了弄清楚哪只水桶含有毒药，
你可以喂一些猪喝，通过观察猪是否会死进行判断。不幸的是，你只有 minutesToTest 分钟时间来确定哪桶液体是有毒的。

喂猪的规则如下：

选择若干活猪进行喂养
可以允许小猪同时饮用任意数量的桶中的水，并且该过程不需要时间。
小猪喝完水后，必须有 minutesToDie 分钟的冷却时间。在这段时间里，你只能观察，而不允许继续喂猪。
过了 minutesToDie 分钟后，所有喝到毒药的猪都会死去，其他所有猪都会活下来。
重复这一过程，直到时间用完。
给你桶的数目 buckets ，minutesToDie 和 minutesToTest ，返回在规定时间内判断哪个桶有毒所需的 最小 猪数。

示例 1：
输入：buckets = 1000, minutesToDie = 15, minutesToTest = 60
输出：5

示例 2：
输入：buckets = 4, minutesToDie = 15, minutesToTest = 15
输出：2

解法一：动态规划
==============

```Java
class Solution{
    public int poorPigs(int buckets, int minutesToDie, int minutesToTest) {
        if(buckets == 1) return 0;
        int [][] combination = new int[buckets+1][buckets+1];
        combination[0][0] = 1;
        int interations = minutesToTest / minutesToDie;
        int[][] f = new int[buckets][iterations + 1];
        for (int i = 0; i < buckets; i++) {
            f[i][0] = 1;}
        for (int j = 0; j <= iterations; j++) {
            f[0][j] = 1;}
        for (int i = 1; i < buckets; i++) {
            combinations[i][0] = 1;
            combinations[i][i] = 1;
            for (int j = 1; j < i; j++) {
                combinations[i][j] = combinations[i - 1][j - 1] + combinations[i - 1][j];}
            for (int j = 1; j <= iterations; j++) {
                for (int k = 0; k <= i; k++) {
                    f[i][j] += f[k][j - 1] * combinations[i][i - k];}}
            if (f[i][iterations] >= buckets) {
                return i;}}
        return 0;}}
```

解法二：数学
===========

```Java
class Solution{
    public int poorPigs(int buckets, int minutesToDie, int minutesToTest) {
        int status = minutesToTest / minutesToDie + 1;
        int pigs = (int)Math.ceil(Math.log(buckets) / Math.log(status);
        return pigs;}}
```

```Python
class Solution:
    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:
        status = minutesToTest / minutesToDie + 1
        return ceil( log(buckets) / log(status) )
```

总结：
====

这道题还是使用数学方法简单，动态规划一直没完全看懂，希望我以后能看懂。
