# leetcode

题目描述（中等）
============

给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
说明：每次只能向下或者向右移动一步。
示例：输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。

解法一：动态规划
=============

思路与前面两题一样，但是这里容易出现一个下标越位的问题，需要分情况考虑。

```java
public int minPathSum(int [][] grid){
  int n = grid.length,m = grid[0].length;
  int [][] dp = new int[n][m];
  for (int i = n-1; i >= 0; i--) {
    for (int j = m- 1; j >= 0; j--) {
      if(i == n-1 && j != m-1){
        dp[i][j] = grid[i][j] + dp[i][j+1];}
      else if(i != n-1 && j == m-1){
        dp[i][j] = grid[i][j] + dp[i+1][j];}
      else if(i != n-1 && j != m-1){
        dp[i][j] = grid[i][j] + Math.min(dp[i+1][j],dp[i][j+1]);}
      else{
        dp[i][j] = grid[i][j];}}}
  return dp[0][0];}
```

将其化为一维数组

```java
public int minPathSum(int [][] grid){
  int n = grid.length,m = grid[0].length;
  int [] dp = new int[m];
  for(int i = n-1;i >= 0;i--){
    for(int j = m-1;j >= 0;j--){
      if(i == n-1 && j != m-1){
        dp[j] = grid[i][j] + dp[j+1];}
      else if(i != n-1 && j == m-1){
        dp[j] = grid[i][j] + dp[j];}
      else if(i != n-1 && j != m-1){
        dp[j] = grid[i][j] + Math.min(dp[j],dp[j+1]);}
      else{
        dp[j] = grid[i][j];}}}
  return dp[0];}
```

总结：
====

动态规划，在每一步都找到相对小的路径，与前两题一样，注意分情况。

