# leetcode

题目描述（简单）
============

给出 R 行 C 列的矩阵，其中的单元格的整数坐标为 (r, c)，满足 0 <= r < R 且 0 <= c < C。

另外，我们在该矩阵中给出了一个坐标为 (r0, c0) 的单元格。

返回矩阵中的所有单元格的坐标，并按到 (r0, c0) 的距离从最小到最大的顺序排，
其中，两单元格(r1, c1) 和 (r2, c2) 之间的距离是曼哈顿距离，|r1 - r2| + |c1 - c2|。（你可以按任何满足此条件的顺序返回答案。）

示例 1：
输入：R = 1, C = 2, r0 = 0, c0 = 0
输出：[[0,0],[0,1]]
解释：从 (r0, c0) 到其他单元格的距离为：[0,1]

解法一：直接排序
=============

```java
public int[][] allCellsDistOrder(int R, int C, int r0, int c0) {
    int[][] ret = new int[R * C][];
    for (int i = 0; i < R; i++) {
        for (int j = 0; j < C; j++) {
            ret[i * C + j] = new int[]{i, j};}}
    Arrays.sort(ret, new Comparator<int[]>() {
        public int compare(int[] a, int[] b) {
            return (Math.abs(a[0] - r0) + Math.abs(a[1] - c0)) - (Math.abs(b[0] - r0) + Math.abs(b[1] - c0));}
    });
    return ret;}
```

解法二：桶排序
============

```java
public int[][] allCellsDistOrder(int R, int C, int r0, int c0) {
    int maxDist = Math.max(r0,R - 1 - r0) + Math.max(c0,C - 1 - c0);
    List<List<int []>> bucket = new ArrayList<>();
    for(int i = 0;i <= maxDist;i++){
        bucket.add(new ArrayList<List<int []>>);}
    for(int i = 0;i < R;i++){
        for(int j = 0;j < C;j++){
            int d = dist(i,j,r0,c0);
            buckert.get(d).add(new int[]{i,j});}}
    int [][] ans = new int[R*C][];
    int index = 0;
    for(int i = 0;i <= maxDist;i++){
        for(int [] it : bucket.get(i)){
            ans[index++] = it;}}
    return ans;}
public int dist(int R,in C,int r0,int c0){
    return Math.abs(r1 - r2) + Math.abs(c1 - c2);}
```

解法三：几何法
============

```java
int[] dr = {1, 1, -1, -1};
int[] dc = {1, -1, -1, 1};
public int[][] allCellsDistOrder(int R, int C, int r0, int c0) {
    int maxDist = Math.max(r0, R - 1 - r0) + Math.max(c0, C - 1 - c0);
    int[][] ret = new int[R * C][];
    int row = r0, col = c0;
    int index = 0;
    ret[index++] = new int[]{row, col};
    for (int dist = 1; dist <= maxDist; dist++) {
        row--;
        for (int i = 0; i < 4; i++) {
            while ((i % 2 == 0 && row != r0) || (i % 2 != 0 && col != c0)) {
                if (row >= 0 && row < R && col >= 0 && col < C) {
                    ret[index++] = new int[]{row, col};}
                row += dr[i];
                col += dc[i];}}}
    return ret;}
```

总结：
====

第一种解法很容易理解，后面两种刚开始实在没法联系在一起，太厉害了。

