# leetcode

题目描述（中等）
============

有一个二维矩阵 A 其中每个元素的值为 0 或 1 。

移动是指选择任一行或列，并转换该行或列中的每一个值：将所有 0 都更改为 1，将所有 1 都更改为 0。

在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的得分就是这些数字的总和。

返回尽可能高的分数。

示例：输入：[[0,0,1,1],[1,0,1,0],[1,1,0,0]]
输出：39
解释：
转换为 [[1,1,1,1],[1,0,0,1],[1,1,1,1]]
0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39

解法一：贪心
==========

每一行最左边的数字变成1后，就只能进行列翻转了
具体操作是，对于最左边，最优解是全为1，因此每个元素的贡献是2^(n-1)，总共是m * 2^(n-1)
对于第j列，我们需要统计0和1的个数，最大值为k，则k是翻转后1的数量，该列总贡献是k * 2^(n-j-1)

```java
public int matrixScore(int[][] A) {
    int m = A.length, n = A[0].length;
    int ret = m * (1 << (n - 1));
    for (int j = 1; j < n; j++) {
        int nOnes = 0;
        for (int i = 0; i < m; i++) {
            if (A[i][0] == 1) {
                nOnes += A[i][j];
            } else {
                nOnes += (1 - A[i][j]);}}
        int k = Math.max(nOnes, m - nOnes);
        ret += k * (1 << (n - j - 1));}
    return ret;}
```

总结：
====

这里的思考点还是比较多的，需要考虑每一列的贡献，平均下来每一个元素的贡献，还需要总接出规律，很不容易想到。
