# leetcode

题目描述（中等）
=============

给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。

异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。

示例 1:

输入: s = "cbaebabacd", p = "abc"
输出: [0,6]
解释:
起始索引等于 0 的子串是 "cba", 它是 "abc" 的异位词。
起始索引等于 6 的子串是 "bac", 它是 "abc" 的异位词。
 示例 2:

输入: s = "abab", p = "ab"
输出: [0,1,2]
解释:
起始索引等于 0 的子串是 "ab", 它是 "ab" 的异位词。
起始索引等于 1 的子串是 "ba", 它是 "ab" 的异位词。
起始索引等于 2 的子串是 "ab", 它是 "ab" 的异位词。

解法一：滑动窗口
==============

```Java
class Solution{
    public List<Integer> findAnagrams(String s,String p){
        int sLen = s.length(),pLen = p.length();
        if(sLen < pLen) {
            return new ArrayList<>();}
        List<Integer> ans = new ArrayList<>();
        int [] sCount = new int[26];
        int [] pCount = new int[26];
        for(int i = 0;i < pLen;i++){
            sCount[s.charAt(i) - 'a']++;
            pCount[p.charAt(i) - 'a']++;}
        if(Arrays.equals(sCount,pCount)){
            ans.add(0);}
        for(int i = 0;i < pLen - sLen;i++){
            sCount[s.charAt(i) - 'a']--;
            pCount[s.charAt(i+pLen) - 'a']++;
            if(Arrays.equals(sCount,pCount)){
                ans.add(i+1);}}
        return ans;}}
```

```Python
class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        s_len,p_len = len(s),len(p)
        if s_len < p_len:
            return []
        ans = []
        s_count = [0] * 26
        p_count = [0] * 26
        for i in range(p_len):
            s_count[ord(s[i]) - 97] += 1
            p_count[ord(p[i]) - 97] += 1
        if s_count == p_count:
            ans.append(0)
        for i in range(s_len - p_len):
            s_count[ord(s[i]) - 97] -= 1
            s_count[ord(s[i + p_len]) - 97] += 1
            if s_count == p_count:
                ans.append(i + 1)
        return ans

总结：
====

初始解法倒是不难，不过优化起来就很复杂了。
