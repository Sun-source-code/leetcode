# leetcode

题目描述（中等）
============

如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。
第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。

例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。
相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。

给定一个整数序列，返回作为摆动序列的最长子序列的长度。 
通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。

示例 1:

输入: [1,7,4,9,2,5]
输出: 6 
解释: 整个序列均为摆动序列。

解法一：动态规划
=============

```java
public int wiggleMaxLength(int[] nums) {
    int n = nums.length;
    if(n < 2) return n;
    int [] up = new int[n];
    int [] down = new int[n];
    up[0] = 1;
    down[0] = 1;
    for(int i = 1;i < n;i++){
        if(nums[i] > nums[i-1]){
            up[i] = Math.max(up[i-1],down[i-1] + 1);
            down[i] = down[i-1];}
        else if(nums[i] < nums[i-1]){
            up[i] = up[i-1];
            down[i] = Math.max(down[i-1],up[i-1] + 1);}
        else{
            up[i] = up[i-1];
            down[i] = down[i-1];}}
    return Math.max(up[n-1],down[n-1]);
```

解法二：动态规划优化
=================

```java
public int wiggleMaxLength(int[] nums) {
    int n = nums.length;
    if(n < 2) return n;
    int up = 1,down = 1;
    for(int i = 0;i < n;i++){
        if(nums[i] > nums[i-1]){
            up = Math.max(up,down + 1);}
        else if(nums[i] < nums[i-1]){
            down = Math.max(down,up + 1);}}
    return Math.max(up,down);}
```

解法三：贪心
==========

```java
public int wiggleMaxLength(int[] nums) {
    int n = nums.length;
    if(n < 2) return n;
    int prediff = nums[1] - nums[0];
    int ret = prediff != 0 ？ 2 : 1;
    for(int i = 2;i < n;i++){
        int diff = nums[i] - nums[i-1];
        if((diff > 0 && prediff <= 0） || (diff < 0 && prediff >= 0)){
            ret++;
            prediff = diff;}}
    return ret;}
```

总结：
====

每一次是上升或下降仅与前一个数字有关，所以动态规划应该是比较容易想到的，但是贪心的思路非常好，更新prediff作为差值。
