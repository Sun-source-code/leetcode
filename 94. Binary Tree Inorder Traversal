# leetcode

题目描述（中等）
=============

给定一个二叉树，返回它的中序 遍历。
示例：输入: [1,null,2,3]
   1
    \
     2
    /
   3

输出: [1,3,2]

解法一：递归
==========

二叉树遍历最经典的方法，递归调用

```java
public List<Integer> inorderTraversal(TreeNode root){
  List<Integer> res = new ArrayList<>();
  helper(root,res);
  return res;}
public void helper(TreeNode root,List<Integer> res){
  if(root != null){
    if(root.left != null){
      helper(root.left,res);}
    res.add(root.val);
    if(root.right != null){
      helper(root.right,res);}}}
```

解法二：基于栈的遍历
=================

```java
public List<Integer> inorderTraversal(TreeNode root){
  List<Integer> res = new ArrayList<>();
  Stack<TreeNode> stack = new Stack<>();
  TreeNode curr = root;
  while(curr != null || !stack.isEmpty()){
    while(curr != null){
      stack.push(curr);
      curr = curr.left;}
    curr = stack.pop();
    res.add(curr.val);
    curr = curr.right;}
  return res;}
```

解法三：莫里斯遍历
===============

使用线索二叉树
1、将当前节点初始化为根节点
2、如果当前节点不为空
①若current没有左子节点
a.将current添加到输出
b. 进入右子树，亦即, current = current.right
②否则
a. 在current的左子树中，令current成为最右侧节点的右子节点
b. 进入左子树，亦即，current = current.left

```java
public List<Integer> inorderTraversal(TreeNode root){
  List<Integer> res = new ArrayList<>();
  TreeNode curr = root;
  TreeNode pre;
  while(curr != null){
    if(curr.left == null){
      res.add(curr.val);
      curr = curr.right;}
    else{
      pre = curr.left;
      while(pre.right != null && pre.right != curr){
        pre = pre.right;}
      pre.right = curr;
      TreeNode temp = curr;
      curr = curr.left;
      temp.left = null;}}
  return res;}
```

总结：
====

最经典的递归方法外，还有使用栈遍历，注意栈的存储后进先出，另外使用线索二叉树是最好的方法，效率比一般二叉树遍历要快，
是一个很好的遍历方法
