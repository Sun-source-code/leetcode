# leetcode

题目描述（简单）
=============

给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

示例 :
输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]

解法一：使用额外的数组
==================

使用一个额外的数组记录每一个位置的元素，然后遍历该数组，将该数组的元素赋给原数组

```java
public void rotate(int [] nums,int k){
    int [] a = new int[nums.length];
    for(in i = 0;i < nums.length;i++){
        a[(i+k) % nums.length] = nums[i];}
    for(int i = 0;i < nums.length;i++){
        nums[i] = a[i];}}
```

解法二：使用环状替换
=================

```java
public void rotate(int [] nums,int k){
    k = k % nums.length;
    int count = 0;
    for(int i = 0;count < nums.length;i++){
        int cur = i;
        int prev = nums[i];
        do{
            int next = (i + k) % nums.length;
            int temp = nums[next];
            nums[next] = prev;
            prev = temp;
            cur = next;
            count++;
        }where(i != curr);}}
```

解法三：使用反转
=============

原始数组                  : 1 2 3 4 5 6 7
反转所有数字后             : 7 6 5 4 3 2 1
反转前 k 个数字后          : 5 6 7 4 3 2 1
反转后 n-k 个数字后        : 5 6 7 1 2 3 4 --> 结果

```java
public void rotate(int [] nums,int k){
    k %= nums.length;
    reverse(nums,i,nums.length-1);
    reverse(nums,0,k-1);
    reverse(nums,k,nums.length-1);}
public void reverse(int [] nums,int start,int end){
    while(start < end){
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
        start++;
        end--;}}
```

总结：
====

暴力法和使用额外数组都很容易想到，使用环状替换和反转即是更高级的解法，尤其是反转，思路很棒。
