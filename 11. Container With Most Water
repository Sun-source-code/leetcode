# leetcode

题目描述（中等）
============

给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。
在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。
找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

说明：你不能倾斜容器，且 n 的值至少为 2。

示例：输入：[1,8,6,2,5,4,8,3,7]
输出：49

解法一：暴力
==========

直接双重循环找出最大值

```java
public int maxArea(int[] height) {
  int ans = Integer.MIN_VALUE;
  for(int left = 0;left < height.length;left++){
    for(int right = height.length - 1;right > left;right--){
      ans = Math.max(ans,Math.min(height[left],height[right])*(right-left));}}
  return ans;}
```

解法二：双指针
============

使用两个值来遍历，只要能够遍历完数组即可

```java
public int maxArea(int[] height) {
  int l = 0,r = height.length-1;
  int ans = Integer.MIN_VALUE;
  while(l <= r){
    int area = Math.min(height[l],height[r])*(r - l);
    ans = Math.max(ans,area);
    if(height[l] <= height[r]){
      l++;
    }else{
      r--;}}
  return ans;}
```

总结：
====

这里l和r是怎样变化并不重要，重要的是要让整个数组被遍历到，不需要双重循环也可以做到。
