# leetcode

题目描述（中等）
============

给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，
……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。

示例 1:

输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"

解法一：动态规划
=============

如12258，如果2单独翻译，那么翻译方法与原来一样，dp[i] = dp[i-1]
如果22一起翻译，那么翻译方法与只有1一样，dp[i] = dp[i-2]
因此在第三位，dp[i] = dp[i-1] + dp[i-2]

```java
class Solution {
    public int translateNum(int num) {
        String str = String.valueOf(num);
        int a = 1,b = 1;
        for(int i = 2;i <= str.length();i++){
            String tmp = str.substring(i-2,i);
            int c = tmp.compareTo("10") >= 0 && tmp.compareTo("25") <= 0 ? a+b : b;
            b = a;
            a = c;}
        return a;}}
```

总结：
====

与打家劫舍的方法类似，也类似斐波那契数列。
