# leetcode

题目描述（中等）
============

几张卡牌 排成一行，每张卡牌都有一个对应的点数。点数由整数数组 cardPoints 给出。

每次行动，你可以从行的开头或者末尾拿一张卡牌，最终你必须正好拿 k 张卡牌。

你的点数就是你拿到手中的所有卡牌的点数之和。

给你一个整数数组 cardPoints 和整数 k，请你返回可以获得的最大点数。

 

示例 1：

输入：cardPoints = [1,2,3,4,5,6,1], k = 3
输出：12
解释：第一次行动，不管拿哪张牌，你的点数总是 1 。但是，先拿最右边的卡牌将会最大化你的可获得点数。
最优策略是拿右边的三张牌，最终点数为 1 + 6 + 5 = 12 。

解法一：滑动窗口
=============

从前面和后面取出k个元素，那么剩余n-k个元素，只需要求出这n-k个元素的最小值，对应的就是获得的最大点数。

```java
class Solution{
    public int maxScore(int[] cardPoints, int k) {
        int n = cardPoints.length;
        int windowSize = n - k;
        int sum = 0;
        for(int i = 0;i < k;i++){
            sum += cardPoints[i];}
        int minSum = sum;
        for(int i = windowSize;i < n;i++){
            sum += cardPoints[i] - cardPoints[i-windowSize];
            minSum = Math.min(minSum,sum);}
        return Arrays.stream(cardoint).sum() - minSum;}}
```

总结：
====

开始我想到的是分为前后两端，将两端得到的和取最大值，但是这样超出时间限制，不如求中间一段的最小值，时间会快一点。
