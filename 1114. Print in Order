# leetcode

题目描述（简单）
============

我们提供了一个类：
public class Foo {
  public void first() { print("first"); }
  public void second() { print("second"); }
  public void third() { print("third"); }
}
三个不同的线程将会共用一个 Foo 实例。

线程 A 将会调用 first() 方法
线程 B 将会调用 second() 方法
线程 C 将会调用 third() 方法
请设计修改程序，以确保 second() 方法在 first() 方法之后被执行，third() 方法在 second() 方法之后被执行。

示例：输入: [1,2,3]
输出: "firstsecondthird"
解释: 
有三个线程会被异步启动。
输入 [1,2,3] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 second() 方法，线程 C 将会调用 third() 方法。
正确的输出是 "firstsecondthird"。

解法一：使用并发原子类AtomicInteger
===============================

```java
private AtomicInteger firstJobDone = new AtomicInteger(0);
private AtomicInteger secondJobDone = new AtomicInteger(0);

public Foo() {}

public void first(Runnable printFirst) throws InterruptedException {
    printFirst.run();
    firstJobDone.incrementAndGet();}

public void second(Runnable printSecond) throws InterruptedException {
    while(firstJobDone.get() != 1){}
    printSecond.run();
    secondJobDone.incrementAndGet();}

public void third(Runnable printThird) throws InterruptedException {
    while (secondJobDone.get() != 1) {}
    printThird.run();}
```

解法二：使用synchornized
======================

```java
private boolean firstFinished;
private boolean secondFinished;
private Object lock = new Object();
public void first(Runnable printFirst) throws InterruptedException {
    synchronized(lock){
        printFirst.run();
        firstFinished = true;
        lock.notifyAll();}}

public void second(Runnable printSecond) throws InterruptedException {
    synchronized(lock){
        while(!firstFinished){
            lock.wait();}
        printSecond.run();
        secondFinished = true;
        lock.notifyAll();}}

public void third(Runnable printThird) throws InterruptedException {
    synchronized(lock){
        while(!secondFinished){
            lock.wait();}
        printThird.run();}}
```

总结：
====

简单的多线程问题，最关键在于做两个标记，标记前两个进程是否已经执行，如果没有执行则强制当前进程等待。
