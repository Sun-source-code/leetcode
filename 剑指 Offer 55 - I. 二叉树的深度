# leetcode

题目描述（简单）
============

输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。

例如：
给定二叉树 [3,9,20,null,null,15,7]，

    3
   / \
  9  20
    /  \
   15   7
返回它的最大深度 3 。

解法一：深度优先遍历
=================

```java
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;
        return Math.max(maxDepth(root.left),maxDepth(root.right)) + 1;}}
```

解法二：广度优先遍历
=================

```java
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;
        Queue<TreeNode> queue = new LinkedList<>();
        Queue<TreeNode> tmp;
        int ans = 0;
        queue.add(root);
        while(!queue.isEmpty()){
            tmp = new LinkedList<>();
            for(TreeNode node : queue){
                if(node.left != null) tmp.add(node.left);
                if(node.right != null) tmp.add(node.right);}
            queue = tmp;
            ans++;}
        return ans;}}
```

总结：
====

层序遍历经典问题，简单题。
