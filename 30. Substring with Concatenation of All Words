# leetcode

题目描述（困难）
============

给定一个字符串 s 和一些长度相同的单词 words。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。
注意子串要与 words 中的单词完全匹配，中间不能有其他字符，但不需要考虑 words 中单词串联的顺序。

示例 ：
输入：
  s = "barfoothefoobarman",
  words = ["foo","bar"]
输出：[0,9]
解释：
从索引 0 和 9 开始的子串分别是 "barfoo" 和 "foobar" 。
输出的顺序不重要, [9,0] 也是有效答案。

解法一：哈希表
============

两个哈希表，一个是words，一个是截取的字符串，比较两个哈希表是否相等

```java
public List<Integer> findSubstring(String s, String[] words) {
    List<Integer> ans = new ArrayList<>();
    if(s == null || s.length() == 0 || words == null || words.length == 0){
        return ans;}
    int one_word = words[0].length();
    int word_num = words.length;
    int all_len = one_word * word_num;
    Map<String,Integer> map = new HashMap<>();
    for(String word : words){
        map.put(word,map.getOrDefault(word,0)+1);}
    for(int i = 0;i < s.length() - all_len + 1;i++){
        String temp = s.substring(i,i+all_len);
        Map<String,Integer> temp_map = new HashMap<>();
        for(int j = 0;j < all_len;j += one_word){
            String w = temp.substring(j,j+one_word);
            temp_map.put(w,temp_map.getOrDefault(w,0)+1);}
        if(map.equals(temp_map)) ans.add(i);}
    return ans;}
```

解法二：滑动窗口
=============

思路基本上是一样的，只是将后面的equals操作换成使用双指针检索，大大降低了时间复杂度

```java
public List<Integer> findSubstring(String s, String[] words) {
    List<Integer> ans = new ArrayList<>();
    if(s == null || s.length() == 0 || words == null || words.length == 0){
        return ans;}
    int one_word = words[0].length();
    int word_num = words.length;
    int all_len = one_word * word_num;
    Map<String,Integer> map = new HashMap<>();
    for(String word : words){
        map.put(word,map.getOrDefault(word,0)+1);}
    for(int i = 0;i < s.length() - all_len + 1;i++){
        String temp = s.substring(i,i+all_len);
        Map<String,Integer> temp_map = new HashMap<>();
        while (right + one_word <= s.length()) {
            String w = s.substring(right, right + one_word);
            temp_map.put(w, temp_map.getOrDefault(w, 0) + 1);
            right += one_word;
            count++;
            while (temp_map.getOrDefault(w, 0) > map.getOrDefault(w, 0)) {
                String t_w = s.substring(left, left + one_word);
                count--;
                temp_map.put(t_w, temp_map.getOrDefault(t_w, 0) - 1);
                left += one_word;}
            if (count == word_num) ans.add(left);}}
    return ans;}
```

解法二优化：
=========

public List<Integer> findSubstring(String s, String[] words) {
    List<Integer> res = new ArrayList<>();
    if (s == null || s.length() == 0 || words == null || words.length == 0) return res;
    HashMap<String, Integer> map = new HashMap<>();
    int one_word = words[0].length();
    int word_num = words.length;
    int all_len = one_word * word_num;
    for (String word : words) {
        map.put(word, map.getOrDefault(word, 0) + 1);}
    for (int i = 0; i < one_word; i++) {
        int left = i, right = i, count = 0;
        HashMap<String, Integer> tmp_map = new HashMap<>();
        while (right + one_word <= s.length()) {
            String w = s.substring(right, right + one_word);
            right += one_word;
            if (!map.containsKey(w)) {
                count = 0;
                left = right;
                tmp_map.clear();
            } else {
                tmp_map.put(w, tmp_map.getOrDefault(w, 0) + 1);
                count++;
                while (tmp_map.getOrDefault(w, 0) > map.getOrDefault(w, 0)) {
                    String t_w = s.substring(left, left + one_word);
                    count--;
                    tmp_map.put(t_w, tmp_map.getOrDefault(t_w, 0) - 1);
                    left += one_word;}
                if (count == word_num) res.add(left);}}}
    return res;}
```

总结：
====

这其实也是一个优化的思想，从前面的三百多毫秒到最后11毫秒，速率提升了很多，而方法也不过是将比较的过程替换，思路值得学习。
