# leetcode

题目描述（中等）
============

给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。
你的算法时间复杂度必须是 O(log n) 级别。
如果数组中不存在目标值，返回 [-1, -1]。

示例 :
输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]

解法一：线性扫描
=============

```java
public int[] searchRange(int[] nums, int target) {
    int [] ans = {-1,-1};
    for(int i = 0;i < nums.length;i++){
        if(nums[i] == target){
            ans[0] = i;}}
    if(ans[0] == -1){
        return ans;}
    for(int i = nums.length-1;i >= 0;i--){
        if(nums[i] == target){
            ans[1] = i;}}
    return ans;}
```

解法二：二分查找
=============

```java
public int[] searchRange(int[] nums, int target) {
    int [] ans = {-1,-1};
    int leftIndex = helper(nums,target,true);
    if(leftIndex == nums.length || nums[leftIndex] != target){
        return ans;}
    ans[0] = leftIndex;
    ans[1] = helper(nums,target,false)-1;
    return ans;}
public int helper(int [] nums,int target,boolean flag){
    int left = 0;
    int right = nums.length;
    while(left < right){
        int mid = (left + right) / 2;
        if(nums[mid] > target || (left && target == nums[mid])){
            right = mid;}
        else{
            left = mid + 1;}}
    return left;}
```

总结：
====

对于二分查找的修改。
