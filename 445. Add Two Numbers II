# leetcode

题目描述（中等）
============

给你两个 非空 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。
你可以假设除了数字 0 之外，这两个数字都不会以零开头。

进阶：
如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。

示例：
输入：(7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 8 -> 0 -> 7

解法一：链表反转
=============

```java
public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    if(l1 == null) return l2;
    if(l2 == null) return l1;
    ListNode node1 = reverse(l1);
    ListNode node2 = reverse(l2);
    int carry = 0;
    ListNode newHead = new ListNode(0);
    ListNode curr = newHead;
    while(node1 != null || node2 != null){
        int x = node1 == null ? 0 : node1.val;
        int y = node2 == null ? 0 : node2.val;
        int num = (x + y + carry) % 10;
        ListNode node = new ListNode(num);
        curr.next = node;
        curr = node;
        carry = (x + y + carry) / 10;
        if(node1 != null) node1 = node1.next;
        if(node2 != null) node2 = node2.next;}
    if(carry > 0) curr.next = new ListNode(carry);
    ListNode res = reverse(newHead.next);
    return res;}
public ListNode reverse(ListNode head){
    if (head == null) return null;
    ListNode pre = null;
    while (head != null){
        ListNode next = head.next;
        head.next = pre;
        pre = head;
        head = next;}
    return pre;}
```

解法二：栈
========

```java
public ListNode addTwoNumbers(ListNode l1, ListNode l2) { 
    Stack<Integer> stack1 = new Stack<>();
    Stack<Integer> stack2 = new Stack<>();
    while (l1 != null) {
        stack1.push(l1.val);
        l1 = l1.next;}
    while (l2 != null) {
        stack2.push(l2.val);
        l2 = l2.next;}
    int carry = 0;
    ListNode head = null;
    while (!stack1.isEmpty() || !stack2.isEmpty() || carry > 0) {
        int sum = carry;
        sum += stack1.isEmpty()? 0: stack1.pop();
        sum += stack2.isEmpty()? 0: stack2.pop();
        ListNode node = new ListNode(sum % 10);
        node.next = head;
        head = node;
        carry = sum / 10;}
    return head;}
```

总结：
====

两个思路，一个是将链表反转后从头开始加，最后把结果反转，另一个是使用栈的后进先出，得到链表的尾节点，依次相加。
