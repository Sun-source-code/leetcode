# leetcode

题目描述（中等）
============

如果一棵二叉树满足下述几个条件，则可以称为 奇偶树 ：

二叉树根节点所在层下标为 0 ，根的子节点所在层下标为 1 ，根的孙节点所在层下标为 2 ，依此类推。
偶数下标 层上的所有节点的值都是 奇 整数，从左到右按顺序 严格递增
奇数下标 层上的所有节点的值都是 偶 整数，从左到右按顺序 严格递减
给你二叉树的根节点，如果二叉树为 奇偶树 ，则返回 true ，否则返回 false 。

示例 1：

输入：root = [1,10,4,3,null,7,9,12,8,6,null,null,2]
输出：true
解释：每一层的节点值分别是：
0 层：[1]
1 层：[10,4]
2 层：[3,7,9]
3 层：[12,8,6,2]
由于 0 层和 2 层上的节点值都是奇数且严格递增，而 1 层和 3 层上的节点值都是偶数且严格递减，因此这是一棵奇偶树。

解法一：广度优先遍历
=================

```java
public boolean isEvenOddTree(TreeNode root) {
    List<List<Integer>> ans = new ArrayList<>();
    Queue<TreeNode> queue = new LinkedList<>();
    queue.offer(root);
    if(root.val % 2 == 0) return false;
    while(!queue.isEmpty()){
        int level = queue.size();
        List<Integer> submit = new ArrayList<>();
        for(int i = 0;i < level;i++){
            TreeNode currNode = queue.poll();
            if(currNode != null) {
                submit.add(currNode.val);
                queue.offer(currNode.left);
                queue.offer(currNode.right);}}
            if(submit.size() > 0){
            ans.add(submit);}}
    int size = ans.size();
    for(int i = 1;i < size;i++){
        if(i % 2 == 0){
            if(ans.get(i).size() == 1){
                if(ans.get(i).get(0) % 2 == 0){
                    return false;
                }else{
                    continue;}}
            for(int j = 0;j < ans.get(i).size()-1;j++){
                if(ans.get(i).get(j) >= ans.get(i).get(j+1) || ans.get(i).get(j) % 2 == 0 || ans.get(i).get(j+1) % 2 == 0){
                    return false;}}}
        if(i % 2 == 1){
            if(ans.get(i).size() == 1){
                if(ans.get(i).get(0) % 2 == 1){
                    return false;
                }else{
                    continue;}}
            for(int j = 0;j < ans.get(i).size()-1;j++){
                if(ans.get(i).get(j) <= ans.get(i).get(j+1) || ans.get(i).get(j) % 2 == 1 || ans.get(i).get(j+1) % 2 == 1){
                    return false;}}}}
    return true;}}
```

总结：
====

层序遍历，将每一层的节点值加入到一个链表中，对应没一层查看是否为奇数还是偶数，是否递增还是递减。
