# leetcode

题目描述（中等）
============

反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。
说明:1 ≤ m ≤ n ≤ 链表长度。
示例：输入: 1->2->3->4->5->NULL, m = 2, n = 4
输出: 1->4->3->2->5->NULL

解法一：递归
==========

找到处于m和n位置的节点，将最左边和最右边的节点值互换

```java
private boolean stop;
private ListNode left;
public void recurseAndReverse(ListNode right,int m,int n){
  if(m == n) return;
  right = right.next;
  if(m > 1){
    this.left = this.left.next;}
  this.recurseAndReverse(right,m-1,n-1);
  if(this.left == right || right.next == this.left){
    this.stop = true;}
  if(!this.stop){//交换两个结点的值
    int t = this.left.val;
    this.left.val = right.val;
    right.val = t;
    this.left = this.left.next;}}
public ListNode reverseBetween(ListNode head,int m,int n){
  this.left = head;
  this.stop = false;
  this.recurseAndReverse(head,m,n);
  return head;}
```

解法二：迭代
==========

```java
public ListNode reverseBetween(ListNode head,int m,int n){
  if(head == null) return null;
  ListNode cur = head,pre = null;
  while(m > 1){
    pre = cur;
    cur = cur.next;
    m--;
    n--;}
  ListNode con = pre,tail = cur;
  ListNode third = null;
  while(n > 1){
    third = cur.next;
    cur.next = pre;
    pre = cur;
    cur = third;
    n--;}
  if(con != null){
    con.next = pre;}
  else{
    head = pre;}
  tail.next = cur;
  return head;}
```

总结：
====

还是反转链表中递归和迭代的使用，这里不同的是要找到新的范围。
